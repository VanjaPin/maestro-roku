import "pkg:/source/core/IOC.bs"
import "pkg:/source/core/Tasks.bs"
import "pkg:/source/core/Utils.bs"
import "pkg:/source/core/DebugTimer.bs"
import "pkg:/source/ml/ComponentInfo.bs"

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ Initialization
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

function Init()
  view.initializeFocusManager(m.global)
  tick = m.top.getScene().createChild("Timer")
  tick.duration = 0.01
  tick.repeat = true
  tick.control = "start"
  setOrAddNodeField(m.global, "tick", tick)
  tasks.observeNodeField(tick, "fire", onInfoChange, "none")
  ioc.setInstance("focusedIndex", {
    row: 0
    cell: 0
  })

  initFlyweight()
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ flyweight
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

function initFlyweight()
  m.componentPool = createObject("roSGNode", "ComponentPool")
  m.global.addFields({ "componentPool": m.componentPool })

  m.cellTracker = createObject("roSGNode", "CellTracker")
  m.global.addFields({ "cellTracker": m.cellTracker })
  m.top.addFields({ "_global": m.global })

  m.infoLabel = m.top.findNode("infoLabel")

end function

function prebakeCells()
  timer = new utils.DebugTimer("prebake")
  m.componentPool@.prebakeComponents(30, "LongCell")
  m.componentPool@.prebakeComponents(30, "HeroCell")
  m.componentPool@.prebakeComponents(100, "ml_SimpleCell")
  ' m.componentPool@.prebakeComponents(20, "ml_HorizontalRow")
  ' m.componentPool@.prebakeComponents(10, "ml_RowHeader")
  timer.log("prebake")
end function


'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ callbacks
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

function onInfoChange()
  m.infoLabel.text = ` CP: ${m.componentPool.numberOfComponentsInUse} / ${m.componentPool.numberOfComponents}`
  list = ioc.getInstance("list")

  if list <> invalid
    cellIndex = list.focusedCellIndex
    rowIndex = list.focusedRowIndex
    fraction = list.focusedFraction.toStr("%0.2f")
    subRowIndex = list.focusedSubRowIndex
  else
    cellIndex = 0
    rowIndex = 0
    subRowIndex = 0
    fraction = 0
  end if
  m.infoLabel.text += ` FOCUS: ${rowIndex}(${subRowIndex}): ${cellIndex} - F ${fraction}% O: ${list.screenOffset}`

  ' m.infoLabel.text += ` FI: ${focusedIndex.cell} I: ${index} NI: ${nextIndex}`
  ' m.infoLabel.text += ` FOCUS: ${focusedIndex.row}, ${focusedIndex.cell} ${targetPos} ${currentPos} ${percent}`
  ' m.infoLabel.text += ` SP: ${startPos} TP: ${targetPos} D: ${distance} P: ${currentPos} %: ${percent}`
end function


'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ lifecycle
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

function onFirstShow()
  m.log.info("onFirstShow")
  prebakeCells()
  ' m.screen = createSGNode("TeamScreen", m.top.findNode("contentGroup"), "listScreen")
  m.screen = createSGNode("ListScreen", m.top.findNode("contentGroup"), "listScreen")
  ' m.screen = createSGNode("ModuleScreen", m.top.findNode("contentGroup"), "ModuleScreen")
  view.setFocus(m.screen)
  m.loadingIndicator.isActive = false
end function

function onGainedFocus(isSelfFocused as boolean)
  if isSelfFocused and m.screen <> invalid
    view.setFocus(m.screen)
  end if
end function