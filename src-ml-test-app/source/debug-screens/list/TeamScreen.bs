import "pkg:/source/ml/ListMixin.bs"
import "pkg:/source/view/BaseScreen.bs"
import "pkg:/source/ml/ListDelegateMixin.bs"
import "pkg:/source/core/DebugTimer.bs"

namespace ml.sample
  @node("TeamScreen", "mv_BaseScreen")
  class TeamScreen extends mv.BaseScreen

    'views
    private list
    private listHolder
    private bgRect

    'style
    private defaultCellType = "ml_SimpleCell"

    'state
    public componentPool as mc.types.Node
    private contentId = 0
    private rowSettings
    private focusSettings
    private cellSettings
    private loadingIndicator
    private favoriteModule as mc.types.node
    private followingModule as mc.types.node
    private teamsModule as mc.types.node
    private scrollSpeed = 0.75

    function new()
      super("TeamScreen")
    end function

    protected override function initialize()
      super.initialize()
      translation = [0, 0]
      size = [1920, 1080]

      m.bgRect = m.createSGNode("mv_Rectangle", m.top, "bgRect", {
        translation: translation
        size: size
        color: "#6a307d"
      })
      m.listHolder = m.createSGNode("Group", m.top, "listHolder")
      m.componentPool = m.global.componentPool

      m.list = m.createSGNode("ml_List", m.listHolder, "list", {
        translation: translation
        width: size[0]
        height: size[1]
      })
      mioc.setInstance("list", m.list)
      m.loadingIndicator = m.createSGNode("LoadingIndicator", m.top, "loadingIndicator", {
        isActive: true
        width: 1920
        height: 1080
        backgroundVisible: false
      })
      ml.delegateMixin.setListDelegate(m.list)
      m.onResetChange()
    end function

    private function onResetChange()
      m.list.content = invalid
      m.cellSettings = ml.listMixin.createCellSettings("ml_SimpleCell", [528, 297], 30)

      timer = new mc.utils.DebugTimer("list")
      m.rowSettings = ml.listMixin.createRowSettings(m.cellSettings, invalid, 30)
      listSettings = ml.listMixin.createListSettings(-1, -1)
      listSettings.rowCreationStrategy = "async"
      listSettings.rowCreationBatchSize = 10
      listSettings.rowCreationBatchDelay = 0.1
      focusSettings = ml.listMixin.createFocusSettings(m.scrollSpeed)
      content = ml.listMixin.createListContent(focusSettings, m.rowSettings, listSettings)
      items = m.createData()
      timer.log("makeData")
      m.setFocus(m.loadingIndicator)
      content@.appendChildren(items)
      m.list.visible = false
      m.list.content = content
      timer.log("set content")
      if m.list.state = "rendered"
        m.onListRenderState("rendered")
        m.loadingIndicator.isActive = false
      else
        m.observeNodeField(m.list, "state", m.onListRenderState, "value", true)
      end if
    end function

    private function onListRenderState(state as string)
      m.log.info("onListRenderState", state)
      if state = "rendered"
        m.setFocus(m.list)
        m.list@.moveToItem([0, 0], false)
        m.list.visible = true
        m.loadingIndicator.isActive = false
      end if
    end function

    private function createData()
      content = []
      rowFocusSettings = ml.listMixin.createFocusSettings(m.scrollSpeed, "fixed", [-20, -20, 20, 20])
      showHero = true
      headerSettings = ml.listMixin.createHeaderSettings([30, 20], 100, "mediumBold,50", "#ffff00")
      row = createObject("roSGNode", "ml_RowContent")
      row.title = "FAVORITE TEAM"
      row.id = rnd(2147483647).toStr()
      cellSettings = ml.listMixin.createCellSettings(m.defaultCellType, [307, 200], 30)
      row.settings = ml.listMixin.createRowSettings(cellSettings, rowFocusSettings, 30, headerSettings)
      row.settings.contentOffset = [200, 0]
      numItems = 1
      content.push(row)
      m.favoriteModule = row
      row@.appendChildren(m.makeItems(m.defaultCellType, numItems))

      row = createObject("roSGNode", "ml_RowContent")
      row.title = "FOLLOWING"
      row.id = rnd(2147483647).toStr()
      cellSettings = ml.listMixin.createCellSettings(m.defaultCellType, [307, 200], 40)
      row.settings = ml.listMixin.createRowSettings(cellSettings, rowFocusSettings, 30, headerSettings, 330)
      row.settings.contentOffset = [200, 0]
      numItems = 5
      content.push(row)
      m.followingModule = row
      row@.appendChildren(m.makeItems(m.defaultCellType, numItems))

      row = createObject("roSGNode", "ml_RowContent")
      row.title = "TEAMS"
      row.id = rnd(2147483647).toStr()
      cellSettings = ml.listMixin.createCellSettings("LongCell", [1192, 144], 40)
      gridFocusSettings = ml.listMixin.createFocusSettings(m.scrollSpeed, "floating", invalid, "underneath", "fixed")
      gridFocusSettings.feedbackUri = "pkg:/images/solid.9.png"
      gridFocusSettings.feedbackColor = "#aaaaaa"
      row.settings = ml.listMixin.createGridRowSettings(cellSettings, gridFocusSettings, 30, headerSettings, 100, 1, 144, 4, 150)
      ' row.settings = ml.listMixin.createGridRowSettings(cellSettings, gridFocusSettings, 30, headerSettings, 690, 1, 144, 5, 150)
      row.settings.contentOffset = [200, 30]
      numItems = 20
      content.push(row)
      m.teamsModule = row
      row@.appendChildren(m.makeItems(m.defaultCellType, numItems))
      return content
    end function

    private function makeItems(cellType as string, number as integer)
      items = []
      for i = 0 to number - 1
        items.push(m.makeItem(cellType, `Team ${m.contentId}`))
      end for
      return items
    end function

    private function makeItem(cellType as string, title as string) as mc.types.node
      child = createObject("roSGNode", "ContentNode")
      id = str(m.contentId).trim()
      ' child.id = rnd(2147483647).toStr()
      child.id = id
      child.description = "some really long " + id + "text in here " + id
      child.HDGRIDPOSTERURL = "https://picsum.photos/id/" + str(m.contentId mod 1000).trim() + "/340/340"
      child.title = title
      m.contentId++
      return child
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ lifecycle
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected override function onShow()
      super.onShow()
      m.list.isHidden = false
      m.setFocus(m.list)
    end function

    protected override function onHide()
      super.onHide()
      m.list.isHidden = true
    end function

    protected override function onGainedFocus(isSelfFocused as boolean)
      super.onGainedFocus(isSelfFocused)
      m.log.info("onGainedFocus", isSelfFocused)

      if isSelfFocused
        m.setFocus(m.list)
      end if
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Private Methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function unFollowTeam(index as integer) as void

      team = m.followingModule.getChild(index)
      if team = invalid
        return
      end if

      ? "unfollow "; team.title

      m.teamsModule@.setNotificationsEnabled(false)

      m.followingModule@.removeChildIndex(index)
      m.teamsModule@.insertChild(team, 0)
      m.teamsModule@.sortByKey("title")

      m.teamsModule@.setNotificationsEnabled(true, true)
      m.followingModule.isHidden = m.followingModule.getChildCount() = 0
      m.teamsModule.isHidden = m.teamsModule.getChildCount() = 0
      if m.followingModule.isHidden
        m.list@.moveToItem([0, 0])
      end if
    end function

    private function selectFavorite()
      team = m.followingModule.getChild(0)
      ? "selected fave>>>>>:"; mc.dv(team)
      m.teamsModule@.setNotificationsEnabled(false)
      m.favoriteModule@.clear()
      if team <> invalid
        'we need a clone, because this team will show in 2 modules
        team = team.clone(true)
        m.favoriteModule@.appendChild(team)
      end if
      m.teamsModule@.setNotificationsEnabled(true, true)
      m.list@.moveToItem([0, 0])
    end function

    private function followTeam(itemIndex as integer) as void
      team = m.teamsModule.getChild(itemIndex)
      if team = invalid
        return
      end if

      ? "follow "; team.title
      m.teamsModule@.removeChildIndex(itemIndex)
      m.followingModule@.insertChild(team, 0)
      m.followingModule.isHidden = m.followingModule.getChildCount() = 0
      m.teamsModule.isHidden = m.teamsModule.getChildCount() = 0
      ? "followingModule : "; m.followingModule.getChildCount()
      ? "teamsModule : "; m.teamsModule.getChildCount()
      if m.teamsModule.isHidden
        ? " TEAMS IS HIDDEN"
        m.list@.moveToItem([1, 0])
      end if
      ' m.list@.moveToItem([2, index])

    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ List Delegate
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function onCellWillGainFocus(rowIndex as integer, itemIndex as integer, direction as integer)
      ' ? "+SCREEN onCellWillGainFocus : R: "; rowIndex ; " I: " ; itemIndex; " D:" ; direction
      mioc.setInstance("focusedIndex", {
        row: rowIndex
        cell: itemIndex
      })
    end function

    private function onCellWillLoseFocus(rowIndex as integer, itemIndex as integer, direction as integer)
      ' ? "+SCREEN onCellWillLoseFocus : R: "; rowIndex ; " I: " ; itemIndex; " D:" ; direction
      mioc.setInstance("focusedIndex", {
        row: rowIndex
        cell: itemIndex
      })
    end function

    private function onCellDidGainFocus(rowIndex as integer, itemIndex as integer, direction as integer)
      ' ? "+SCREEN onCellDidGainFocus  : R: "; rowIndex ; " I: " ; itemIndex; " D:" ; direction
      mioc.setInstance("focusedIndex", {
        row: rowIndex
        cell: itemIndex
      })
    end function


    private function onCellDidLoseFocus(rowIndex as integer, itemIndex as integer, direction as integer)
      ' ? "+SCREEN onCellDidLoseFocus : R: "; rowIndex ; " I: " ; itemIndex; " D:" ; direction
    end function
    private function onRowWillEnter(rowIndex as integer, direction as integer)
      ' ? "+SCREEN onRowWillEnter : R: "; rowIndex ; " D:" ; direction
    end function
    private function onRowWillExit(rowIndex as integer, direction as integer)
      ' ? "+SCREEN onRowWillExit : R: "; rowIndex ; " D:" ; direction
    end function
    private function onRowDidEnter(rowIndex as integer, direction as integer)
      ' ? "+SCREEN onRowDidEnter : R: "; rowIndex ; " D:" ; direction
    end function
    private function onRowDidExit(rowIndex as integer, direction as integer)
      ' ? "+SCREEN onRowDidExit : R: "; rowIndex ; " D:" ; direction
    end function

    private function onRowDidGainFocus(rowIndex as integer, direction as integer)
      ' ? "+SCREEN onRowDidGainFocus : R: "; rowIndex ; " D:" ; direction

      row = m.list@.getRowRenderer(rowIndex)
      if row <> invalid
        mioc.setInstance("focusedIndex", {
          row: rowIndex
          cell: row.focusedCellIndex
        })
      else
        mioc.setInstance("focusedIndex", {
          row: -1
          cell: -1
        })

      end if

      ' if direction = -1
      '   row = m.list@.getRowRenderer(rowIndex)
      '   row.opacity = 1
      ' end if
    end function

    private function onRowDidLoseFocus(rowIndex as integer, direction as integer)
      ' ? "+SCREEN onRowDidLoseFocus : R: "; rowIndex ; " D:" ; direction

      ' row = m.list@.getRowRenderer(rowIndex)
      ' if direction = 1
      '   row.opacity = 0
      ' end if

    end function

    private function onRowGainingFocus(rowIndex as integer, direction as integer, fraction as float)
      ' ? "+SCREEN onRowGainingFocus : R: "; rowIndex ; " D:" ; direction ; " F: " ; fraction
      ' if direction = -1
      '   row = m.list@.getRowRenderer(rowIndex)
      '   row.opacity = fraction
      ' end if
    end function

    private function onRowLosingFocus(rowIndex as integer, direction as integer, fraction as float)
      ' ? "+SCREEN onRowLosingFocus : R: "; rowIndex ; " D:" ; direction ; " F: " ; fraction
      ' if direction = 1
      '   row = m.list@.getRowRenderer(rowIndex)
      '   row.opacity = 1 - fraction
      ' end if

    end function

    private function onCellGainingFocus(rowIndex as integer, cellIndex as integer, direction as integer, fraction as float)
      ' ? "+SCREEN onCellGainingFocus : R: "; rowIndex ; " C " ; cellIndex; " D:" ; direction ; " F: " ; fraction
      ' if direction = -1
      '   row = m.list@.getRowRenderer(rowIndex)
      '   row.opacity = fraction
      ' end if
    end function

    private function onCellLosingFocus(rowIndex as integer, cellIndex as integer, direction as integer, fraction as float)
      ' ? "+ onCellLosingFocus : R: "; rowIndex ; " D:" ; " C " ; cellIndex; direction ; " F: " ; fraction
      ' if direction = 1
      '   row = m.list@.getRowRenderer(rowIndex)
      '   row.opacity = 1 - fraction
      ' end if

    end function

    private function onItemSelected(rowIndex as integer, itemIndex as integer)
      row = m.list.content.getChild(rowIndex)
      if m.favoriteModule.isSameNode(row)
        m.selectFavorite()
      else if m.followingModule.isSameNode(row)
        m.unFollowTeam(itemIndex)
      else if m.teamsModule.isSameNode(row)
        m.followTeam(itemIndex)
      end if
    end function
  end class
end namespace