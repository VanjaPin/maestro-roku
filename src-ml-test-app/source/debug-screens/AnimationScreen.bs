import "pkg:/source/ml/ListMixin.bs"
import "pkg:/source/view/BaseScreen.bs"
import "pkg:/source/core/Utils.bs"
import "pkg:/source/view/Animation.bs"
import "pkg:/source/core/DebugTimer.bs"

@node("AnimationScreen", "mv_BaseScreen")
class AnimationScreen extends mv.BaseScreen

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Views
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private controlsGroup as mc.types.node
  private button1 as mc.types.node
  private button2 as mc.types.node
  private button3 as mc.types.node
  private button4 as mc.types.node
  private button5 as mc.types.node
  private animButton as mc.types.node
  private rect as mc.types.node

  private viewJson = [{
    id: "animButton"
    _type: "mv_Button"
    text: "longer text"
    translation: [100, 100]
    size: [400, 60]
    style: m.styleManager@.getStyle("mv.Button.default")
  }]

  private updatedViewJson = [{
    id: "animButton"
    text: "small"
    translation: [1800, 600]
    size: [200, 60]
    style: m.setStyleColor(m.styleManager@.getStyle("mv.Button.default"), "#aa0000", "#ff0000", "#aa0000", "#000000", "#ffffff", "#aaaaaa")
  }]

  private updatedViewJson2 = [{
    id: "animButton"
    text: "red"
    translation: [400, 100]
    size: [800, 100]
    style: m.setStyleColor(m.styleManager@.getStyle("mv.Button.default"), "#aa0000", "#ff0000", "#aa0000", "#000000", "#ffffff", "#aaaaaa")

  }]

  private rectangle = m.createSGNode("mv_Rectangle", m.top, "rectangle", {
    color: "#ff0000"
    size: [200, 200]
    translation: [0, 500]
  })

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Animations
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private buttonAnim as mv.animations.ViewJson

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Private Fields
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  @sync
  @observer("onTitleChange")
  @inject("user", "settings.spoilers")
  private title as string

  function new()
    super("AnimationScreen")
  end function

  private moveAnim as mv.animations.Move

  protected override function initialize()
    super.initialize()
    m.createViews()
    m.buttonAnim = new mv.animations.ViewJson(m.viewJson, m.updatedViewJson, 5)
    debugTimer = new mc.utils.DebugTimer("make keys")
    m.makeAnim(300)
    debugTimer.log("made keys")
    m.buttonAnim.start()
    m.observeNodeField(m.controlsGroup, "selectedIndex", m.onSelectButton)
  end function

  private function makeAnim(times as integer)
    toValues = [
      [1000, 500],
      [300, 500],
      [1500, 500],
      [1000, 0],
      [0, 0],
      [0, 500]
    ]

    ' Repeat the toValues 50 times
    repeatedToValues = []
    for i = 1 to times
      repeatedToValues.append(toValues)
    end for
    toValues = repeatedToValues

    ' Generate keys for 50 repetitions
    keys = [0.0]
    for i = 1 to times - 1
      keys.push(i / times * 1.0)
    end for
    keys.push(1.0)

    m.moveAnim = new mv.animations.Move(m.rectangle, 60, [0, 500], toValues, 0, keys)
    m.moveAnim.observeKeyFrameFraction()
    m.moveAnim.start()
  end function

  private function createViews()
    m.createViewsFromStyleJson(m.viewJson, m.top)

    redButtonStyle = m.styleManager@.getStyle("mv.Button.default")
    m.setStyleColor(redButtonStyle, "#aa0000", "#ff0000", "#aa0000", "#000000", "#ffffff", "#aaaaaa")

    blueButtonStyle = m.styleManager@.getStyle("mv.Button.default")
    m.setStyleColor(blueButtonStyle, "#0000aa", "#0000ff", "#0000aa", "#000000", "#ffffff", "#0000aa")

    m.controlsGroup = m.createSGNode("mv_ControlsGroup", m.top, "controlsGroup", {
      translation: [200, 200]
      layoutMode: "vert"
      keyDirection: "vert"
      itemSpacings: [10]
    })

    m.button1 = m.createSGNode("mv_Button", m.controlsGroup, "button1", {
      text: `pause`
    })

    m.styleManager@.addStyle("buttons", mc.createPath("blue", blueButtonStyle))

    m.button2 = m.createSGNode("mv_Button", m.controlsGroup, "button1", {
      text: "restart"
    })

    m.button3 = m.createSGNode("mv_Button", m.controlsGroup, "button3", {
      text: "continue"
    })
    m.button4 = m.createSGNode("mv_Button", m.controlsGroup, "button4", {
      text: "anim 2"
    })

    m.button5 = m.createSGNode("mv_Button", m.controlsGroup, "button5", {
      text: "anim 1"
    })
    m.controlsGroup@.updateChildren()
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Private Methods
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private function onTitleChange(value as string)
    m.log.info("the title changed")
    m.button1.text = `spoilers: ${m.title}`
  end function

  private function setStyleColor(buttonStyle as mc.types.assocarray, bgn as string, bgf as string, bgs as string, ln as string, lf as string, ls as string)
    mc.setPath(buttonStyle, "normal.backgroundPoster.blendColor", bgn)
    mc.setPath(buttonStyle, "focused.backgroundPoster.blendColor", bgf)
    mc.setPath(buttonStyle, "selected.backgroundPoster.blendColor", bgs)
    mc.setPath(buttonStyle, "normal.label.color", ln)
    mc.setPath(buttonStyle, "focused.label.color", lf)
    mc.setPath(buttonStyle, "selected.label.color", ls)
    return buttonStyle
  end function

  private function onSelectButton(index as integer)
    m.log.info("selected button", index)
    if index = 0
      m.log.info("PAUSE")
      m.buttonAnim.pause()
    else if index = 1
      m.log.info("RESTART")
      m.buttonAnim.start()
    else if index = 2
      m.log.info("CONTINUE")
      m.buttonAnim.start(true)
    else if index = 3
      m.log.info("CHANGE 2")
      m.buttonAnim.animateTo(m.updatedViewJson2)
      m.buttonAnim.start(true)
    else if index = 4
      m.log.info("CHANGE 1")
      m.buttonAnim.animateTo(m.updatedViewJson)
      m.buttonAnim.start(true)
    end if
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Key Presses
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private function onKeyPressUp() as boolean
    m.log.info("OK UP")
    return false
  end function


  private function onKeyPressLeft() as boolean
    m.log.info("OK LEFT")
    return false
  end function
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Lifecycle
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  protected override function onGainedFocus(isSelfFocused as boolean)
    super.onGainedFocus(isSelfFocused)

    if isSelfFocused
      m.setFocus(m.controlsGroup)
    end if
  end function

end class
