import "pkg:/source/view/BaseScreen.bs"
import "pkg:/source/core/DebugTimer.bs"

namespace debug.screens

  @observersWaitInitialize
  @node("MemoryTestsScreen", "mv_BaseView")
  class MemoryTestsScreen extends mv.BaseScreen

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Public Fields
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Views
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private buttonsGroup as mc.types.node
    private navControllerAddButton as mc.types.node
    private tabControllerAddButton as mc.types.node
    private dynamicContainerAddButton as mc.types.node
    private destroyButton as mc.types.node

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Private Fields
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private views = []

    private tabController as mc.types.node
    private previousTabItem as mc.types.node
    private navController as mc.types.node
    private dynamicContainer as mc.types.node

    private transition as mc.types.node

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Initialization
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function new()
      super("MemoryTestsScreen")
    end function

    protected override function initialize()
      super.initialize()
      m.createViews()
      ' m.addViews()
    end function

    private function createViews()
      bundle = m.styleManager@.loadBundle("pkg:/source/debug-screens/MemoryTestsScreen.json")
      m.createViewsFromStyleJson(bundle.views, m.top)
      m.focusedControl = m.buttonsGroup
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Callbacks
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function onButtonsGroupSelectedIndex(index as integer)
      m.log.info("selected", index)
      button = m.buttonsGroup@.getSelectedButton()
      if m.dynamicContainerAddButton.isSameNode(button)
        m.addScreenToDynamicContainer()
      else if m.navControllerAddButton.isSameNode(button)
        m.addScreenToNavController()
      else if m.tabControllerAddButton.isSameNode(button)
        m.addScreenToTabController()
      else if m.destroyButton.isSameNode(button)
        m.removeViews()
      end if
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Private Methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function addViews()
      timer = new mc.utils.DebugTimer("make cells")
      for i = 0 to 100
        ' m.views.push(m.top.createChild("Group"))
        '   ' m.views.push(m.createSGNode("mv_Poster"))
        '   ' m.views.push(m.createSGNode("mv_Label"))
        '   ' m.views.push(m.createSGNode("mv_Rectangle"))
        '   ' m.views.push(m.createSGNode("mv_Rectangle"))
        ' m.views.push(m.createSGNode("HeroCellEfficient"))
        ' m.views.push(m.createSGNode("HeroCellEfficient"))
        m.views.push(m.top.createChild("HeroCellEfficient"))
      end for
      ' m.global.componentPool@.prebakeComponents(1000, "HeroCellEfficient")
      ' timer.log("made 100 posters")
      ' m.global.componentPool@.prebakeComponents(500, "PosterCellEfficient")
      ' timer.log("made 500 posters cells")
      ' m.global.componentPool@.prebakeComponents(59, "ml_RowHeader")
      ' timer.log("made 59 row headers")
      ' m.global.componentPool@.prebakeComponents(20, "ml_GridRow")
      ' timer.log("made 20 grid rows")
      ' m.global.componentPool@.prebakeComponents(50, "ml_HorizontalRow")
      timer.log("finished")
    end function

    private function removeViews()
      for each view in m.views
        view.getParent().removeChild(view)
      end for
      m.views = []
    end function

    private function addScreenToDynamicContainer()
      m.log.info("add screen to dynamic container")

      view = m.createSgNode("NavControllerTestChildScreen", m.top, `dynamicNavControllerChildScreen`)
      transition = m.createSGNode("mv_FadeTransition", m.top, "fadeTransition", {
        color: "#ffff00"
      })
      m.dynamicContainer.transition = transition
      m.dynamicContainer@.setNextView(view)
    end function

    private function addScreenToNavController()
      m.log.info("add screen to nav controller")
      transition = m.createSGNode("mv_FadeTransition", m.top, "fadeTransition", {
        color: "#ffff00"
      })
      childScreen = m.createSGNode("NavControllerTestChildScreen", invalid, `navControllerChildScreen-${rnd(2323532)}`)
      m.navController.transition = transition
      m.tabController.removeChildren(m.tabController.getChildren(-1, 0))
      m.navController@.push(childScreen)
    end function

    private function addScreenToTabController()
      m.log.info("add screen to tab controller")

      m.previousTabItem = m.createSGNode({
        _type: "ContentNode"
        name: "tab1"
        screenType: "NavControllerTestChildScreen"
      })
      m.tabController@.changeCurrentItem(m.previousTabItem)
      m.setFocus(m.tabController)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Key Presses
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function isCapturingAnyKeyPress(key as string, press as boolean) as boolean
      return key <> "back"
    end function

    protected override function onKeyPressBack() as boolean
      m.log.info("onKeyPressBack")
      return false
    end function

    protected override function onKeyPressLeft() as boolean
      m.log.info("Pop screen from nav controller")
      m.navController@.pop(true)
      return true
    end function

    protected override function onKeyPressRight() as boolean
      m.log.info("on key press right, setting next view to dynamic container")
      view = m.createSgNode("NavControllerTestChildScreen", invalid, `dynamicNavControllerChildScreen2`)
      m.dynamicContainer@.setNextView(view)
      return true
    end function

    protected override function onKeyPressUp() as boolean
      m.log.info("On key press up, adding another tab to tab controller")
      item = m.createSGNode({
        _type: "ContentNode"
        name: "tab2"
        screenType: "NavControllerTestChildScreen"
      })
      m.previousTabItem = m.tabController.currentItem
      m.tabController@.changeCurrentItem(item)
      return true
    end function

    private function onKeyPressDown() as boolean
      m.log.info("On key press down showing tab1 from tab controller")
      m.tabController@.changeCurrentItem(m.previousTabItem)
      m.setFocus(m.buttonsGroup)
      return true
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Lifecycle Methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected override function onFirstShow()
      super.onFirstShow()
    end function

    protected override function onShow()
      m.log.info("onShow")
      super.onShow()
    end function

    protected override function onGainedFocus(isSelfFocused as boolean)
      m.log.info("onGainedFocus")
      super.onGainedFocus(isSelfFocused)
      if isSelfFocused
        m.setFocus(m.buttonsGroup)
      end if
    end function
  end class
end namespace
