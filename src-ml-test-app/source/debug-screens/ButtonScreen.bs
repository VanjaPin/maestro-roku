import "pkg:/source/ml/ListMixin.bs"
import "pkg:/source/view/BaseScreen.bs"
import "pkg:/source/ml/ListDelegateMixin.bs"
import "pkg:/source/core/Utils.bs"

@node("ButtonScreen", "mv_BaseScreen")
class ButtonScreen extends mv.BaseScreen

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Views
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private controlsGroup as mc.types.node
  private fixedLayoutGroup as mc.types.node
  private autoSizeLayoutGroup as mc.types.node
  private button1 as mc.types.node
  private button2 as mc.types.node
  private button3 as mc.types.node
  private button4 as mc.types.node
  private button5 as mc.types.node
  private animButton as mc.types.node
  @sync
  @inject("user", "status")
  private userStatus as boolean

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Private Fields
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private spoilersActive as boolean
  private focusableControls = []

  function new()
    super("ButtonScreen")
  end function


  private timer1 as mc.types.node
  private timer2 as mc.types.node

  protected override function initialize()
    super.initialize()

    bundle = m.styleManager@.loadBundle("pkg:/source/debug-screens/ButtonScreen.bundle")
    m.createViewsFromStyleJson(bundle.views)
    item = {
      json: {
        title: "I SET MY TEXT WITH A DATA MAP"
      }
    }
    m.focusableControls = [m.controlsGroup, m.fixedLayoutGroup, m.autoSizeLayoutGroup]
    m.focusedControl = m.controlsGroup
    m.applyDataMapToControls(item)
    m.toggleTimer1(true)
  end function


  private function toggleTimer1(active as boolean)
    m.cancelWaitTimer(m.timer1)
    m.timer1 = m.waitAFrame(m.doTimer1, 2)
    'somwher this bcomes the same as timer 1
    if m.timer1.isSameNode(m.timer2)
      stop
    end if
  end function


  private function toggleTimer2(active as boolean)
    'trigger from right key press or something
    m.cancelWaitTimer(m.timer2)
    m.timer2 = m.waitAFrame(m.doTimer2, 3)
    ? m.timer2

    'somwher this bcomes the same as timer 2
    if m.timer2.isSameNode(m.timer1)
      stop
    end if
  end function

  private function recreateTimer2()
    ? "triggered by ON KEY PRESS DOWN"
    m.toggleTimer2(true)
  end function

  private function cancelTimer2()
    ? "triggered by ON KEY PRESS LEFT"
    m.toggleTimer2(false)
  end function

  private function startTimer2()
    ?"triggered by ON KEY PRESS UP"
    m.toggleTimer2(false)
  end function

  private function doTimer1()
    m.log.info("timer 1 fired")
    args = { args: { delay: 5, isOK: true } }
    task = m.createTask("WaitTask", args, m.onWaitTask)
    'maybe have to make a task that does anything - like WaitTask - anything
    'but then make anew timer
  end function

  private function doTimer2()
    m.log.info("timer 2 fired")
    ' args = { args: { delay: 3, isOK: true } }
    ' task = m.createTask("WaitTask", args, m.onWaitTask2)
    ' m.toggleTimer2(true)
  end function

  private function onWaitTask(result as mc.types.node)
    ? "FINISHED TASK WAIT"
    m.toggleTimer1(true)
  end function

  private function onWaitTask2(result as mc.types.node)
    ? "FINISHED TASK WAIT2"
    ' m.toggleTimer2(true)
  end function
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Private Methods
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private function onButtonIndexChange(index as integer)
    m.log.info("selected button", index)
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Key Presses
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private function isCapturingAnyKeyPress(key as string, press as boolean) as boolean
    return key <> "back"
  end function

  protected override function onKeyPressLeft() as boolean
    m.cancelTimer2()
    ' m.setFocus(mc.collections.getItemAtOffset(m.focusableControls, m.focusedControl, -1))
    return true
  end function

  protected override function onKeyPressRight() as boolean
    m.setFocus(mc.collections.getItemAtOffset(m.focusableControls, m.focusedControl, 1))
    return true
  end function


  protected override function onKeyPressUp() as boolean
    m.startTimer2()
    return true
  end function

  protected override function onKeyPressDown() as boolean
    m.recreateTimer2()
    return true
  end function
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Lifecycle
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  protected override function onGainedFocus(isSelfFocused as boolean)
    super.onGainedFocus(isSelfFocused)

    if isSelfFocused
      m.setFocus(m.controlsGroup)
    end if
  end function

end class
