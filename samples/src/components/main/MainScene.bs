import "pkg:/source/roku_modules/log/LogMixin.brs"
import "pkg:/source/roku_modules/maestro/core/ioc.brs"
import "pkg:/components/roku_modules/maestro/view/mixin/FocusMixin.brs"

function Init() as void
  createObject("roSGNode", "TrackerTask")
  m.global.addFields({ "isFocusLocked": false })
  configureLogger()
  m.log.info("init")
end function

function configureLogger()
  log.initializeLogManager(["log_PrintTransport"], 2)
  m.log = new log.Logger("MainScene")
  m.log.info("Maestro sample application.")
end function

' /**
'  * @member begin
'  * @memberof module:MainScene
'  * @instance
'  * @description This would be called when all initial data is loaded. The app would show a loading spinner and loading background until this point
'  * @param {paramType} paramDescription
'  * @returns {returnType} returnDescription
'  */
function begin(args = invalid)
  m.log.info("begin")
  initializeIOC()
  setupMaestro()
  ioc.setInstance("appArgs", args)

  m.log.info("starting the bootstrap task to orchestrate our app init/loading tasks")
  ' my apps have a task here that manages the various app initialization activities
  ' m.bootstrapSequence = crateObject("roSGNode", "bootstrapTasks")
  ' m.loadingSequence.observeField("isComplete", "onIsBootstrapTasksComplete")
  ' let's just pretend it did it for now
  onIsBootstrapTasksComplete()
end function

function setupMaestro()
  'note - this will become a framework function to call
  tick = m.top.getScene().createChild("Timer")
  tick.duration = 0.01
  tick.repeat = true
  tick.control = "start"
  setOrAddNodeField(m.global, "tick", tick)
  ioc.setInstance("tick", tick)
end function

function onIsBootstrapTasksComplete()
  m.log.info("boot strap is complete - showing main screen")

  m.top.appController = createObject("roSGNode", "AppController")
  m.global.addFields({ "appController": m.top.appController })
  ioc.setInstance("appController", m.top.appController)
  m.top.removeChild(m.loadingPoster)
  m.top.appendChild(m.top.appController)
  m.top.appController@._initialize()
  view.setFocus(m.top.appController)
end function

function initializeIOC()
  m.log.info("initializing the IOD container")
  'note this is done in the boostrap sequence in my apps
  ioc.createContainer()

  fontManager = createObject("roSGNode", "FontManager")
  ioc.setInstance("fontManager", fontManager)
  setOrAddNodeField(m.global, "fontManager", fontManager)

  styleManager = createObject("roSGNode", "StyleManager")
  ioc.setInstance("styleManager", styleManager)
  setOrAddNodeField(m.global, "fontManager", fontManager)
end function

function signalAppLaunchComplete(args = invalid)
  m.log.info("signalAppLaunchComplete")
  if not m.top.isLaunchCompleteBeaconFired
    m.log.info("Firing AppLaunchComplete signal")
    m.top.isLaunchCompleteBeaconFired = true

    if findMemberFunction(m.top, "signalBeacon") <> invalid
      m.top.signalBeacon("AppLaunchComplete")
    end if
  else
    m.log.info("AppLaunchComplete was already fired. Ignoring")
  end if
end function