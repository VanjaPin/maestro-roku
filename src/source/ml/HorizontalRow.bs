import "pkg:/source/ml/ListMixin.bs"
import "pkg:/source/ml/RowItemScroller.bs"
import "pkg:/source/ml/RowItemViewManager.bs"
import "pkg:/source/ml/ItemFocusManager.bs"
import "pkg:/source/ml/BaseRow.bs"
import "pkg:/source/ml/ComponentInfo.bs"

namespace list
  @node("ml_HorizontalRow", "ml_BaseRow")
  class HorizontalRow extends list.BaseRow

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ additional private state
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    public focusedCellIndex = 0
    public isScrolling = false
    private isScrollingEnabled = false

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ managers and private state
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private viewManager
    private focusManager
    private itemScroller
    private currentHeaderType = invalid
    private settings

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ views
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private backgroundGroup
    private cellsGroup
    private contentGroup
    private foregroundGroup
    private header

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ view tracking
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private componentPool = m.global.componentPool

    function new()
      super()
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ initialization
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected override function createViews()
      m.backgroundGroup = m.createSGNode("Group", m.top, "backgroundGroup")
      m.contentGroup = m.createSGNode("Group", m.top, "contentGroup")
      m.cellsGroup = m.createSGNode("Group", m.contentGroup, "cellsGroup")
      m.foregroundGroup = m.createSGNode("Group", m.top, "foregroundGroup")

      'debug stuff
      ' if m.index = 0
      '   ? "SETTING LIST CONTAINER"
      '   ioc.setInstance("listContainer", m.cellsGroup)
      ' end if
      m.createManagers()
    end function

    private function createManagers()
      m.log.info("createManagers")
      m.viewManager = new list.RowItemViewManager(m.owner, m.top, m.cellsGroup, m.componentPool, 0, m.width)
      m.focusManager = new list.ItemFocusManager(m.viewManager, m.owner.cellEvents, m.index)
      m.itemScroller = new list.RowItemScroller(m.viewManager, m.focusManager)
      m.focusManager.name = "ROW FM "
      m.focusManager.isRow = true
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ overridden
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected override function onRecycle(newContent as types.node)
      m.cleanHeader()
      m.viewManager.setContent(invalid)
      m.itemScroller.reset()
    end function

    protected override function onContentChange(content as types.node, keepOldFocusIfPossible = false as boolean)
      m.log.info("onContentChange")
      m.configureHeader()
      if content = invalid
        m.log.info("row content is set to invalid. resetting")
        m.viewManager.reset()
      else
        ' ? "UPDATING CONTENT"
        m.viewManager.reset()
        m.viewManager.setContent(content)

        m.focusManager.isNotifying = keepOldFocusIfPossible = invalid or keepOldFocusIfPossible = true
        m.itemScroller.reset(keepOldFocusIfPossible)
        m.focusManager.isNotifying = true
      end if
      ' end if
      if m.itemScroller.numberOfComponents = 0 and content.isHidden <> true
        ' ? "force update - no comps left!"
        m.owner@.forceUpdate()
      end if
    end function

    protected override function onContentItemsChange(changes as types.array)
      m.log.info("This content has changed in some way")
      m.viewManager.onContentItemsChange(changes)
    end function

    protected override function onIsRenderedChange()
      if m.viewManager <> invalid
        m.viewManager.updateRenderedComponents(m.itemScroller.direction, m.itemScroller.index)
      end if
    end function

    protected override function onListEvent(event as object)
      if event.name = "willEnter" or event.name = "didEnter" or event.name = "scrollStart" or event.name = "scrollStop" or event.name = "scrollUpdate"
        if m.settings.passRowEventsToChildRenderers
          for each component in m.cellsGroup.getChildren(-1, 0)
            if component.doesExist("listEvent")
              component.listEvent = event
            end if
          end for
        end if
      else
        cell = m.viewManager.getRenderer(m.focusedCellIndex)
        if cell <> invalid
          ' ? "!!!!!!!!! GIVING event " ; event.name ; " to cell"
          ' TODO potentially filter events
          cell.listEvent = event
        end if
      end if
    end function

    public override function jumpToItem(index as integer, animated as boolean)
      if m._content <> invalid and index <> -1
        ' ? " DO A MOVE TO INDEX "; index, animated
        m.itemScroller.moveToIndex(index, animated)
      end if
    end function

    public override function getRenderer(index as integer)
      return m.viewManager.getRenderer(index)
    end function

    public override function getItemSize(index as integer) as types.array
      return m.viewManager.getItemSize(index)
    end function

    public override function getRect(index as integer, useScreenCoords = false as boolean)
      return m.viewManager.getRect(index, useScreenCoords)
    end function

    public override function onFlowFocusFraction(fraction as float)
      m.itemScroller.onFlowFocusFraction(fraction)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ header
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function configureHeader()
      if m._content = invalid
        m.cleanHeader()
      else
        headerSettings = m.settings.headerSettings
        if m.currentHeaderType = invalid or m.currentHeaderType <> headerSettings.compName
          m.cleanHeader()
          m.currentHeaderType = headerSettings.compName
          m.header = m.componentPool@.getComponent(headerSettings.compName, 1)

          if m.header <> invalid
            if headerSettings.position = "onTop"
              m.foregroundGroup.appendChild(m.header)
            else if headerSettings.position = "underneath"
              m.backgroundGroup.appendChild(m.header)
            end if
          end if
        end if

        if m.header <> invalid
          m.header.translation = [- m.settings.contentOffset[0], 0] 'cancel out this row's offset
          m.header.width = m.width
          m.header.height = headerSettings.height
          m.header@.setContent(m._content, headerSettings)
          m.contentGroup.translation = [0, headerSettings.height]
        else
          m.contentGroup.translation = [0, 0]
        end if
      end if
    end function

    private function cleanHeader()
      if m.header <> invalid
        m.log.info("cleaning header")
        m.header@.setContent(invalid)
        m.componentPool@.releaseComponent(m.header)
        m.header = invalid
        m.currentHeaderType = invalid
      end if
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ KeyPress
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function onKeyPressLeft() as boolean
      m.log.verbose("onKeyPressLeft")
      if m.canScroll("left")
        return m.itemScroller.moveFromPress(-1)
      end if
      return false
    end function

    private function onKeyPressRight() as boolean
      m.log.verbose("onKeyPressRight")
      if m.canScroll("right")
        return m.itemScroller.moveFromPress(1)
      end if
      return false
    end function

    private function getLongPressIntervalForKey(key as string) as float
      m.log.verbose("getLongPressIntervalForKey", key)
      if m.canScroll(key)
        return 0.2
      else
        return 0
      end if
    end function

    private function canScroll(key as string)
      ' ? ">>> canScroll"
      ' ? "m.isScrollingEnabled" ; m.isScrollingEnabled
      ' ? "I " ; m.itemScroller.index
      ' ? "key" ; key
      return (m.isScrollingEnabled and m._content <> invalid and m._content.getChildCount() > 0) and ((key = "left" and m.itemScroller.index > 0) or (key = "right" and m.itemScroller.index < m._content.getChildCount() - 1))
    end function

    private function onLongPressStart(key as string) as boolean
      ? " ONPS"
      m.log.verbose(">>>>onLongPressStart", key)

      if m.canScroll(key)
        m.log.verbose("long press started on key", key, "going to animate to final scroll position")
        if key = "left"
          m.itemScroller.moveToEnd(-1)
        else
          m.itemScroller.moveToEnd(1)
        end if

        return true
      end if

      return false
    end function

    private function onLongPressFinish(key as string) as boolean
      ? " ONPF"
      if key = "left" or key = "right"
        m.log.verbose("long press finished on key", key)
        m.itemScroller.cancelScrolling()
        return true
      end if

      return false
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Delegate
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected function onWillLoseFocus(direction as integer)
      m.log.verbose("This row will lose focus - cancelling scrolling")
      ' ? "WILL LOSE FOCUS "; m.top.id
      m.itemScroller.cancelScrolling()
      m.toggleLongPressTimer(0)
      m.isScrollingEnabled = false
    end function

    protected function onWillGainFocus(direction as integer)
      m.log.verbose("This row will gain focus - enabling scrolling")
      ' ? "WILL GAIN FOCUS "; m.top.id
      m.isScrollingEnabled = true
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Life Cycle
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected override function onGainedFocus(isSelfFocused as boolean)
      super.onGainedFocus(isSelfFocused)
      if isSelfFocused
        m.isScrollingEnabled = true
      end if
    end function

  end class
end namespace