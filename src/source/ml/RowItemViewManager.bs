import "pkg:/source/ml/ItemViewManager.bs"

namespace ml
  class RowItemViewManager extends ml.ItemViewManager
    public row = invalid
    public lastRowIsRendered = "none"
    public isFlowSupported = false

    function new(list as mc.types.node, row as mc.types.node, container as mc.types.node, componentPool as mc.types.node, minPos as integer, maxPos as integer)
      super("RowItemViewManager", list, container, componentPool, 0, minPos, maxPos)
      m.row = row
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ overridden
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    public override function reset()
      m.log.info("releasing", m.renderersByContentId.count(), "row children")
      for each id in m.renderersByContentId
        m.componentPool@.releaseComponent(m.renderersByContentId[id])
      end for
      m.renderersByContentId = {}
      super.reset()
    end function


    override function createRenderers(content as mc.types.node, forceSync = false as boolean) as boolean
      ' ? "::: CREATE RENDERERS" ; m.renderersByContentId
      'renderers are created as needed
      m.previousRendereredByContentId = m.renderersByContentId
      m.rendereredCellInfosByIndex = {}
      m.renderersByContentId = {}
      return true
    end function

    override function updateLayout(fullUpdate = false as boolean) as void
      ' ? " U A"
      m.log.info("ROW updateLayout")
      m.rects = []
      m.visibleItems = []
      m.cellInfos = []

      m.rowInfos = invalid
      if m.content = invalid
        return
      end if

      index = 0
      ' m.contentGroup.translation = [0, 0]
      focusSettings = m.settings.focusSettings
      x = 0
      for each item in m.content@.getChildren(-1, 0)
        ' ? " U B"
        ' ? ">>>> laying out ", item.title, index
        settings = ml.listMixin.getCellSettings(m.owner.content, m.content, item)
        xSpace = settings.space

        m.rects.push({
          translation: [x, 0]
          size: settings.size
          index: index
          rowIndex: m.row.index
          visible: true
        })
        maxPos = m.maxPos - settings.size[0] - xSpace

        positions = [
          new ml.CellPosition(x, 0) 'normal
          new ml.CellPosition(x, maxPos) 'float-scroll
        ]

        cellInfo = new ml.CellInfo(settings.size, focusSettings, positions, focusSettings.horizAnimStyle = "floating", index, index)
        cellInfo.index = index
        cellInfo.id = item.id
        m.cellInfos.push(cellInfo)

        'TODO - for now, no vis options for rows children..
        m.visibleItems.push(item)

        x += settings.size[m.axes] + xSpace
        index++
      end for

      m.numberOfItems = m.visibleItems.count()
      ' ? " U C NUM ITEMS NOW "; m.numberOfItems
    end function

    protected override function onContentItemsChange(changes as mc.types.array)
      m.log.info("updating row renderers due to contents change")
      oldNumComponents = m.numberOfItems
      previousInfo = ml.CellInfoUtils.cellInfoFromAA(m.itemScroller.cellInfo)
      m.processRemovedCells(changes)
      m.forceUpdateLayout()

      result = {
        isLayoutRequired: false
        isFocusChangeRequired: false
      }

      if m.itemScroller.index >= m.content.length
        m.itemScroller.index = mc.clamp(m.itemScroller.index, 0, m.content.length - 1)
      end if

      ' m.itemScroller.processChanges(changes)
      m.rowInfos = invalid

      if (m.numberOfItems = 0 and oldNumComponents > 0) or (oldNumComponents = 0 and m.numberOfItems > 0)
        'tell list in any case - it's best suited to knowing what should happen now.
        ' m.owner@.forceUpdate()
        result.isLayoutRequired = true
      else
        m.itemScroller.notifyViewportEvents(m.itemScroller.direction, true)
      end if

      nextIndex = m.getIndexAfterItemUpdate(previousInfo)
      result.isFocusChangeRequired = nextIndex <> previousInfo.index
      m.itemScroller.moveToIndex(nextIndex, false)

      return result
    end function

  end class
end namespace
