import "pkg:/source/ml/ItemScroller.bs"
import "pkg:/source/ml/RowItemViewManager.bs"
import "pkg:/source/ml/ItemFocusManager.bs"

namespace list
  class RowItemScroller extends list.ItemScroller

    function new(viewManager as list.RowItemViewManager, focusManager as list.ItemFocusManager)
      super("RowItemScroller", viewManager, focusManager)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ overridden
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    override function getFocusSettings()
      return list.listMixin.getFocusSettings(m.viewManager.owner.content, m.viewManager.content)
    end function

    protected override function getCellComponentInfo(componentInfo as list.ComponentInfo, isFromListScroll = false as boolean) as list.ComponentInfo
      if isFromListScroll
        return m.viewManager.cellInfos[m.index]
      else
        if componentInfo = invalid
          return invalid
        end if
        return m.viewManager.cellInfos[componentInfo.index]
      end if
    end function

    protected override function getFocusIndicatorTranslation(info as list.ComponentInfo, componentInfo as list.ComponentInfo, direction as integer, isFloatingFocus as boolean) as object
      if info = invalid
        return [0, 0]
      end if

      screenPos = info.getScreenPosition(direction)

      contentOffset = m.viewManager.settings.contentOffset
      headerOffset = m.viewManager.settings.headerSettings.height

      ' ? "GFC " ; m.__classname ; " HO "; headerOffset ; formatJson(contentOffset); " SP " ;screenPos ; "iFF "; isFloatingFocus

      translation = [screenPos, 0]

      translation[1] += headerOffset

      translation[1] += m.viewManager.settings.screenPos

      if isFloatingFocus
        cell = m.viewManager.getRenderer(info.contentIndex)
        'bs:disable-next-line
        bounds = cell.sceneBoundingRect()
        translation = [bounds.x, bounds.y]
      end if

      if m.settings.horizAnimStyle = "fixed"
        translation[m.axes] = contentOffset[m.axes]
      end if

      return translation
    end function

  end class
end namespace