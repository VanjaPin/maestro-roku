import "pkg:/source/ml/ListItemScroller.bs"
import "pkg:/source/ml/ListItemViewManager.bs"
import "pkg:/source/ml/ItemFocusManager.bs"
import "pkg:/source/core/Tasks.bs"
import "pkg:/source/ml/ListMixin.bs"
import "pkg:/source/view/BaseView.bs"
import "pkg:/source/view/Animation.bs"
import "pkg:/source/ml/FocusIndicatorConfig.bs"

namespace list
  @node("ml_List", "BaseView")
  class List extends view.BaseView

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ content
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    'must gbe of type ListContent
    @observer("onContentChange")
    public content as types.Node
    private _content

    public state = "none"

    public width = 1920
    public height = 1080
    public isHidden = false

    @alwaysnotify
    @observer("onJumpToRowIndexChange")
    public jumpToRowIndex = -1

    @alwaysnotify
    @observer("onJumpToRowItemIndexChange")
    public jumpToRowItemIndex = -1

    @alwaysnotify
    @observer("onAnimateToRowIndexChange")
    public animateToRowIndex = -1

    @alwaysnotify
    @observer("onAnimateToItemIndexChange")
    public animateToItemIndex = -1

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ state
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    public isScrolling = false
    public screenOffset = 0

    public scrollDirection = 0

    public focusedRowIndex = 0
    public focusedSubRowIndex = 0

    public focusedCellIndex = 0

    public focusedfraction = 0.0

    @alwaysnotify
    public itemSelected as types.array

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Shared managers
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    public focusIndicatorManager as types.node

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ internal event tracking
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    public nextFocusIndex as types.Array

    public cellEvents as types.Node
    public rowEvents as types.Node
    public screenPos = 0
    public nextScreenPos = 0

    @alwaysnotify
    public listEvent as types.Assocarray

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ managers and internal state
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private viewManager as list.ListItemViewManager
    private itemScroller as list.ListItemScroller
    private sourceFocusRect as object
    private targetFocusRect as object
    private isInitialized = false

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ views
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private contentGroup as types.node
    private rowsGroup as types.node

    function new()
      super("ml_List")
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ initialization
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected override function initialize()
      super.initialize()
      m.createViews()
      m.initManagers()
      m.isInitialized = true
      m.onContentChange()
    end function

    private function createViews()
      'TODO - might still end up needing this... depends on how floating focus lands
      m.contentGroup = m.createSGNode("Group", m.top, "contentGroup")
      m.rowsGroup = m.createSGNode("Group", m.contentGroup, "rowsGroup")
      m.focusIndicatorManager = m.createSGNode("ml_FocusIndicatorManager", m.top, "focusIndicator", {
        list: m.top
      })

    end function

    private function initManagers()
      m.cellEvents = m.createEventsBroker("cells")
      m.rowEvents = m.createEventsBroker("rows")
      m.rowsGroup = m.top.findNode("rowsGroup")

      m.viewManager = new list.ListItemViewManager(m.top, m.rowsGroup, 0, m.height, m.global.componentPool)

      focusManager = new list.ItemFocusManager(m.viewManager, m.rowEvents)
      m.itemScroller = new list.ListItemScroller(m.viewManager, focusManager)
      m.itemScroller.offsetContainer = m.contentGroup
      m.content = invalid
    end function

    private function createEventsBroker(id as string)
      node = createObject("roSGNode", "Node")
      node.id = id
      node.addFields({ "listEvent": {}, "viewportEvents": [] })
      return node
    end function

    private function resetState()
      m.log.info("resetState")

      if m._content <> invalid
        m.log.info("new content is present")
        m.applyListSettings(m._content.listSettings)
        m.viewManager.setContent(m._content)
        m.top.clippingrect = [0, 0, m.width, m.height]
      else
        m.log.info("content is being set to invalid - resetting view manager")
        m.viewManager.reset()
      end if
      m.focusIndicatorManager.isHidden = m.top.isFocused or m.top.isChildFocused
    end function

    private function applyListSettings(settings as types.node)
      if settings <> invalid
        m.viewManager.lookAheadDistance = settings.lookAheadDistance = -1 ? 2147483647 : settings.lookAheadDistance
        m.viewManager.lookBehindDistance = settings.lookBehindDistance = -1 ? 2147483647 : settings.lookBehindDistance
      end if
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ callbacks
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function onContentChange()
      m.log.info("onContentChange")
      if m.isInitialized
        if m._content <> invalid and not m._content.isSameNode(m.content)
          m.unobserveNodeField(m._content, "changes", m.onContentItemsChange)
        end if
        if m._content = invalid or not m._content.isSameNode(m.content)
          m._content = m.content
          if m._content <> invalid
            m.observeNodeField(m._content, "changes", m.onContentItemsChange)
          end if
          m.resetState()
        else
          ' m.log.info("current content has changed in some untracked way!")
          'TODO check case where the content items Array changes entirely
        end if
      end if
    end function

    private function onContentItemsChange(changes as types.array)
      m.log.info("The content items have changed")
      m.focusIndicatorManager@.cancelFlowFocus()
      m.viewManager.onContentItemsChange(changes)
      m.focusIndicatorManager@.cancelFlowFocus()
      m.viewManager.isScrolling = false
      ' m.viewManager.forceUpdateLayout()
      ' m.viewManager.updateRenderedComponents(m.itemScroller.direction, m.itemScroller.index, true)

      'TODO - need to ensure that the current focus and scroll position is valid after an update!
      ' m.itemScroller.move(0)
      ' m.viewManager.onContentItemsChange(changes)
    end function

    private function onAnimateToRowIndexChange(index as integer)
      if m.content <> invalid and index <> -1 'and index <> m.focusedRowIndex
        m.itemScroller.moveToContentIndex(index)
      end if
    end function

    private function onJumpToRowIndexChange(index as integer)
      if m.content <> invalid and index <> -1 'and index <> m.focusedRowIndex
        'hack here
        m.focusedRowIndex = index
        m.moveToRow(index, false)
      end if
    end function

    private function onAnimateToSubRowIndexChange(index as integer)
      if m.content <> invalid and index <> -1 'and index <> m.focusedRowIndex
        m.itemScroller.moveToIndex(index, true, false)
        ' m.itemScroller.forceFocusOnIndex(m.focusedRowIndex, true)
      end if
    end function

    private function onJumpToRowItemIndexChange(index as integer)
      if m.content <> invalid and index <> -1
        m.moveToRowItem(m.focusedRowIndex, index, false)
      end if
    end function

    private function onAnimateToItemIndexChange(index as integer)
      if m.content <> invalid and index <> -1
        m.moveToRowItem(m.focusedRowIndex, index, true)
      end if
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Public Methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    public function forceUpdate() as void
      ' ? "+>+>+>+> list forceUpdate"
      ' componentInfo = m.itemScroller.getComponentInfoForContentIndex(m.focusedRowIndex)
      if m.top.state = "rendering"
        ? "cannot forceUpdate list while rendering is taking place"
        return
      end if

      ' ? m.focusedRowIndex ; " " m.focusedCellIndex
      ' ? " NC " ; m.itemScroller.numberOfComponents ; " I " ; m.itemScroller.index
      m.viewManager.forceUpdateLayout()
      m.viewManager.updateRenderedComponents(m.itemScroller.direction, m.itemScroller.index, true)
      m.itemScroller.getComponentInfos(true)

      ' ? " NC " ; m.itemScroller.numberOfComponents ; " I " ; m.itemScroller.index
      if m.itemScroller.numberOfComponents > 0
        ' ? "LIST HAS COMPONENTS"
        ' if m.itemScroller.index >= m.itemScroller.numberOfComponents
        '   index = clamp(m.itemScroller.index, 0, m.itemScroller.numberOfComponents - 1)
        '   if index >= 0
        '     ? "CORRECTING INDEX"; index
        '     m.moveToRowItem(m.focusedRowIndex, m.focusedCellIndex, false)
        '   end if
        ' else
        '   ? "MOVING TO ROW "; m.itemScroller.index
        '   m.moveToRow(m.itemScroller.index, false)
        '   ' m.focusIndicatorManager@.setFocusComplete()
        ' end if
      else
        ? "LIST HAS NO COMPONENTS "
        'TODO - hide focus
      end if

      ' ? "FORCE UPDATE " ; m.focusedRowIndex ; " CELL " ; m.focusedCellIndex
      m.moveToRowItem(m.focusedRowIndex, m.focusedCellIndex, false)
    end function

    public function getRow(index as integer) as dynamic
      return m.content.getChild(index)
    end function

    public function getItem(rowIndex as integer, index as integer) as dynamic
      rowItem = m.content.getChild(rowIndex)
      if rowItem <> invalid
        return rowItem.getChild(index)
      end if
      return invalid
    end function

    public function moveToRow(index as integer, animated as boolean)
      if m.content <> invalid
        m.itemScroller.moveToContentIndex(index, animated, false)
        ' m.itemScroller.forceFocusOnIndex(index, true)
      end if
    end function

    public function moveToRowItem(rowIndex as integer, index as integer, animated as boolean) as void
      ' ? " MOVE TO ROW ITEM" ; rowIndex ; " " ; index
      if m._content <> invalid and rowIndex <> -1 and index <> -1
        row = m.getRowRenderer(rowIndex)
        if row <> invalid
          if row.subType() = "ml_GridRow"
            rowInfo = m.itemScroller.getComponentInfoForContentIndex(rowIndex)
            if rowInfo <> invalid
              ' ? " ROW INFO INDEX " ; rowInfo.index
              m.moveToSubRowIndex(rowInfo.index + index)
            end if
          end if
          row@.jumpToItem(index, animated)
          row@.focusOnContentsNow()
        end if
      end if
    end function

    public function moveToItem(indices as types.array, animated = false as boolean)
      if m.content <> invalid
        m.moveToRow(indices[0], animated)
        row = m.getRowRenderer(indices[0])
        if row <> invalid
          m.moveToRowItem(indices[0], indices[1], animated)
          ' m.focusIndicatorManager.focusedCellIndex = indices[1]
          ' m.focusIndicatorManager@.setNextIndex(indices, 0)
        end if
      end if
    end function

    public function moveToSubRowIndex(index as integer)
      if m.content <> invalid and index <> -1 'and index <> m.focusedRowIndex
        m.itemScroller.moveToIndex(index, false, false)
        ' ? " MOVING TO SUB ROW INDEX " ; index
        compInfo = m.itemScroller.componentInfos[index]
        if compInfo <> invalid
          compInfo.component.focusedCellIndex = index
          m.focusedCellIndex = compInfo.component.focusedCellIndex
        end if
        ' m.itemScroller.forceFocusOnIndex(m.focusedRowIndex, true)
        ' ? "DONE"
      end if
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Renderer Helpers
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    public function getRowRenderer(index as integer)
      return m.viewManager.getRenderer(index)
    end function

    public function getCellRenderer(rowIndex as integer, cellIndex as integer)
      row = m.getRowRenderer(rowIndex)

      if row <> invalid
        return row@.getRenderer(cellIndex)
      end if

      return invalid
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Internal api
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    public function _onContentItemChange(changes as types.array)
      ' ? "______________________________ _onContentItemChange" ; m.__classname
      ' ? "GOT CHANGES" ; formatJson(collections.map(changes, function(c as types.assocarray)
      '   return c.type
      ' end function))
      m.viewManager.forceUpdateLayout()
      m.viewManager.updateRenderedComponents(m.itemScroller.direction, m.itemScroller.index, true)
      m.itemScroller.getComponentInfos(true)
      m.viewManager.updateRenderedComponents(m.itemScroller.direction, m.itemScroller.index, true)

      'TODO - need to ensure that the current focus and scroll position is valid after an update!
      m.itemScroller.processChanges(changes)
      ' ? "OCIC: INDEX " ; m.itemScroller.index ; "RI"; m.focusedRowIndex
      ' m.moveToRow(m.itemScroller.index, false)
      ' ? " contents changed - moving to row " ; m.focusedRowIndex ; " " ; m.focusedCellIndex
      m.moveToRowItem(m.focusedRowIndex, m.focusedCellIndex, false)

      if m.top.isChildFocused or m.top.isFocused
        m.focusOnCurrentRow()
      end if
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Focus indicator callbacks
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    public function onFlowFocusFraction(fraction as float)
      m.itemScroller.onFlowFocusFraction(fraction)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ KeyPress
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function onKeyPressUp() as boolean
      if not m.top.visible
        return false
      end if
      m.log.verbose("onKeyPressUp")

      'FIXME - add ability to change of direction, mid-animation
      isScrolling = m.viewManager.isScrolling or m.focusIndicatorManager.isDoingFlowFocus
      if isScrolling
        m.log.info("was already scrolling - ignoring")
        ? " CANNOT SCROLL is already scrolling "; m.viewManager.isScrolling ; " FF " ; m.focusIndicatorManager.isDoingFlowFocus
        'TODO - improve this
        return true
      end if

      if m.itemScroller.canMoveInDirection(-1)
        res = m.itemScroller.moveFromPress(-1, false)
        return res
      else
        return false
      end if
    end function

    private function onKeyPressOk() as boolean
      if not m.top.visible
        return false
      end if
      'FIXME - add ability to change of direction, mid-animation
      isScrolling = m.viewManager.isScrolling or m.focusIndicatorManager.isDoingFlowFocus or m.isScrolling
      if isScrolling
        m.log.info("Cannot select while scrolling")
        ' ? " CANNOT select while view is scrolling "; m.viewManager.isScrolling ; " FF " ; m.focusIndicatorManager.isDoingFlowFocus
        'TODO - improve this
        return true
      end if

      m.log.verbose("onKeyPressOk")
      m.itemSelected = [m.focusedRowIndex, m.focusedCellIndex]
      m.listEvent = {
        name: "itemSelected"
        index: m.focusedRowIndex
        cellIndex: m.focusedCellIndex
      }

      return true
    end function

    private function onKeyPressDown() as boolean
      if not m.top.visible
        return false
      end if
      m.log.verbose("onKeyPressDown")

      'FIXME - add ability to change of direction, mid-animation
      isScrolling = m.viewManager.isScrolling or m.focusIndicatorManager.isDoingFlowFocus
      ' if m.itemScroller.direction = 1 and isScrolling
      if false and isScrolling
        ? " CANNOT SCROLL is already scrolling "; m.viewManager.isScrolling ; " FF " ; m.focusIndicatorManager.isDoingFlowFocus
        m.log.info("was already scrolling - ignoring")
        return true
      end if

      if m.itemScroller.canMoveInDirection(1)
        ' if false and isScrolling
        '   m.itemScroller.cancelScrollingDuringPress()
        ' end if

        return not m.itemScroller.moveFromPress(1, false)
      else
        return false
      end if
    end function

    private function getLongPressIntervalForKey(key as string) as float
      if not m.top.visible
        return 0
      end if
      m.log.verbose("getLongPressIntervalForKey", key)
      if (key = "up" and m.itemScroller.canMoveInDirection(-1)) or (key = "down" and m.itemScroller.canMoveInDirection(1))
        return 0.2
      else
        return 0
      end if
    end function

    private function onLongPressStart(key as string) as boolean
      m.log.info(">>>>onLongPressStart", key)

      ? " ON LONG PRESS START  - LIST" ; key
      if (key = "up" and m.itemScroller.canMoveInDirection(-1)) or (key = "down" and m.itemScroller.canMoveInDirection(1))
        if key = "up"
          m.log.verbose("long press started on key", key, "going to animate to start of list")
          return m.itemScroller.moveToEnd(-1)
        else
          m.log.verbose("long press started on key", key, "going to animate to end of list")
          return m.itemScroller.moveToEnd(1)
        end if
      end if

      return false
    end function

    private function onLongPressFinish(key as string) as boolean
      ? " ON LONG PRESS FINISH - LIST "; key
      if key = "up" or key = "down"
        m.log.verbose("long press finished on key", key, "going to animate to final scroll position")
        m.itemScroller.cancelScrolling()
        return true
      end if

      return false
    end function

    private function focusOnCurrentRow()
      ' m.focusIndicatorManager.isHidden = m.rowHasIndicator and m.activeFocusSettings <> invalid and m.activeFocusSettings.feedbackStyle <> "none"
      '      ? " ON GAINED FOCUS "
      row = m.getRowRenderer(m.focusedRowIndex)
      if row <> invalid
        '  ? " SETTING FOCUS ONTO ROW "
        view.setFocus(row)
      end if

    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ lifecycle
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    protected override function onGainedFocus(isSelfFocused as boolean)
      super.onGainedFocus(isSelfFocused)
      m.focusIndicatorManager.isHidden = false
      if isSelfFocused
        m.focusOnCurrentRow()
      end if
    end function

    protected override function onLostFocus()
      super.onLostFocus()
      ' ? " LIST LOST FOCUS"
      'bs:disable-next-line
      if not m.top.isChildFocused
        m.focusIndicatorManager.isHidden = true
      end if
    end function

    protected override function onChildLostFocus()
      'bs:disable-next-line
      if not m.top.isChildFocused
        m.focusIndicatorManager.isHidden = true
      end if
    end function

    protected function onChildGainedFocus()
      'bs:disable-next-line
      if not m.top.isChildFocused
        m.focusIndicatorManager.isHidden = true
      end if
    end function
  end class
end namespace