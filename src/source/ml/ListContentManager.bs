import "pkg:/source/ml/CommonListApi.bs"
import "pkg:/source/core/BaseClass.bs"
import "pkg:/source/ml/ListItemViewManager.bs"
import "pkg:/source/ml/ListItemScroller.bs"
import "pkg:/source/ml/List.bs"

namespace ml
  interface RowContentInfo
    row as mc.types.node
    version as integer
    isHidden as boolean
    isFocusEnabled as boolean
  end interface

  class ListContentManager extends mc.BaseClass
    public content as mc.types.node

    private list as ml.List
    private isUpdateEnabled = true

    private viewManager as ml.ListItemViewManager
    private itemScroller as ml.ListItemScroller
    private focusIndicatorManager as mc.types.node
    private rowContentInfoByContentId = {}
    private previousFocusedRowInfo as ml.CellInfo
    private previousFocusedCellInfo as ml.CellInfo

    function new(list as ml.List, viewManager as ml.ListItemViewManager, itemScroller as ml.ListItemScroller, focusIndicatorManager as mc.types.node)
      super("ListContentManager")
      m.list = list
      m.viewManager = viewManager
      viewManager.contentManager = m
      m.itemScroller = itemScroller
      m.focusIndicatorManager = focusIndicatorManager
    end function

    public function setContent(content as mc.types.node) as void

      if content = invalid
        m.log.info("listContent set to invalid. Resetting list")
        content = ml.listMixin.createListContent()
        content.id = "invalidContent"
        m.content = content
        m.list.top.content = content
        m.list.cleanup()
        return
      end if

      previousContent = m.content

      m.content = content
      m.list.top.content = content

      if previousContent = invalid or not previousContent.isSameNode(content)
        m.log.info("Setting new content on list")

        'TODO - observe something here
        m.list.resetState()
        m.updateListFocus()
      else if content <> invalid
        m.log.info("current content has changed in some untracked way!")
        m.synchronizeContent(true)
      else
        m.log.warn("unknown content change")
      end if
    end function

    function setUpdatesEnabled(enabled as boolean)
      m.isUpdateEnabled = enabled
    end function

    function synchronizeContent(notifyRows = true as boolean) as void
      if m.content = invalid
        m.log.verbose(" no content")
        return
      end if
      m.focusIndicatorManager@.setDelegateCallbacksEnabled(false)
      listResult = {
        isLayoutRequired: false
        isFocusChangeRequired: false
      }

      m.log.resetIndent()

      m.log.verbose(" SYNC content")
      'm.log.increaseIndent("synchronizeContent")

      m.previousFocusedRowInfo = m.itemScroller.cellInfo
      if m.previousFocusedRowInfo <> invalid and m.previousFocusedRowInfo.component <> invalid
        m.previousFocusedCellInfo = m.previousFocusedRowInfo.component@.getFocusedCellInfo()
      end if

      for each rowContent in m.content@.getChildren()
        info = m.rowContentInfoByContentId[rowContent.id]
        if info <> invalid
          m.updateContentOnRow(info.row, rowContent, notifyRows, listResult)
        else
          m.log.verbose(" THERE SHOULD HAVE BEEN A ROW SET FOR ", rowContent.id)
        end if
      end for

      'm.log.increaseIndent("list changes are")
      mc.collections.forEach(m.content.changes, function(item as object): m.log.verbose(item): end function)
      'm.log.decreaseIndent()

      if m.content.changes.count() > 0
        'm.log.increaseIndent("listHasChanges")
        m.log.verbose("LIST CONTENT IS CHANGED ")
        m.onListContentItemsChange(m.content.changes)
        listResult.isFocusChangeRequired = true
        'm.log.decreaseIndent()
      end if

      m.updateListContentIfRequired(listResult)

      m.updateListFocus()

      'm.log.decreaseIndent()
      m.log.resetIndent()
    end function

    private function updateListFocus()
      m.log.verbose(" list has to update focus after this change")
      m.log.info("restoring focus to", m.previousFocusedRowInfo, m.previousFocusedCellInfo)

      rowIndex = 0
      cellIndex = 0
      newRowInfo = invalid
      'm.log.increaseIndent("updateListFocus")

      if m.previousFocusedRowInfo <> invalid
        rowIndex = m.viewManager.getIndexAfterItemUpdate(m.previousFocusedRowInfo)
        newRowInfo = m.viewManager.getCellInfoForContentIndex(rowIndex)
        if newRowInfo <> invalid
          row = newRowInfo.component
          rowIndex = newRowInfo.contentIndex
          if m.previousFocusedRowInfo.id <> newRowInfo.id
            m.log.verbose("the contents are different at this index")
            'TODO - might need to choose this more logically
            cellIndex = 0
          else
            cellIndex = row@.getIndexAfterItemUpdate(m.previousFocusedCellInfo)
          end if
          m.log.info("after changes, the new cellIndex is", cellIndex)
        end if
      end if

      m.log.info("after updating, restoring focus to ", rowIndex, cellIndex)

      if rowIndex < 0
        rowIndex = 0
      end if

      if cellIndex < 0
        cellIndex = 0
      end if

      'm.log.increaseIndent("RESET")
      m.focusIndicatorManager@.reset()
      'm.log.decreaseIndent()

      m.focusOnItem(rowIndex, cellIndex)

      'm.log.decreaseIndent()
    end function

    private function focusOnItem(rowIndex as integer, cellIndex as integer)
      m.log.verbose("focusing on item", rowIndex, cellIndex)

      m.focusIndicatorManager@.setDelegateCallbacksEnabled(false)

      'm.log.increaseIndent("MOVE")
      'TODO Improve the efficiency of this.. this is really not ideal
      m.itemScroller.viewPortEventNotifier.isAllRendered = false
      m.list.moveToRowItemIndex(rowIndex, cellIndex, false)
      'm.log.decreaseIndent()

      'm.log.increaseIndent("COMPLETE")
      m.itemScroller.setFocusManagerInfo(m.itemScroller.cellInfo, m.itemScroller.nextCellInfo, m.itemScroller.direction, false)
      m.focusIndicatorManager@.completeFocusNow(true)
      m.focusIndicatorManager@.setDelegateCallbacksEnabled(true)
      'm.log.decreaseIndent()

      if m.list.top.isChildFocused or m.list.top.isFocused
        m.focusIndicatorManager@.setFocusedOnRow(true)
      end if
    end function

    private function updateContentOnRow(row as mc.types.node, content as mc.types.node, notifyRow = false as boolean, result = invalid as ml.ListChangeResult) as void
      if row = invalid
        m.log.verbose("applyRowContentUpdate cannot set content on invalid row")
        return
      end if

      isChanged = m.updateRowContentInfo(row, content, result)
      m.log.verbose("applyRowContentUpdate isChanged:", isChanged)
      if isChanged
        if notifyRow
          m.log.verbose("notifying row")
          m.applyRowContentUpdate(row, content, result)
        else
          m.log.verbose("not notifying row", isChanged, notifyRow)
        end if

        'we have to reset the viewPortEventNotifier to ensure that the row is re-rendered, in case of "all" strategy
        m.itemScroller.viewPortEventNotifier.isAllRendered = false
      end if
    end function

    public function setContentOnRow(row as mc.types.node, content as mc.types.node, isRecycled = false as boolean, result = invalid as ml.ListChangeResult) as void
      if row = invalid
        m.log.verbose("setContentOnRow cannot set content on invalid row")
        return
      end if

      isChanged = m.updateRowContentInfo(row, content, result)

      m.log.info("setContentOnRow isChanged:", isChanged)

      if isRecycled
        row@.recycle(content)
      end if

      m.applyRowContentChange(row, content, result)

      if isChanged
        'we have to reset the viewPortEventNotifier to ensure that the row is re-rendered, in case of "all" strategy
        m.itemScroller.viewPortEventNotifier.isAllRendered = false
      end if
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Row Methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function applyRowContentChange(row as mc.types.node, content as mc.types.node, result as ml.ListChangeResult)
      rowResult = row@.setContent(content)

      if result <> invalid
        if not result.isLayoutRequired and rowResult.isLayoutRequired
          result.isLayoutRequired = true
        end if
        if not result.isFocusChangeRequired and rowResult.isFocusChangeRequired
          result.isFocusChangeRequired = true
        end if
      end if
    end function

    private function applyRowContentUpdate(row as mc.types.node, content as mc.types.node, result as ml.ListChangeResult)
      rowResult = row@.onContentItemsChange(content)

      if result <> invalid
        if not result.isLayoutRequired and rowResult.isLayoutRequired
          result.isLayoutRequired = true
        end if
        if not result.isFocusChangeRequired and rowResult.isFocusChangeRequired
          result.isFocusChangeRequired = true
        end if
      end if
    end function

    private function updateRowContentInfo(row as mc.types.node, content as mc.types.node, result as ml.ListChangeResult) as boolean
      m.log.verbose("updateRowContentInfo")

      if row = invalid
        m.log.verbose(" updateRowContentInfo cannot set content on invalid row")
        return false
      end if

      isChanged = false
      oldRowContentInfo = m.getRowContentInfoForRow(row)
      m.removeRowContentInfo(oldRowContentInfo)
      newRowContentInfo = m.getNewRowContentInfo(row, content)

      isChanged = m.processRowContentChanges(oldRowContentInfo, newRowContentInfo, result)
      return isChanged
    end function

    private function getRowContentInfoForRow(row as mc.types.node) as ml.RowContentInfo
      content = row.content
      if content <> invalid
        return m.rowContentInfoByContentId[content.id]
      end if
      return invalid
    end function

    private function removeRowContentInfo(rowContentInfo as ml.RowContentInfo)
      if rowContentInfo <> invalid
        m.rowContentInfoByContentId.delete(rowContentInfo.id)
      end if
    end function

    private function getNewRowContentInfo(row as mc.types.node, content as mc.types.node) as ml.RowContentInfo
      if content <> invalid
        ' store pertinent info about the content a given row
        newRowContentInfo = {
          id: content.id
          version: content.version
          isHidden: content.isHidden
          isFocusEnabled: content.isFocusEnabled
          row: row
        }

        m.rowContentInfoByContentId[content.id] = newRowContentInfo
        return newRowContentInfo
      end if
      return invalid
    end function

    private function processRowContentChanges(oldRowContentInfo as ml.ListRowContentInfo, newRowContentInfo as ml.ListRowContentInfo, result as ml.ListChangeResult) as boolean
      isChanged = false
      if oldRowContentInfo <> invalid and newRowContentInfo = invalid
        m.log.verbose("updateRowContentInfo - removing old content")

        isChanged = true
        if result <> invalid
          result.isLayoutRequired = true
        end if
      else if oldRowContentInfo = invalid and newRowContentInfo <> invalid
        m.log.verbose("updateRowContentInfo - adding new content")

        isChanged = true
        if result <> invalid
          result.isLayoutRequired = true
        end if
      else if oldRowContentInfo <> invalid and newRowContentInfo <> invalid
        m.log.verbose("updateRowContentInfo - old & newContent info not invalid. lets compare")

        ' If the row is still using some Content, and we are also passing a Content. check for differences in version, which indicates changes.
        isChanged = oldRowContentInfo.version <> newRowContentInfo.version
        ' Check if there is a difference in the focus or hidden state
        if oldRowContentInfo.isHidden <> newRowContentInfo.isHidden
          ' Hidden state has changed, so the list needs laying out again.
          m.log.verbose("updateRowContentInfo - isHidden changed")
          if result <> invalid
            result.isLayoutRequired = true
          end if
          isChanged = true
        end if
        ' the row has changed whether it is focusable or not
        m.log.verbose("updateRowContentInfo - isFocusEnabled changed")
        if oldRowContentInfo.isFocusEnabled <> newRowContentInfo.isFocusEnabled
          if result <> invalid
            result.isFocusChangeRequired = true
          end if
        end if
        isChanged = true
      end if

      return isChanged
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ List Content Methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function onListContentItemsChange(changes as mc.types.array)
      m.log.info("The list content items have changed")
      m.focusIndicatorManager@.cancelFlowFocus()
      m.viewManager.onContentItemsChange(changes)
      m.focusIndicatorManager@.cancelFlowFocus()
      m.viewManager.isScrolling = false
      m.itemScroller.isDoingFlowFocus = false
      m.log.info("previous focus ", m.itemScroller.previousFocusedRow, m.itemScroller.previousFocusedIndex)

    end function

    private function updateListContentIfRequired(result as ml.ListChangeResult)
      m.log.info("processing list changes")

      'm.log.increaseIndent()
      currentFocusSettings = m.focusIndicatorManager@.getCurrentFocusSettings()
      m.log.verbose("LCM processing list changes>>>>>>>>>>>>>>>")
      if currentFocusSettings <> invalid
        m.log.verbose(" current focus settings ", currentFocusSettings.rowIndex, " ICI ", currentFocusSettings.cellIndex)
      end if
      m.log.verbose(" RI ", m.list.focusedRowIndex, " CI ", m.list.focusedCellIndex)
      if result.isLayoutRequired
        m.log.info("the list needs to update it's layout as a result of these changes")
        'm.log.increaseIndent()
        m.viewManager.forceUpdateLayout(false)

        m.itemScroller.processChanges([])

        'this move allows us to render anything, and clean up renderers
        m.list.moveToRowItemIndex(m.list.focusedRowIndex, m.list.focusedCellIndex, false)
        'm.log.decreaseIndent()
        m.log.verbose(" LCM PROCESSING END<<<<<<<<<<<<<<<<<<<<<<<<")
      end if
      'm.log.decreaseIndent()
    end function

    override function forceUpdateLayout(fullUpdate = false as boolean)
      super.forceUpdateLayout(fullUpdate)
      m.viewManager.recalculateCellInfos()
    end function

  end class
end namespace
