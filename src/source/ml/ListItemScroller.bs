import "pkg:/source/ml/ItemScroller.bs"
import "pkg:/components/view/mixin/FocusMixin.bs"
import "pkg:/source/ml/ListItemViewManager.bs"
import "pkg:/source/core/BaseClass.bs"
import "pkg:/source/view/Animation.bs"
import "pkg:/source/ml/ListMixin.bs"
import "pkg:/source/ml/ComponentInfo.bs"
import "pkg:/source/ml/ViewPortEventNotifier.bs"
import "pkg:/source/ml/ItemScroller.bs"
import "pkg:/source/ml/ItemFocusManager.bs"

namespace list
  class ListItemScroller extends list.ItemScroller

    function new(viewManager as list.ItemViewManager, focusManager as list.ItemFocusManager)
      super("ListItemScroller", viewManager, focusManager)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Component Info
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    public override function getComponentInfos(forceRecalculate as boolean)
      m.componentInfos = []
      virtualIndex = 0
      for i = 0 to m.viewManager.visibleItems.count() - 1
        item = m.viewManager.visibleItems[i]
        settings = list.listMixin.getRowSettings(m.viewManager.content, item)
        if (item.isHidden = invalid or item.isHidden = false) and (item.isFocusEnabled = invalid or item.isFocusEnabled = true) and (not settings.isHiddenWhenEmpty or item.length > 0)
          ' component = m.viewManager.visibleComponents[i]
          component = m.viewManager.renderersByContentId[item.id]
          infos = component@.getRowInfos(forceRecalculate)

          contentIndex = component.index
          for subIndex = 0 to infos.count() - 1
            info = infos[subIndex]
            componentInfo = list.ComponentInfoUtils.componentInfoFromAA(info)
            componentInfo.component = component
            componentInfo.contentIndex = contentIndex
            componentInfo.index = virtualIndex
            m.componentInfos.push(componentInfo)
            virtualIndex++
          end for
        end if
      end for
      m.numberOfComponents = m.componentInfos.count()
    end function

    protected override function setFocusManagerInfo(componentInfo as list.componentInfo, nextComponentInfo as list.componentInfo, direction as integer, isFloatingFocus as boolean) as void
      previousFocusIndicatorConfig = m.getFocusIndicatorConfig(componentInfo, m.direction, isFloatingFocus)

      if m.viewManager.isScrolling
        nextComponentInfo.component@.chooseComponentInfoForScrollingIntoRow(nextComponentInfo)
      end if

      m.nextFocusIndicatorConfig = m.getFocusIndicatorConfig(nextComponentInfo, m.direction, isFloatingFocus)
      nextFocusIndicatorConfig = m.nextFocusIndicatorConfig
      m.focusManager.setComponentInfo(componentInfo, nextComponentInfo, nextFocusIndicatorConfig, direction, isFloatingFocus, previousFocusIndicatorConfig)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Focus
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    override function setFocusOnRenderer(isMoving as boolean) as void
      m.log.info("setFocusOnRenderer", isMoving)
      if isMoving
        ' ? "CANCEL IS MOVING"
        return
      end if
      if m.componentInfo <> invalid and (m.viewManager.owner.isChildFocused or m.viewManager.owner.isFocused)
        ' ? " SETTING FOCUS ON " ; dv(m.componentInfo.component)
        view.setFocus(m.componentInfo.component)
      else
        m.log.warn("not setting focus on", m.componentInfo.index, "owner child focused?", m.viewManager.owner.isChildFocused, "owner focused?", m.viewManager.owner.isFocused)
      end if
    end function

    public override function getFocusIndicatorConfig(componentInfo as list.ComponentInfo, direction as integer, isFloatingFocus as boolean, isFromListScroll = false as boolean) as list.FocusIndicatorConfig
      ' ? "::::::::::::::::::::::: LIST GET FOCUS INDICATOR CONFIG" ; componentInfo.componentIndex ; " D " ; direction
      config = componentInfo.component@.getFocusIndicatorConfig(componentInfo, direction, isFloatingFocus, true)
      return config
    end function

    protected override function setComponentInfo(info as list.ComponentInfo)
      isSubRowChanged = m.componentInfo = invalid or info.componentIndex <> m.componentInfo.componentIndex
      super.setComponentInfo(info)
      if isSubRowChanged
        m.viewManager.owner.focusedSubRowIndex = info.componentIndex
      end if
      m.viewManager.owner.screenPos = m.screenPos
      m.focusIndicatorManager.activeScreenPos = m.screenPos
    end function

    protected override function setNextComponentInfo(info as list.ComponentInfo) as void
      ' ? ">>>>>>>>>>>>>>> SNCI "; m.isLastMoveFlowFocus
      super.setNextComponentInfo(info)
      if not m.isLastMoveFlowFocus
        m.focusIndicatorManager.nextScreenPos = m.nextScreenPos
      end if
    end function

    protected override function updateSrollOffsetFraction(fraction as float) as void
      if m.isLastMoveFlowFocus
        ' ? "Ignoring scrolloffset fraction while doing floating focus"
        return
      end if
      fraction = clamp(fraction, 0, 1)

      if fraction < m.lastScrollOffsetFraction
        ' ? "Experimental hack to stop the offsets getting updated multiple times when cancelling a scroll"
        return
      end if

      m.lastScrollOffsetFraction = fraction
      newTranslation = interpolateArray([0, m.previousScreenPos], [0, m.nextScreenPos], fraction)
      ' ? " MNSP "; m.previousScreenPos ; " > " fraction ; " > " ; m.nextScreenPos ; " > " ; newTranslation[1]

      m.offsetContainer.translation = newTranslation
      m.viewManager.owner.screenOffset = newTranslation[1]
      if fraction >= 1
        ' ? "CHANGE CHANGE CHANGE"
        ' ? " FINISHED UPDATE PSP >> " ; m.offsetContainer.translation[1]
        m.previousScreenPos = m.offsetContainer.translation[1]
      end if
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Managing Content Changes
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected override function processChanges(changes as types.array) as void
      isIndexUpdateRequired = false
      ' ? " NC "; m.numberOfComponents ; " I " ; m.index
      if m.numberOfComponents = 0
        ' ? "THERE ARE NO MORE ITEMS!"
        return
      end if

      if m.index >= m.numberOfComponents
        index = m.numberOfComponents - 1
        ' ? "index is changing " ; m.index ; " > " ; index
        m.index = index
        isIndexUpdateRequired = true
      end if

      if not isIndexUpdateRequired
      isIndexUpdateRequired = collections.contains(changes, function(c as types.assocarray)
        return c.index <> invalid and c.index <> m.index or (c.type = "sort" or c.type = "change" or c.type = "updated" or c.type = "isHidden" or c.type = "isFocusEnabled")
      end function)
    end if

    'FIXME - this needs revisiting

    'all changes result in downward movements
    ? "LIST PROCESS INDEX CHANGES", isIndexUpdateRequired, m.index, m.numberOfComponents
    if isIndexUpdateRequired
      ' ? " NOTIFYING FOCUS"
      ' ? ">>>>>>>>>> ITEM SCROLLER INDEX IS NOW" ; m.index
      wasNotifying = m.focusManager.isNotifying
      m.focusManager.isNotifying = true
      m.reset(true)
      m.focusManager.isNotifying = wasNotifying
    else
      ' ? " not notifying focus"
      m.reset(true)
    end if
  end function

end class
end namespace