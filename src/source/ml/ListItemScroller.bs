import "pkg:/source/ml/ItemScroller.bs"
import "pkg:/components/view/mixin/FocusMixin.bs"
import "pkg:/source/ml/ListItemViewManager.bs"
import "pkg:/source/core/BaseClass.bs"
import "pkg:/source/view/Animation.bs"
import "pkg:/source/ml/ListMixin.bs"
import "pkg:/source/ml/CellInfo.bs"
import "pkg:/source/ml/ViewPortEventNotifier.bs"
import "pkg:/source/ml/ItemScroller.bs"

namespace ml
  class ListItemScroller extends ml.ItemScroller

    function new(viewManager as ml.ItemViewManager, focusManager as mc.types.node)
      super("ListItemScroller", viewManager, focusManager)
      'the list has it's own focus manager, to send n
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Component Info
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected override function setFocusManagerInfo(cellInfo as ml.CellInfo, nextCellInfo as ml.CellInfo, direction as integer, isFloatingFocus as boolean) as void
      m.log.info(" LIST setFocusManagerInfo ", m.viewManager.isScrolling)
      if m.viewManager.isScrolling and nextCellInfo <> invalid
        nextCellInfo.component@.chooseCellInfoForScrollingIntoRow(nextCellInfo)
      end if

      m.nextFocusIndicatorConfig = m.getFocusIndicatorConfig(nextCellInfo, m.direction, isFloatingFocus)
      if m.nextFocusIndicatorConfig <> invalid
        if nextCellInfo <> invalid
          m.nextFocusIndicatorConfig.row = nextCellInfo.component
        end if
        m.nextFocusIndicatorConfig.isRowEvent = true
      end if

      m.log.info(" FROM LIST")
      m.focusManager@.setNextFocusIndicatorConfig(m.nextFocusIndicatorConfig)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Focus
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    public override function getFocusIndicatorConfig(cellInfo as ml.CellInfo, direction as integer, isFloatingFocus as boolean, isFromListScroll = false as boolean) as ml.FocusIndicatorConfig
      if cellInfo <> invalid and cellInfo <> invalid
        config = cellInfo.component@.getFocusIndicatorConfig(cellInfo, direction, isFloatingFocus, true)
        if config <> invalid
          config.willDoSystemFocus = true
        end if
      else
        return invalid
      end if
      return config
    end function

    protected override function setCellInfo(info as ml.CellInfo)
      isSubRowChanged = m.cellInfo = invalid or info.componentIndex <> m.cellInfo.componentIndex

      m.log.info(">>>>>>>>>> SCI ")
      'FIXME check this..
      if isSubRowChanged and m.cellInfo <> invalid and m.cellInfo.component <> invalid
        m.cellInfo.component@.cancelMove(true)
      end if

      super.setCellInfo(info)
      if isSubRowChanged
        m.viewManager.owner.focusedSubRowIndex = info.componentIndex
      end if
      m.viewManager.owner.screenPos = m.screenPos
      m.focusManager.activeScreenPos = m.screenPos
    end function

    protected override function setNextCellInfo(info as ml.CellInfo) as void
      m.log.info(">>>>>>>>>>>>>>> SNCI ", m.isLastMoveFlowFocus)
      super.setNextCellInfo(info)
      if not m.isLastMoveFlowFocus
        m.focusManager.nextScreenPos = m.nextScreenPos
      end if
    end function

    protected override function updateScrollOffsetFraction(fraction as float) as void
      if m.isLastMoveFlowFocus
        ' ? "Ignoring scroll offset fraction while doing floating focus"
        return
      end if
      fraction = mc.clamp(fraction, 0, 1)

      if fraction < m.lastScrollOffsetFraction
        ' ? "Fixing offset position, to prevent 'jumping' after cancelling a scroll"
        m.previousScreenPos = m.offsetContainer.translation[1]
      end if

      m.lastScrollOffsetFraction = fraction
      newTranslation = mc.interpolateArray([0, m.previousScreenPos], [0, m.nextScreenPos], fraction)
      ' ? " MNSP "; m.previousScreenPos ; " > " fraction ; " > " ; m.nextScreenPos ; " > " ; newTranslation[1]

      m.offsetContainer.translation = newTranslation
      m.viewManager.owner.screenOffset = newTranslation[1]
      if fraction >= 1
        ' ? "CHANGE CHANGE CHANGE"
        ' ? " FINISHED UPDATE PSP >> " ; m.offsetContainer.translation[1]
        m.previousScreenPos = m.offsetContainer.translation[1]
      end if
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Managing Content Changes
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected override function processChanges(changes as mc.types.array) as void
      isIndexUpdateRequired = false
      ' ? " NC "; m.viewManager.numberOfItems ; " I " ; m.index
      if m.viewManager.numberOfItems = 0
        ' ? "THERE ARE NO MORE ITEMS!"
        return
      end if

      if m.index >= m.viewManager.numberOfItems
        index = m.viewManager.numberOfItems - 1
        ' ? "index is changing " ; m.index ; " > " ; index
        m.index = index
        isIndexUpdateRequired = true
      end if

      if not isIndexUpdateRequired
        isIndexUpdateRequired = mc.collections.contains(changes, function(c as mc.types.assocarray)
          return c.index <> invalid and c.index <> m.index or (c.type = "sort" or c.type = "change" or c.type = "updated" or c.type = "isHidden" or c.type = "isFocusEnabled")
        end function)
      end if

      'FIXME - this needs revisiting

      m.log.increaseIndent()
      'all changes result in downward movements
      m.log.info("LIST PROCESS INDEX CHANGES", isIndexUpdateRequired, m.index, m.viewManager.numberOfItems)
      if isIndexUpdateRequired
        m.log.info(" NOTIFYING FOCUS")
        ' ? ">>>>>>>>>> ITEM SCROLLER INDEX IS NOW" ; m.index
        ' wasNotifying = m.focusManager.isNotifying
        ' m.focusManager.isNotifying = true
        m.reset(true)
        ' m.focusManager.isNotifying = wasNotifying
      else
        m.log.info(" not notifying focus")
        m.reset(true)
      end if
    end function

    protected override function notifyViewportEvents(direction as integer, forceAll = false as boolean)
      m.viewPortEventNotifier.notifyListViewportEvents(m.cellInfo, m.nextCellInfo, m.direction, forceAll)
    end function

    override function onViewManagerUpdate()
      super.onViewManagerUpdate()
      m.viewManager.recalculateCellInfos()
    end function
  end class
end namespace
