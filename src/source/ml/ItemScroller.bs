import "pkg:/source/ml/ItemScroller.bs"
import "pkg:/components/view/mixin/FocusMixin.bs"
import "pkg:/source/ml/ListItemViewManager.bs"
import "pkg:/source/core/BaseClass.bs"
import "pkg:/source/view/Animation.bs"
import "pkg:/source/ml/ListMixin.bs"
import "pkg:/source/ml/ComponentInfo.bs"
import "pkg:/source/ml/ViewPortEventNotifier.bs"
import "pkg:/source/ml/FocusIndicatorConfig.bs"

namespace list
  class ItemScroller extends BaseClass

    public focusIndicatorManager as types.node
    public container as types.node
    public offsetContainer as types.node

    public viewManager
    public focusManager ' this MUST be set before doing anything
    public viewPortEventNotifier
    private settings

    public isMovingMultiple = false

    public isLastMoveFlowFocus = false

    'ComponentInfo tracking
    public componentInfos = []
    public numberOfComponents = 0

    public componentInfo as list.ComponentInfo
    public nextComponentInfo as list.ComponentInfo
    public nextFocusIndicatorConfig as list.FocusIndicatorConfig
    public targetComponentInfo as list.ComponentInfo

    public focusedItem as types.node

    public index = 0
    public nextIndex = 0

    public focusedIndex = 0
    public nextPosition = 0
    public targetIndex = 0
    public scrollStartIndex = 0
    public direction = 0
    public axes = 0 'x = 0, y =1
    public screenPos = 0
    public nextScreenPos = 0

    public isFloatingFocus = false
    public isOnlyFloatingFocus = false

    public moveAnimation

    private animSpeed = 0.05
    private longPressEndItemOffset = 0

    private activeScrollLocation = 0
    private lastScrollOffsetFraction = 0
    private nextScrollLocation = 0
    private postHopIndex = 0
    private isScrollCancelled = false
    private sendViewPortEvents = false

    protected previousScreenPos = 0

    private isMultiMoveFinished = false

    function new(name as string, viewManager as list.ItemViewManager, focusManager as list.ItemFocusManager)
      super(name)
      m.viewManager = viewManager
      viewManager.itemScroller = m

      m.focusIndicatorManager = viewManager.owner.focusIndicatorManager
      m.container = m.viewManager.container
      m.axes = m.viewManager.axes
      m.viewPortEventNotifier = new list.ViewPortEventNotifier(viewManager)
      m.moveAnimation = new animations.Move(m.container, 1, m.container.translation, m.container.translation)
      m.moveAnimation.observeFraction(m.onAnimationFractionChange, m)

      focusManager.setItemScroller(m)
      m.focusManager = focusManager
    end function

    public function onViewManagerUpdate()
      if m.viewManager.settings <> invalid
        m.settings = m.viewManager.settings.focusSettings
        m.animSpeed = m.settings.animSpeed
        m.longPressEndItemOffset = m.settings.longPressEndItemOffset
      else
        m.animSpeed = 0.05
        m.longPressEndItemOffset = 0
      end if
      m.sendViewPortEvents = getPath(m.viewManager.owner, "content.listSettings.sendViewPortEvents", false)
      m.viewPortEventNotifier.onViewManagerUpdate()
      m.getComponentInfos(true)
    end function

    public function reset(keepOldFocusIfPossible = false as boolean) as void

      if keepOldFocusIfPossible
        index = m.index
      else
        index = 0
      end if

      m.onViewManagerUpdate()

      'FIXME - fix recovering focus
      if keepOldFocusIfPossible
        ' ? m.__classname ; " KEEP INDEX"
        if index >= m.numberOfComponents
          ' ? m.__classname ; " NEEDS FIXING TO LAST "
          'move to next item
          index = m.numberOfComponents - 1
        end if
      end if

      m.setFocusIndex(index, false, false)
      ' m.moveToIndex(index, false, true, 0)
      ' m.viewManager.updateRenderedComponents(m.direction, index)
    end function

    public function cancelScrolling()
      ' ? ">>> CANCEL SCROLLING " ; m.__classname ; " " ; m.viewManager.isScrolling
      'Tidy up the scrolling in here
      m.isScrollCancelled = m.viewManager.isScrolling
      if m.viewManager.isScrolling
        ' ? "000000000000000000000000000000000000 "; m.isScrollCancelled
        ' m.toggleScrolling(false)
        ' m.setTargetComponentInfo(m.nextComponentInfo)
        m.moveAnimation.pause()
        m.finishAnimating()
        m.isMovingMultiple = false
      end if
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Component Info
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    public function getComponentInfos(forceRecalculate as boolean)
      m.componentInfos = m.viewManager.cellInfos
      m.numberOfComponents = m.componentInfos.count()
    end function

    private function getComponentInfoForIndex(contentIndex as integer, cellIndex = -1 as integer) as list.ComponentInfo
      contentInfo = m.getComponentInfoForContentIndex(contentIndex)
      if contentInfo <> invalid
        info = contentInfo.component@.getContentInfoForIndex(cellIndex)
        if info <> invalid
          return m.componentInfos[info.index + cellIndex.componentIndex]
        end if
      end if
      return invalid
    end function

    private function getComponentInfoForContentIndex(contentIndex as integer) as list.ComponentInfo
      info = invalid
      ' ? "getComponentInfoForContentIndex" ; contentIndex
      for each info in m.componentInfos
        ' ? ">>>" ; info.contentIndex
        if info.contentIndex = contentIndex
          return info
        end if
      end for
      ' ? "no match"
      return invalid
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ MoveToIndex Convenience Methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function canMoveInDirection(direction as integer) as boolean
      return m.canMoveToIndex(m.index + direction, direction)
    end function

    function canMoveToIndex(index as integer, direction as integer) as boolean
      ' ? "CMTI D "; direction; " MI " ; index ; " NC "; m.numberOfComponents
      return m.numberOfComponents > 0 and ((direction = -1 and index > -1) or (direction = 1 and index < m.numberOfComponents))
    end function

    function moveToContentIndex(index as integer, animated = true as boolean, fast = false as boolean, direction = invalid as integer, forceSequential = true as boolean) as boolean
      info = m.getComponentInfoForContentIndex(index)
      if info <> invalid
        ' ? " INFO INDEX IS "; info.index
        return m.moveToIndex(info.index, animated, fast, direction, forceSequential)
      else
        ' ? "+++ cannot move to content index - no info"
      end if
      return false
    end function

    function moveFromPress(offset as integer, forceSequential = true as boolean) as boolean
      m.isScrollCancelled = false
      return m.move(offset, true, true, forceSequential)
    end function

    function move(offset as integer, animated = true as boolean, fast = false as boolean, forceSequential = true as boolean) as boolean
      ' ? " MOVE I " ; m.index ; " O " ; offset
      index = m.index + offset

      if offset > 0
        direction = 1
      else
        direction = -1
      end if

      if not m.canMoveToIndex(index, direction)
        m.log.info("move in direction", direction, " cannot be performed")
        ' ? "+++ could not move"
        return false
      end if

      if index <> -1
        ' ? "===B"
        return m.moveToIndex(index, animated, fast, direction, forceSequential)
      end if

      return false
    end function

    function moveToEnd(direction as integer, screenPos = invalid as integer, animated = true as boolean, fast = false as boolean) as boolean
      ' ? ">>>>>>>>>> MOVE TO END"

      m.isScrollCancelled = false

      if direction = -1
        index = 0
      else
        index = m.numberOfComponents - 1
      end if

      if not m.canMoveToIndex(index, direction)
        m.log.info("already at end - ignoring")
        ' ? ">>>Already at end "
        return false
      end if

      ' ? ">>>moveToEnd  " ; m.__classname ; " I " ; m.index; " D "; direction

      m.moveToIndex(index, animated, fast)
      return true
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Movement Machinery
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    ' move to the Virtual Index
    function moveToIndex(index as integer, animated = true as boolean, fast = false as boolean, direction = invalid as integer, forceSequential = true as boolean, isContinuing = false as boolean) as boolean
      m.log.info("moveToIndex I", m.index, "NI", index, animated)
      ' ? ">?>?>?>?>?////////////////////////////////////////////////////////"
      ' ? "////// MTI " ; m.index ; " NI " ; index ; " d " ; direction ; " FS " ; forceSequential
      index = clamp(index, 0, m.numberOfComponents - 1)
      ' index = clamp(index, 0, 3)
      'FIXME - cancel/tidy up a move in progress

      m.focusIndicatorManager@.cancelFlowFocus()

      if m.numberOfComponents = 0
        return false
      end if

      if direction = invalid
        direction = 0
        if index < m.index
          direction = -1
        else
          direction = 1
        end if
      end if
      ' ? "////// MTI RESOLVED " ; m.index ; " NI " ; index ; " d " ; direction ; " FS " ; forceSequential

      '////////////////////////////////////////////////////////////////////////
      ' ? "//// 1. get ComponentInfo"
      '////////////////////////////////////////////////////////////////////////

      m.isMovingMultiple = abs(index - m.index) > 1

      if forceSequential
        nextComponentInfo = m.componentInfos[clamp(m.index + direction, 0, m.numberOfComponents - 1)]
      else
        nextComponentInfo = m.componentInfos[index]
      end if

      targetComponentInfo = m.componentInfos[index]
      m.direction = direction

      'TODO - calculate the next hop index.. - for now we can configure this

      m.setTargetComponentInfo(targetComponentInfo)

      ' ? ":::::::::::::: MOVE TO INDEX SET COMP INFO"
      ' ? " NI " ; nextComponentInfo.index
      ' ? " TI " ; targetComponentInfo.index


      '////////////////////////////////////////////////////////////////////////
      ' ? "//// 2. Ascertain offset "; m.__classname
      '////////////////////////////////////////////////////////////////////////

      ' ? "2.b IS FLOW POSSIBLE ??? " ; m.screenPos ; "m.viewManager.maxPos " ;m.viewManager.maxPos; " NFA "; nextComponentInfo.isFlowFocusAllowed
      isFlowPossible = m.viewManager.isFlowFocusPossible(nextComponentInfo, direction, m.screenPos)

      ' ? " ::::::::::::::: setNextComponentInfo DDD"
      m.isLastMoveFlowFocus = isFlowPossible and animated
      m.setNextComponentInfo(nextComponentInfo)
      ' ? " POS " ;m.container.translation[m.axes] ; " ASP "; m.screenPos ; " MP "; m.viewManager.maxPos ; " D " ; direction

      if isFlowPossible and animated
        ' ? "///// 2.b flow IS POSSIBLE I " ; index
        m.moveUsingFlowAnim(m.componentInfo, nextComponentInfo, m.direction)
        return true
      end if

      translation = m.container.translation
      translation[m.axes] = - targetComponentInfo.getPosition(direction)

      ' ? "////// offset is "; translation[m.axes]

      if animated
        '////////////////////////////////////////////////////////////////////////
        ' ? "/////// 3. animated move"
        '////////////////////////////////////////////////////////////////////////

        ' ? ">>>> START ANIM ; REGULAR CONTAINER ANIM - moveToIndex "; m.index ; " F " formatJson(m.container.translation); " TO " ; formatJson(translation) ; " SPEED "; m.animSpeed ; " " ; m.__classname
        m.toggleScrolling(true)
        m.setFocusIndex(m.index, true)
        m.viewManager.updateRenderedComponents(m.direction, m.index)
        m.moveAnimation.animateToWithSpeed(translation, m.animSpeed)
        m.moveAnimation.start()
      else
        '////////////////////////////////////////////////////////////////////////
        ' 4. non-animated move
        '////////////////////////////////////////////////////////////////////////
        m.toggleScrolling(false)
        m.container.translation = translation
        m.nextScreenPos = targetComponentInfo.getScreenPosition(m.direction)
        m.updateSrollOffsetFraction(1)
        m.viewManager.updateRenderedComponents(m.direction, index)
        m.setFocusIndex(index, false, true)
        m.forceFocusOnIndex(index, true)
        m.setComponentInfo(targetComponentInfo)
      end if

      return true
    end function

    ' move to the Virtual Index
    function finishMovingToNextComponent(animated = true as boolean) as boolean
      ' ? "moving to next component"
      'FIXME - cancel/tidy up a move in progress
      ' m.focusIndicatorManager@.cancelFlowFocus()

      m.isScrollCancelled = false

      direction = m.direction

      nextComponentInfo = m.nextComponentInfo
      ' m.setTargetComponentInfo(nextComponentInfo)

      '////////////////////////////////////////////////////////////////////////
      ' ? "//// 2. Ascertain offset "; m.__classname
      '////////////////////////////////////////////////////////////////////////

      ' ? "2.b IS FLOW POSSIBLE ??? " ; m.screenPos ; "m.viewManager.maxPos " ;m.viewManager.maxPos; " NFA "; nextComponentInfo.isFlowFocusAllowed
      isFlowPossible = m.viewManager.isFlowFocusPossible(nextComponentInfo, direction, m.screenPos)

      ' ? " ::::::::::::::: setNextComponentInfo DDD"
      m.isLastMoveFlowFocus = isFlowPossible and animated
      ' ? " POS " ;m.container.translation[m.axes] ; " ASP "; m.screenPos ; " MP "; m.viewManager.maxPos ; " D " ; direction

      if isFlowPossible and animated
        ' ? "///// 2.b flow IS POSSIBLE I " ; nextComponentInfo.index
        m.moveUsingFlowAnim(m.componentInfo, nextComponentInfo, m.direction)
        return true
      end if

      translation = m.container.translation
      translation[m.axes] = - nextComponentInfo.getPosition(direction)

      ' ? "////// offset is "; translation[m.axes]

      if animated
        '////////////////////////////////////////////////////////////////////////
        ' ? "/////// 3. animated move"
        '////////////////////////////////////////////////////////////////////////

        ' ? ">>>> START ANIM ; REGULAR CONTAINER ANIM - moveToIndex "; m.index ; " F " formatJson(m.container.translation); " TO " ; formatJson(translation) ; " SPEED "; m.animSpeed ; " " ; m.__classname
        ' m.toggleScrolling(true)
        ' m.setFocusIndex(m.index, true)
        m.viewManager.updateRenderedComponents(m.direction, m.index)
        m.moveAnimation.animateToWithSpeed(translation, m.animSpeed)
        m.moveAnimation.start()
      else
        '////////////////////////////////////////////////////////////////////////
        ' 4. non-animated move
        '////////////////////////////////////////////////////////////////////////
        m.toggleScrolling(false)
        m.container.translation = translation
        m.nextScreenPos = m.nextComponentInfo.getScreenPosition(m.direction)
        m.updateSrollOffsetFraction(1)
        index = m.nextComponentInfo.index
        m.viewManager.updateRenderedComponents(m.direction, index)

        m.setFocusIndex(index, false, true)
        m.forceFocusOnIndex(index, true)
        m.setComponentInfo(m.nextComponentInfo)
      end if

      return true
    end function

    function getCurrentIndexFraction(position as float)
      ' ? "OCPC " ; offset

      distance = abs(m.nextScrollLocation - m.activeScrollLocation)
      currentPos = abs(m.activeScrollLocation - position)
      if distance <> 0
        fraction = currentPos / distance
      else
        fraction = 0
      end if
      ' ? "))))"
      ' ? "))))"
      ' ? "))))"
      ' ? "))))"
      ' ? "))))"
      ' ? "))))"
      ' ? "))))"
      ' ? "))))"
      ' ? ">>> F " ; fraction ; " CI " ; m.componentInfo.index ; ": ASL " ; m.activeScrollLocation ; " >>> NSI " ; m.nextComponentInfo.index ; ": NSL >> "; m.nextScrollLocation ; " T " ; m.container.translation[m.axes] ; " p "; position ; " D " ; distance ; " CP "; currentPos
      ' ? " ASP " ; m.screenPos

      ' ? "))))"
      if fraction > 1
        fraction = 1
      else if fraction < 0
        fraction = 0
      end if

      return fraction
    end function

    function onAnimationFractionChange(fraction as float) as void
      ' ? ">>>+>>>+ OAFC "; fraction ; " imm "; m.isMovingMultiple ; " TCI " ; getPath(m.targetComponentInfo, "index") ; " NCI " ;m.componentInfo.index
      if fraction = 1 and not m.isMovingMultiple
        ' ? ">>>+>>>+ FINISHED REGULAR ANIM AT NEXT INDEX " ; m.nextIndex
        m.screenPos = m.nextComponentInfo.getScreenPosition(m.direction)

        ' m.updateSrollOffsetFraction(1)
        m.finishMovingToIndex()
      else if m.isMovingMultiple

        if fraction = 1
          ' isInPlace = (m.targetComponentInfo = invalid or m.componentInfo.index <> m.targetComponentInfo.index)
          ' ? " REGULAR ANIM FINISHED " ; isInPlace '": BUT STILL NOT IN PLACE!"
          ' m.updateSrollOffsetFraction(1)
          m.finishMovingToIndex()
        else

          f = clamp(m.getCurrentIndexFraction(m.container.translation[m.axes]), 0, 1)

          ' ? "+>>>+>>>>+ DDDDD " ; f ; " I "; m.index ; " ni "; m.nextIndex ; " NSL " ; m.nextScrollLocation ; "ASL" ; m.activeScrollLocation
          m.updateSrollOffsetFraction(f)
          if f >= 1
            ' ? ">>>>>>>>>>>>>>>>>>>>>>>>>>"
            ' ? " SET NEXT FOCUS INDEX "; m.nextIndex ; " " ; m.isScrollCancelled
            if m.isScrollCancelled
              m.finishMovingToIndex()
            else
              m.focusManager.onFocusAnimationUpdate(1)
              m.screenPos = m.nextComponentInfo.getScreenPosition(m.direction)
              m.setFocusIndex(m.nextIndex, true, true)
            end if
          else
            m.focusManager.onFocusAnimationUpdate(f)
          end if
        end if
      else
        'simple one keypress case
        m.updateSrollOffsetFraction(fraction)
        m.focusManager.onFocusAnimationUpdate(fraction)
      end if

    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Finishing Movement
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function finishAnimating() as void
      m.finishMovingToIndex()
    end function

    function finishMovingToIndex(isFromFlow = false as boolean) as boolean

      ' ? "VVVVV finishMovingToIndex TI " ; getPath(m.targetComponentInfo, "index") ; " IS " ; m.viewManager.isScrolling
      ' ? m.__classname ; " " ; m.isScrollCancelled

      if m.isScrollCancelled
        ' ? "VVVVV SCROLL CANCELLED " ; m.nextScrollLocation ; " " ; m.container.translation[m.axes]
        if m.container.translation[m.axes] = m.nextScrollLocation or isFromFlow
          ' ? " is in position"
          m.toggleScrolling(false)
          if isFromFlow
            m.focusManager.onFocusAnimationUpdate(1)
            m.updateSrollOffsetFraction(1)
            ' m.setFocusIndex(m.index, false, false)
          else
            m.setFocusIndex(m.nextIndex, false, false)
          end if

          return false
        else
          ' ? "+++++++++++++++++++"
          ' ? "is not in position yet - finishing T " ; m.nextScrollLocation ; " P " ; m.container.translation[m.axes] ; " D " ; m.direction
          ' ? "VVVVV Need to move to index " ; m.nextIndex
          index = m.nextIndex
          if (m.direction = 1 and m.container.translation[m.axes] < m.nextScrollLocation) or (m.direction = -1 and m.container.translation[m.axes] > m.nextScrollLocation)
            ' ? "Moved past this item - need to go forward one more"
            index += m.direction
          end if
          ' isMoving = m.moveToIndex(index, true, true, m.direction, true, true)
          isMoving = m.finishMovingToNextComponent()
          if isMoving
            return true
          end if
        end if
      else
        ' ? "VVVV is not cancelled"
      end if

      if not m.viewManager.isScrolling
        ' ? "VVVVV Scrolling is finished - cannot finish move"
        m.focusManager.onFocusAnimationUpdate(1)
        m.updateSrollOffsetFraction(1)
        ' m.toggleScrolling(false)
        ' m.setFocusOnRenderer(false)
        return false
      end if

      if not m.isMovingMultiple and not m.isScrollCancelled
        ' ? "VVVVV was a simple move IFF " ; isFromFlow
        ' ? "MI "; m.index ; " NI "; m.nextIndex

        m.focusManager.onFocusAnimationUpdate(1)
        m.updateSrollOffsetFraction(1)
        m.toggleScrolling(false)
        m.setFocusIndex(m.nextIndex, false, false)
        ' m.setFocusOnRenderer(false)
        return false
      end if

      ' componentInfo = m.componentInfo
      componentInfo = m.nextComponentInfo
      ' ? "VVVV NCI " ; getPath(m.targetComponentInfo, "index"); getPath(componentInfo, "index")
      if componentInfo = invalid
        ' ? "VVVVV NO Component Info"
        m.focusManager.onFocusAnimationUpdate(1)
        m.updateSrollOffsetFraction(1)
        m.setFocusIndex(m.nextIndex, true, true)
        m.toggleScrolling(false)
        m.isMultiMoveFinished = true
        return false
      end if

      if m.targetComponentInfo = invalid or componentInfo.index = m.targetComponentInfo.index
        ' ? "VVVVV HAVE ARRIVED"
        m.focusManager.onFocusAnimationUpdate(1)
        m.updateSrollOffsetFraction(1)
        m.toggleScrolling(false)
        m.setFocusIndex(m.nextIndex, false, false)
        m.isMultiMoveFinished = true
        return false
      end if

      if isFromFlow
        m.setFocusIndex(m.nextIndex, true, false)
        m.focusManager.onFocusAnimationUpdate(1)
        m.updateSrollOffsetFraction(1)
      end if
      ' ? "VVVVV Need to move to index " ; m.targetComponentInfo.index ; " at " ; componentInfo.index
      isMoving = m.moveToIndex(m.targetComponentInfo.index, true, true, m.direction, true, true)
      ' ? " isMoving "; isMoving
      if not isMoving
        ' ? "VVVVV Final move could not be done"
        m.toggleScrolling(false)
      end if
      return isMoving
    end function

    function toggleScrolling(active as boolean)
      ' ? "+>+>+>+> toggleScrolling " ; active ; " IS " ; m.viewManager.isScrolling ; " " ; m.__classname
      if m.viewManager.isScrolling <> active
        if active
          m.scrollStartIndex = m.index
        end if
        m.viewManager.setIsScrolling(active, m.isMovingMultiple, m.index)
      end if

      if not active
        m.setTargetComponentInfo(invalid)
        m.moveAnimation.stop(false)
        m.isMovingMultiple = false
        m.scrollStartIndex = -1
      end if
    end function

    protected function setFocusManagerInfo(componentInfo as list.componentInfo, nextComponentInfo as list.componentInfo, direction as integer, isFloatingFocus as boolean) as void
      if isFloatingFocus
        m.nextFocusIndicatorConfig = m.getFocusIndicatorConfig(nextComponentInfo, m.direction, true)
      else
        m.nextFocusIndicatorConfig = m.getFocusIndicatorConfig(nextComponentInfo, m.direction, false)
      end if
      nextFocusIndicatorConfig = m.nextFocusIndicatorConfig
      m.focusManager.setComponentInfo(componentInfo, nextComponentInfo, nextFocusIndicatorConfig, direction, isFloatingFocus)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Flow Focus
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected function moveUsingFlowAnim(fromInfo as list.ComponentInfo, toInfo as list.ComponentInfo, direction as integer)
      ' ? ")))))) moveUsingFlowAnim I " ; m.index ; " FI " ; fromInfo.index ; " TI " ; toInfo.index ; " CI " ; toInfo.contentIndex ; "  "; m.__classname

      m.isLastMoveFlowFocus = true
      m.toggleScrolling(true)
      m.setFocusManagerInfo(fromInfo, toInfo, direction, true)
      ' ? "FLOW "; m.animSpeed
      m.focusIndicatorManager@.startFlowFocus(m.nextFocusIndicatorConfig, m.animSpeed, getTop())
    end function

    function onFlowFocusFraction(fraction as float)
      ' ? "+>+>+>+> on FLow fraction"; fraction ; m.__classname
      ' m.log.info("onFlowFocusFraction", fraction, "multiple", m.isMovingMultiple, "targetIndex", m.targetIndex)

      if fraction = 1
        ' ? "+>+>+>+ FINISHED FLOW " ; m.__classname ; " multiple: " ; m.isMovingMultiple ; " TI " ; m.targetIndex
        m.log.info("finished focusing action with this flow")

        ' ? "+>+>+>+> "; getPath(m.targetComponentInfo, "index"); " MI "; m.index ; " NI " ; m.nextIndex
        m.finishMovingToIndex(true)
      else
        ' ? ">>>> FLOW FOCUS "; fraction
        ' m.updateSrollOffsetFraction(fraction)
        m.focusManager.onFocusAnimationUpdate(fraction)
      end if
    end function

    protected function updateSrollOffsetFraction(fraction as float) as void
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ State Tracking
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected function setComponentInfo(info as list.ComponentInfo)
      m.componentInfo = info
      if info <> invalid
        ' ? "SCI>>> (" ; m.__classname ; ") " ; info.index ; " CI " ; info.contentIndex
        m.index = info.index
        m.activeScrollLocation = - info.getPosition(m.direction)
        if not m.isLastMoveFlowFocus
          m.screenPos = info.getScreenPosition(m.direction)
        end if
      else
        m.index = -1
        m.activeScrollLocation = 0
        m.screenPos = 0
      end if
    end function

    protected function setNextComponentInfo(info as list.ComponentInfo) as void
      m.lastScrollOffsetFraction = 0

      if info = invalid
        m.nextComponentInfo = invalid
        m.nextIndex = -1
        m.nextScrollLocation = 0
        m.nextFocusIndicatorConfig = invalid
        if not m.isLastMoveFlowFocus
          m.nextScreenPos = 0
        end if
        return
      end if

      ' ? m.__classname ; " SET NEXT COMPONENT INFO " ; info.index ; " IFF "; m.isLastMoveFlowFocus

      if info.index <> m.nextIndex
        m.nextIndex = info.index
        m.nextScrollLocation = - info.getPosition(m.direction)
        if not m.isLastMoveFlowFocus
          m.nextScreenPos = info.getScreenPosition(m.direction)
        end if
        m.nextFocusIndicatorConfig = m.getFocusIndicatorConfig(info, m.direction, m.isLastMoveFlowFocus)

        if m.nextComponentInfo = invalid or info.contentIndex <> m.nextComponentInfo.contentIndex
          m.viewManager.updateScrolling(info.contentIndex)
        else
          'we scrolled to a sub-row
          ' ? "setNextComponentInfo - not (yet) reporting subrow move on CI "; info.contentIndex ; " SI "; info.componentIndex
        end if
      end if

      m.nextComponentInfo = info
    end function

    function setTargetComponentInfo(info as list.ComponentInfo) as void
      m.targetComponentInfo = info
      if info <> invalid
        ' ? " >>>>>>>>>>>>>>>> Target is " ; info.index
        m.targetIndex = info.index
      else
        ' ? " >>>>>>>>>>>>>>>> Target is invalid "
        m.targetIndex = -1
      end if
    end function

    ' /**
    '  * @member setFocusIndex
    '  * @memberof module:ItemScroller
    '  * @instance
    '  * @function
    '  * @description Responsible for all state updates, and hooks pertaning to focus position.
    '  *       NOTE : does NOT update position - you should be in position when calling this. for efficiency does not recalculate index: you should know the index when you call me!
    '  * @param {integer} index - the index you KNOW you are on when your move is finished (finished could mean from one index to nextindex, while animating; doesn't have to be targetIndex)
    '  * @param {boolean} isMoving - if true, then deltas are calculated for next position, and observers fired if their screen status will change
    '  */
    function setFocusIndex(index as integer, isMoving as boolean, notifyFocusManager = true as boolean) as void
      'This MUST be called infrequently
      ' TODO - check if index is actually changed
      ' ? "~~~SFI "; index ; " moving "; isMoving ; " d "; m.direction

      if m.numberOfComponents = 0
        return
      end if

      if index = -1
        m.setComponentInfo(m.componentInfos[0])
        ' ? " ::::::::::::::: setNextComponentInfo AAA"
        m.setNextComponentInfo(m.componentInfos[0])
        ' m.setNextIndex(0)
      else
        if index >= m.numberOfComponents - 1
          index = m.numberOfComponents - 1
        end if

        m.setComponentInfo(m.componentInfos[index])
        index = clamp(m.index + m.direction, 0, m.numberOfComponents - 1)
        ' ? " ::::::::::::::: setNextComponentInfo BBB"
        m.setNextComponentInfo(m.componentInfos[index])
      end if

      m.focusedItem = m.viewManager.visibleItems[m.componentInfo.contentIndex]

      m.viewManager.updateRenderedComponents(m.direction, m.index)

      if m.sendViewPortEvents
        m.viewPortEventNotifier.notifyViewportEvents(m.componentInfo, m.nextComponentInfo, m.direction, true)
      end if

      if notifyFocusManager
        m.setFocusManagerInfo(m.componentInfo, m.nextComponentInfo, m.direction, false)
      end if

      m.setFocusOnRenderer(isMoving)
    end function

    function forceFocusOnIndex(index as integer, notifyFocusManager = true as boolean) as void
      if m.numberOfComponents = 0
        return
      end if
      index = clamp(index, 0, m.numberOfComponents - 1)
      m.setComponentInfo(m.componentInfos[index])
      ' ? " ::::::::::::::: setNextComponentInfo CCC"
      m.setNextComponentInfo(m.componentInfos[index])

      ' m.viewManager.updateRenderedComponents(m.direction, m.index)
      ' m.notifyViewportEvents(true)

      if notifyFocusManager
        m.setFocusManagerInfo(m.componentInfo, m.nextComponentInfo, m.direction, false)
        m.focusManager.onFocusAnimationUpdate(1)
      end if

      m.setFocusOnRenderer(false)
      if m.viewManager.row <> invalid
        m.viewManager.owner.focusedCellIndex = m.componentInfo.contentIndex
      end if
    end function


    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ System Focus
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function setFocusOnRenderer(isMoving as boolean) as void
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Managing Content Changes
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected function processChanges(changes as types.array) as void
      isIndexUpdateRequired = false
      if m.numberOfComponents = 0
        ' ? "THERE ARE NO MORE ITEMS!"
        return
      end if

      ' ? m.__classname ; " processing changes NUM ITEMS " ; m.numberOfComponents ; " I " ; m.index
      if m.index < 0
        index = m.numberOfComponents - 1
        m.index = index
        isIndexUpdateRequired = true
      end if

      if m.index >= m.numberOfComponents
        index = m.numberOfComponents - 1
        ' ? "index is changing " ; m.index ; " > " ; index
        m.index = index
        isIndexUpdateRequired = true
      end if

      if not isIndexUpdateRequired
      isIndexUpdateRequired = collections.contains(changes, function(c as types.assocarray)
        return c.index <> invalid and c.index <> m.index or (c.type = "sort" or c.type = "change" or c.type = "updated" or c.type = "isHidden" or c.type = "isFocusEnabled")
      end function)
    end if

    'FIXME - this needs revisiting
    ' ? ":::::::::::::::::::::EEEEEEEEEEEEEEEE"

    'all changes result in downward movements
    ' ? "INDEX CHANGES", isIndexUpdateRequired, m.index, m.numberOfComponents
    ' if isIndexUpdateRequired
    '   ? " NOTIFYING FOCUS"
    '   ? ">>>>>>>>>> ITEM SCROLLER INDEX IS NOW" ; m.index
    '   wasNotifying = m.focusManager.isNotifying
    '   m.focusManager.isNotifying = true
    '   m.reset(true)
    '   m.focusManager.isNotifying = wasNotifying
    ' else
    '   ? " not notifying focus"
    ' ? ":::::::::::::::::::::FFFFFFFFFFFFFFFFFFF"
    m.reset(true)
    ' end if
  end function

  public function chooseComponentInfoForScrollingIntoRow(componentInfo as list.ComponentInfo)
    componentInfo = m.getCellComponentInfo(componentInfo, true)
    if componentInfo <> invalid
      m.setComponentInfo(componentInfo)
      ' ? " GRID CHOICE IS MADE index is now "; m.index
    end if
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Focus Indicator
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  public function getFocusIndicatorConfig(componentInfo as list.ComponentInfo, direction as integer, isFloatingFocus as boolean, isFromListScroll = false as boolean) as list.FocusIndicatorConfig

    info = m.getCellComponentInfo(componentInfo, isFromListScroll)

    rowIndex = m.viewManager.row = invalid ? - 1 : m.viewManager.row.index
    if info = invalid or info.component = invalid or m.settings = invalid
      ' ? "cannot get focus indicator componentInfo or componentInfo.component is invalid "; m.__classname
      return new list.FocusIndicatorConfig(rowIndex, m.index, [0, 0], [0, 0], m.settings, true)
    end if

    size = m.viewManager.getItemSize(info.contentIndex)
    translation = m.getFocusIndicatorTranslation(info, componentInfo, direction, isFloatingFocus)

    indicatorTranslation = [translation[0] + m.settings.feedbackOffsets[0], translation[1] + m.settings.feedbackOffsets[1]]

    indicatorSize = [size[0] + m.settings.feedbackOffsets[2] - m.settings.feedbackOffsets[0], size[1] + m.settings.feedbackOffsets[3] - m.settings.feedbackOffsets[1]]

    isHidden = getPath(m.viewManager.content, "isHidden", false)

    return new list.FocusIndicatorConfig(rowIndex, info.contentIndex, indicatorTranslation, indicatorSize, m.settings, isHidden)
  end function


  protected function getCellComponentInfo(componentInfo as list.ComponentInfo, isFromListScroll = false as boolean) as list.ComponentInfo
    return invalid
  end function

  protected function getFocusIndicatorTranslation(info as list.ComponentInfo, componentInfo as list.ComponentInfo, direction as integer, isFloatingFocus as boolean) as object
    return [0, 0]
  end function

end class
end namespace