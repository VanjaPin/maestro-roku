import "pkg:/source/roku_modules/log/LogMixin.brs"
import "pkg:/source/core/Utils.bs"
import "pkg:/source/view/NodeClass.bs"

namespace mv
  @node("mv_FontManager", "Node")
  class FontManager extends mv.NodeClass

    public settings = {}

    private cachedFonts = {}
    private fontLabel = createObject("roSGNode", "Label")

    function new()
      super("FontManager")
    end function

    ' /**
    '  * @member getFontWithKey
    '  * @memberof module:FontManager
    '  * @instance
    '  * @function
    '  * @description will get a font with the text ${familyName}${size}${bold}${italic}
    '  * @param {paramType} paramDescription
    '  * @returns {returnType} returnDescription
    '  */
    public function getFontWithKey(key as string) as dynamic
      font = m.cachedFonts[key]
      if font <> invalid
        return font
      end if
      parts = key.split(",")

      if parts <> invalid and parts.count() = 2
        return m.getfont(parts[0], parts[1].toInt())
      end if

      ' m.log.warn("could not get font", key, "error", error)
      return invalid
    end function

    function getLanguageCode()
      return m.getInstance("languageCode") ?? "en"
    end function

    public function getFont(name as string, size as integer) as dynamic
      if name = invalid or name.trim() = ""
        return invalid
      end if
      key = `${name},${size}`
      font = m.cachedFonts[key]

      if font = invalid
        font = CreateObject("roSGNode", "Font")
        if name.instr(".ttf") <> -1
          if name.endsWith(":")
            font.uri = "tmp:" + "/fonts/" + name.replace(":", "")
          else
            font.uri = "pkg:" + "/fonts/" + name
          end if
        else
          'it's a system font
          m.fontLabel.font = "font:" + name + "SystemFont"
          font = m.fontLabel.font
        end if

        if font <> invalid
          if size <> -1
            font.size = size
          end if
          m.cachedFonts[key] = font
        end if
      end if
      return font
    end function

  end class
end namespace
