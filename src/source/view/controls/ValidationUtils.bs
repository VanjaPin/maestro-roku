import "pkg:/source/core/BaseClass.bs"

namespace mv.controls

    class ValidationTypes
        numeric = "numeric"
        email = "email"
    end class

    class InputValidator extends mc.BaseClass
        '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        '++ Private Fields
        '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

        private validationTypes = new mv.controls.ValidationTypes()
        private validationData = { hasError: false, errorMessage: "" }

        '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        '++ Initialize
        '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

        function new()
            super("InputValidator")
            m.log = new log.Logger("InputValidator")
        end function

        '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        '++ Public Methods
        '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

        function validate(validatorType as string, value as string) as mc.types.assocarray
            return m.validateByType(validatorType, value)
        end function

        '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        '++ Private Methods
        '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        private function validateByType(validatorType as string, value as string)
            isValid = true
            if validatorType = m.validationTypes.numeric
                regex = createObject("roRegex", "^[0-9]+$", "i")
                isValid = regex.isMatch(value) and len(value) = 5:
                m.validationData.errorMessage = isValid ? "" : "Invalid.Must contain 5 digits."
            else if validatorType = m.validationTypes.email
                regex = createObject("roRegex", "^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$", "i")
                isValid = regex.isMatch(value)
                m.validationData.errorMessage = isValid ? "" : "Invalid email address."
            end if
            m.validationData.hasError = not isValid
            return m.validationData
        end function
    end class
end namespace
