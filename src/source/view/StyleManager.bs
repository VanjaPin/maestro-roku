import "pkg:/source/roku_modules/log/LogMixin.brs"
import "pkg:/source/core/Utils.bs"
import "pkg:/source/view/NodeClass.bs"
import "pkg:/source/core/JsonCombiner.bs"
import "pkg:/source/core/DebugTimer.bs"

namespace view
  @node("StyleManager", "Node")
  class StyleManager extends view.NodeClass

    private styles = {}
    private defaultLocale = "en"
    private cachedStyles = {}
    private jsonCombiner = new JsonCombiner()

    function new()
      super("StyleManager")
      m.log = new log.Logger("StyleManager")
      m.setStyleJson(invalid)
    end function

    public function setDefaultLocale(locale = "en" as string)
      m.defaultLocale = locale
    end function

    public function setStyleJson(json as types.assocarray)
      if isAACompatible(json)
        m.styles = json
      else
        m.styles = {}
      end if
      m.cachedStyles = {} ' we lazily pull out styles and parse them on demand
    end function

    ' loads the specified bundle file, with the required locale.
    ' bundle files contain json that can be used for views, with createViewsFromStyleJson method
    ' and/or other values which a view/screen might use.
    ' the bundle file contains one root json file, in english and optional additional locale files that override the default values
    ' the bundle file is a folder with extension .bundle, which contains json files as follows
    ' e.g. SettingsScreen bundle file
    ' pkg:/screens/SettingsScreen.bundle
    '   pkg:/screens/SettingsScreen.bundle/SettingsScreen.json - root style
    '   pkg:/screens/SettingsScreen.bundle/SettingsScreen.fr.json - overridden values for fr locale
    '   pkg:/screens/SettingsScreen.bundle/SettingsScreen.de.json - overridden values for de locale
    '
    ' @params {string} bundlePath of the root bundle
    ' @params {string} locale of the bundle, or invalid if the default (english)
    public function loadBundle(bundlePath as string, locale = invalid as string) as types.assocarray

      if locale = invalid
        locale = m.defaultLocale
      else
        locale = lcase(locale)
      end if
      styleKey = bundlePath + "_" + locale

      style = m.cachedStyles[styleKey]
      if style <> invalid
        m.log.info("bundle", styleKey, "was already in cache")
        return style
      end if

      timer = new utils.DebugTimer("load bundle :" + styleKey)
      bundleFilename = m.getBundleFilename(bundlePath, "en")
      json = m.loadJson(bundleFilename)

      if isAACompatible(json)
        if locale <> "en"
          localeBundleFilename = m.getBundleFilename(bundlePath, locale)
          localeJson = m.loadJson(localeBundleFilename)
          if isAACompatible(localeJson)
            json = m.jsonCombiner.combine(json, localeJson)
          else
            m.log.error("Could not load locale (", locale, ") style from ", bundlePath, "missing/corrupt file", localeBundleFilename)
          end if
        end if
        m.cachedStyles[styleKey] = m.resolveNestedStyles(json)
      else
        m.log.error("Could not load root bundle json (en) style from ", bundlePath, "missing/corrupt file", bundleFilename)
      end if

      timer.log("")
      return json
    end function

    private function getBundleFilename(path as string, locale = invalid as string) as string
      if path = invalid
        return ""
      end if

      if locale = invalid
        locale = m.defaultLocale
      end if

      if locale = "en"
        locale = ""
      end if

      if locale <> ""
        locale = lcase("." + locale)
      end if

      parts = path.split("/")
      lastPart = parts[parts.count() - 1]
      return path + "/" + lastPart.replace(".bundle", locale + ".json")
    end function

    ' /**
    '  * @member getStyle
    '  * @memberof module:StyleManager
    '  * @instance
    '  * @function
    '  * @description gets a maestro compliant style
    '  * @param {string} key
    '  * @returns {assocarray} style, marshalled for maestro compatible values, if a key is an assocarray with
    '  * @returns {boolean} isNested,internal key that indicates if this style is nested or not
    '  * @returns {boolean} style, marshalled for maestro compatible values, if a key is an assocarray with
    '  */
    public function getStyle(key as string, isNested = false as boolean) as dynamic
      if key = invalid or key.trim() = ""
        return {}
      end if

      style = m.cachedStyles[key]

      if style = invalid
        style = m.parseStyle(key)
        if style <> invalid
          m.cachedStyles[key] = style
        else if isNested
          return invalid
        else
          style = {}
        end if
      end if

      return style
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Private Methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function loadJson(path as string) as types.assocarray
      text = readAsciiFile(path)
      return text = invalid ? invalid : parseJson(text)
    end function


    private function parseStyle(key as string)
      style = getPath(m.styles, key)

      if style <> invalid
        style = m.resolveNestedStyles(style)
      end if
      return style
    end function

    private function resolveNestedStyles(style as string)
      if isAACompatible(style)
        if style["$extends"] <> invalid
          baseStyle = m.getStyle(style["$extends"])
          if baseStyle <> invalid
            newStyle = {}
            newStyle.append(baseStyle)
            for each key in style
              if key <> "$extends"
                newStyle[key] = m.resolveNestedStyleValue(style[key])
              end if
            end for
            return newStyle
          else
            m.log.warn("Could not find extended style", style["$extends"])
          end if
        else
          for each key in style
            style[key] = m.resolveNestedStyleValue(style[key])
          end for
        end if
      else if isArray(style)
        n = style.count() - 1
        for i = 0 to n
          style[i] = m.resolveNestedStyleValue(style[i])
        end for
      end if
      return style
    end function

    private function resolveNestedStyleValue(value as dynamic) as dynamic
      if isString(value) and len(value) > 1 and left(value, 1) = "~"
        nestedKey = right(value, len(value) - 1)
        nestedStyle = m.getStyle(nestedKey, true)
        if nestedStyle = invalid
          m.log.warn("Could not find nested style with key", nestedKey)
          'leave the value as is - it _might_ not have been a nested style
          nestedStyle = value
        end if
        return nestedStyle
      else if isArray(value) or isAACompatible(value)
        return m.resolveNestedStyles(value)
      else
        return value
      end if
    end function
  end class
end namespace