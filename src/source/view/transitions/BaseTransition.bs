import "pkg:/source/roku_modules/log/LogMixin.brs"
import "pkg:/source/core/Tasks.bs"
import "pkg:/source/core/IOC.bs"
import "pkg:/source/view/NodeClass.bs"
import "pkg:/components/view/mixin/FocusMixin.bs"

namespace transitions
  ' /**
  '  * @module BaseTransition
  '  * @description BaseTransition component. extend this to create other transitions
  '  */
  class BaseTransition extends view.NodeClass

    private top
    public progress = 0.0

    protected source
    protected target
    protected owner

    function new(name as string)
      super(name)
    end function

    public function execute(owner as types.node, source as types.node, target as types.node, animated = true as boolean)
      m.owner = owner
      m.source = source
      m.target = target
      m.top.progress = 0
      m.top.state = "started"

      if m.target <> invalid
        m.target@.onAddedToAggregateView(owner)
        'we want to clear out the view's vis, so the initialize
        'won't trigger show callbacks prematurely
        m.target.visible = false
        m.target.isShown = false

        if not m.target.isInitialized
          m.initializeView(m.target)
        end if
      end if

      m.owner.currentView = m.target
      if animated = true
        m.begin()
      else
        m.transitionWithoutAnimation()
      end if
    end function

    protected function begin()
      'override me
    end function

    protected function finish()
      m.top.progress = 1
      m.top.state = "finished"

      if m.source <> invalid
        m.source@.onRemovedFromAggregateView(m.owner)
      end if

      if m.target <> invalid
        'bs:disable-next-line
        if m.owner.isAutoFocusEnabled and (m.owner.isFocused or m.owner.isChildFocused)
          view.setFocus(m.target)
        end if
      end if
    end function

    protected function initializeView(v as types.node, args = invalid as types.assocarray)
      if v <> invalid
        v@._initialize(args)
      else
        m.log.error("view is invalid!")
      end if
    end function

    protected function transitionWithoutAnimation()
      if m.source <> invalid and not m.source.isSameNode(m.target)
        m.source.visible = false
        m.owner.removeChild(m.source)
      end if
      if m.target <> invalid
        m.log.method("m.target is valid. isShown", m.owner.isShown, "m.target", m.target.id)

        m.owner.appendChild(m.target)

        if m.owner.isShown
          m.target.visible = true
        end if

      end if

      m.finish()
    end function

  end class
end namespace