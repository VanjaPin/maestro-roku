import "pkg:/source/roku_modules/log/LogMixin.brs"
import "pkg:/source/core/Utils.bs"

namespace animations.utils
  function colorTo(target as types.node, duration as float, toValue as integer, start = true as boolean, delay = 0 as float) as animations.Fade
    anim = new animations.Color(target, duration, target.opacity, toValue, delay)
    if start
      anim.start()
    end if
    return anim
  end function
  function fadeTo(target as types.node, duration as float, toValue as float, start = true as boolean, delay = 0 as float) as animations.Fade
    anim = new animations.Fade(target, duration, target.opacity, toValue, delay)
    if start
      anim.start()
    end if
    return anim
  end function

  function scaleTo(target as types.node, duration as float, toValue as float, start = true as boolean, delay = 0 as float) as animations.Scale
    anim = new animations.Scale(target, duration, target.scale, toValue, delay)
    if start
      anim.start()
    end if
    return anim
  end function

  function moveTo(target as types.node, duration as float, toValue as float, start = true as boolean, delay = 0 as float) as animations.Move
    anim = new animations.Move(target, duration, target.translation, toValue, delay)
    if start
      anim.start()
    end if
    return anim
  end function

  function getDelta(fromValue as dynamic, toValue as dynamic) as dynamic
    if isPoint(fromValue) and isPoint(toValue)
      return abs((fromValue[0] + fromValue [1]) - (toValue[0] + toValue[1]))
    else if isNumber(fromValue) and isNumber(toValue)
      return abs(fromValue - toValue)
    else
      return 0
    end if
  end function


  function interpolateHexColors(hexColor1 as string, hexColor2 as string, fraction as float)
    c1 = animations.private.convertHexToNumber(hexColor1)
    c2 = animations.private.convertHexToNumber(hexColor2)
    return animations.private.interpolateColors(c1, c2, fraction)
  end function
end namespace

namespace animations.private

  'FIXME: this is wip - still not correct
  function convertHexToNumber(hex as string)
    hex = hex.replace("#", "")
    return val(hex, 16)
  end function

  function interpolateColors(color1 as integer, color2 as integer, p as float)
    rgb1 = animations.private.toRGBArray(color1)
    rgb2 = animations.private.toRGBArray(color2)

    q = 1 - p
    rr = cInt(rgb1[0] * p + rgb2[0] * q)
    rg = cInt(rgb1[1] * p + rgb2[1] * q)
    rb = cInt(rgb1[0] * p + rgb2[2] * q)

    return stri((rr << 16) + (rg << 8) + rb, 16)
  end function

  function toRGBArray(rgb as integer)
    r = rgb >> 16
    g = (rgb >> 8) mod 256
    b = rgb mod 256

    return [r, g, b]
  end function

end namespace

namespace animations
  class AnimationBase
    public node as types.node
    public repeat as boolean
    public control as string
    public fromValue as dynamic
    public toValue as dynamic

    protected parentAnimation as animations.AnimationBase
    protected log as log.Logger
    protected target as types.node

    function new(name as string, target as types.node)
      m.log = new log.Logger(name)
      if target = invalid or target.id = invalid or target.id = ""
        m.log.error("target must be a valid node with an id")
      end if
      m.target = target
    end function

    function setControl(control as string)
      m.control = control
      m.node.control = control
    end function

    function start(resume = false as boolean)
      m.setControl(resume ? "resume" : "start")
    end function

    function pause()
      m.setControl("pause")
    end function

    function stop(finish = false as boolean)
      m.setControl(finish ? "finish": "stop")
    end function

    function setRepeat(repeat as boolean)
      m.repeat = repeat
      m.node.repeat = repeat
    end function

    public function destroy()
      if m.node <> invalid
        m.node.getParent().removeChild(m.node)
      end if
    end function

    public function clone()
      'override me
      return invalid
    end function

  end class

  class AbstractAnimation extends animations.AnimationBase
    public target
    public interpolator
    private keys = [0, 1]
    private keyValues = invalid
    private easeFunction = "linear"
    private delay = 0
    private field = invalid
    public duration = 0.5
    private fractionValueObserver
    public animateFromCurrentValue = false 'if true, the animation will always take the current value, irrespective of from value


    function new(target as types.node, field as string, duration as float, fromValue as dynamic, toValue as dynamic, name = "AbstractAnimation" as string, delay = 0 as float)
      super(name, target)
      if target = invalid or target.id = invalid or target.id = ""
        m.log.error("target must be a valid node with an id")
      end if

      m.target = target
      m.duration = duration
      m.fromValue = fromValue
      m.toValue = toValue
      m.field = field
      m.createAnimationNode()
      m.setDelay(delay)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ public api
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function setEaseFunction(easeFunction as dynamic)
      m.easeFunction = easeFunction
      m.node.easeFunction = easeFunction
    end function

    function setAnimateFromCurrentValue(value as dynamic)
      m.animateFromCurrentValue = value
    end function

    function setKeys(keys as types.array, keyValues as types.array)
      if not isArray(keys)
        m.log.error("received invalid keys", keys)
      end if
      if not isArray(keyValues)
        m.log.error("received invalid keys", keyValues)
      end if
      if keys.count() <> keyValues.count()
        m.log.error("keys have different count from keyValues", keys.count(), keyValues.count())
      end if

      for each value in keyValues
        if not m.isValidValue(value)
          m.log.error("tried to set illegal value in keyValues value: ", value)
        end if
      end for
      m.interpolator.key = keys
      m.interpolator.keyValue = keyValues
    end function


    protected function isValidValue(toValue as dynamic) as boolean
      return false
    end function

    function syncStartKeys()
      if m.interpolator.keyValue <> invalid and m.interpolator.keyValue.count() > 0
        m.log.info("setting start keys to ")
        setNodeArrayValue(m.interpolator, "keyValue", 0, m.target[m.field])
      end if
    end function

    override function start(resume = false as boolean)
      if m.fractionValueObserver <> invalid
        m.fractionValueObserver.reset()
      end if

      if m.animateFromCurrentValue
        m.syncStartKeys()
      end if
      super.start(resume)
    end function

    function setDuration(duration as float)
      m.duration = duration
      if m.node <> invalid
        m.node.duration = duration
      end if
    end function

    function setDelay(delay as float)
      m.delay = delay
      if m.node <> invalid
        m.node.delay = delay
      end if
    end function

    function animateTo(toValue as dynamic, duration = invalid as float)

      if m.node.control = "start" or m.node.control = "resume"
        wasPlaying = true
        m.pause()
      else
        wasPlaying = false
      end if

      if duration = invalid
        duration = m.duration
      end if
      m.setDuration(duration)
      m.setFromToValue(m.target[m.field], toValue)
      if wasPlaying = true
        m.start()
      end if
    end function

    ' /**
    '  * @member modifyAnimateTo
    '  * @memberof module:animations.AbstractAnimation
    '  * @instance
    '  * @function
    '  * @description estimates how much time is required to complete the animation given the current delta particularly useful when having to switch destination on the fly.
    '  * @param {any} toValue - the final value
    '  * @param {float} stepSpeed - how long the animation would normally take
    '  * @param {string} stepUnit - "pixel" (100 pixels), "float", 0.1
    '  */
    function animateToWithSpeed(toValue as dynamic, stepSpeed as float, stepUnit = "pixel" as string)
      delta = animations.utils.getDelta(m.target[m.field], toValue)
      if stepUnit = "pixel"
        steps = delta / 100
      else
        steps = delta * 0.1
      end if
      m.animateTo(toValue, steps * stepSpeed)
    end function

    function setFromToValue(fromValue as dynamic, toValue as dynamic)
      if m.isValidValue(toValue) and m.isValidValue(fromValue)
        m.fromValue = fromValue
        m.toValue = toValue
        ' m.log.info("fromValue", fromValue, "toValue", toValue)
        m.interpolator.keyValue = [fromValue, toValue]
      else
        m.log.error("tried to set invalid fromValue or toValue [", fromValue, ",", toValue, "]")
      end if
    end function

    function jumpToEnd()
      m.stop()
      m.target[m.field] = m.toValue
    end function

    function observeFraction(callback as function, scope = invalid as dynamic)
      tasks.observeNodeField(m.interpolator, "fraction", callback, "value", false, scope)
    end function

    function observeState(callback as function, scope = invalid as dynamic)
      tasks.observeNodeField(m.node, "state", callback, "value", false, scope)
    end function

    function unobserveFraction()
      tasks.cleanNodeObserver(m.interpolator, "fraction")
    end function

    function unobserveState()
      tasks.cleanNodeObserver(m.node, "state")
    end function

    function onFraction(fraction as float, func as function, scope = invalid as dynamic)
      if m.fractionValueObserver = invalid
        if scope = invalid
          scope = getTopM()
        end if
        m.fractionValueObserver = new tasks.ValueObserver(m.interpolator, "fraction", scope)
      end if
      m.fractionValueObserver.onValue(fraction, func, ">=")
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ private impl
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function createAnimationNode()
      m.node = createObject("roSGNode", "Animation")
      animId = animations.getAnimationKeyId()
      'bs:disable-next-line
      m.node.id = `${m.target.id}_${m.field}_${animId}`
      m.node.duration = m.duration
      m.node.delay = m.delay
      m.node.easeFunction = m.easeFunction
      m.node.repeat = m.repeat
      m.target.appendChild(m.node)
      m.createInterpolator()
      m.node.appendChild(m.interpolator)
    end function

    protected function createInterpolator()
      m.log.error("createInterpolator must be implemented")
    end function

    protected function _createInterpolator(interpolatorType as string)
      m.interpolator = createObject("roSGNode", interpolatorType)
      animId = animations.getAnimationKeyId()
      'bs:disable-next-line
      m.interpolator.id = `${m.target.id}_i_${m.field}_${animId}`
      m.interpolator.fieldToInterp = `${m.target.id}.${m.field}`
      m.setKeys([0, 1], [m.fromValue, m.toValue])
    end function

  end class

  class Parallel extends animations.AnimationBase
    public animations
    public delay = 0
    public animateFromCurrentValue = false 'if true, the animation will always take the current value, irrespective of from value

    function new(target as types.node, anims = invalid as types.array, repeat = false as boolean, delay = 0 as float)
      super("ParallelAnimation", target)
      m.node = createObject("roSGNode", "ParallelAnimation")
      animId = animations.getAnimationKeyId()
      m.node.delay = delay
      'bs:disable-next-line
      m.node.id = `${m.target.id}_${m.parallel}_${animId}`
      m.setRepeat(repeat)
      if animations <> invalid
        m.addAnimations(animations)
      end if
      m.target.appendChild(m.node)
    end function

    function setAnimateFromCurrentValue(value as dynamic)
      m.animateFromCurrentValue = value
      for each animation in m.animations
        animation.setAnimateFromCurrentValue(value)
      end for
    end function

    override function syncStartKeys()
      for each animation in m.animations
        m.log.debug("setting animation start values for field ", animation.field)
        animation.syncStartKeys()
      end for
    end function

    override function start(resume = false as boolean)
      if m.animateFromCurrentValue
        m.syncStartKeys()
      end if
      super.start(resume)
    end function


    public override function clone()
      anims = []
      for each anim in m.animations
        anims.push(anim.clone())
      end for
      return new animations.Parallel(m.target, animations, m.repeat, m.delay)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ public api
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function addAnimations(anims as types.array)
      m.animations = []
      for each animation in anims
        if animation <> invalid and type(animation.node) = "roSGNode"
          animation.parentAnimation = m.node
          if m.delay <> 0
            animation.setDelay(m.delay)
          end if
          m.node.appendChild(animation.node)
          m.animations.push(animation)
        end if
      end for
    end function

    public override function destroy()
      for each animation in m.animations
        animation.destroy()
      end for
    end function

    function observeState(callback as function, scope = invalid as dynamic)
      tasks.observeNodeField(m.node, "state", callback, "value", false, scope)
    end function

    function unobserveState()
      tasks.cleanNodeObserver(m.node, "state")
    end function

    function jumpToEnd()
      for each animation in m.animations
        animation.jumpToEnd()
      end for
    end function
  end class

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ animation subclasses
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  class Scale extends animations.AbstractAnimation
    function new(target as types.node, duration as float, fromValue as types.array, toValue as types.array, delay = 0 as float)
      super(target, "scale", duration, fromValue, toValue, "ScaleAnimation", delay)
    end function

    protected override function createInterpolator()
      m._createInterpolator("Vector2DFieldInterpolator")
    end function

    protected override function isValidValue(value as types.array) as boolean
      return isPoint(value)
    end function

    public override function clone()
      return new animations.Scale(m.target, m.duration, m.fromValue, m.toValue, m.delay)
    end function

  end class

  class Fade extends animations.AbstractAnimation
    function new(target as types.node, duration as float, fromValue as float, toValue as float, delay = 0 as float)
      super(target, "opacity", duration, fromValue, toValue, "FadeAnimation", delay)
    end function

    protected override function createInterpolator()
      m._createInterpolator("FloatFieldInterpolator")
    end function

    protected override function isValidValue(value as float) as boolean
      return isNumber(value) and value >= 0 and value <= 1
    end function

    public override function clone()
      return new animations.Fade(m.target, m.duration, m.fromValue, m.toValue, m.delay)
    end function
  end class

  class Color extends animations.AbstractAnimation
    function new(target as types.node, duration as float, fromValue as float, toValue as float, delay = 0 as float)
      super(target, "opacity", duration, fromValue, toValue, "ColorAnimation", delay)
    end function

    protected override function createInterpolator()
      m._createInterpolator("ColorFieldInterpolator")
    end function

    'TODO for now only takes color (int values
    protected override function isValidValue(value as dynamic) as boolean
      return isNumber(value)
    end function

    public override function clone()
      return new animations.Color(m.target, m.duration, m.fromValue, m.toValue, m.delay)
    end function
  end class

  class Move extends animations.AbstractAnimation
    function new(target as types.node, duration as float, fromValue as types.array, toValue as types.array, delay = 0 as float)
      super(target, "translation", duration, fromValue, toValue, "MoveAnimation", delay)
    end function

    protected override function createInterpolator()
      m._createInterpolator("Vector2DFieldInterpolator")
    end function

    protected override function isValidValue(value as types.array) as boolean
      return isPoint(value)
    end function

    public override function clone()
      return new animations.Move(m.target, m.duration, m.fromValue, m.toValue, m.delay)
    end function

  end class

  class Size extends animations.AbstractAnimation
    private wAnim as types.node
    private hAnim as types.node
    private pAnim as types.node

    function new(target as types.node, duration as float, fromValue as types.array, toValue as types.array, delay = 0 as float)
      super(target, "size", duration, fromValue, toValue, "SizeAnimation", delay)
      m.wAnim = new animations.FloatValue(target, "width", duration, fromValue[0], toValue[0])
      m.hAnim = new animations.FloatValue(target, "height", duration, fromValue[1], toValue[1])
      m.pAnim = new animations.Parallel(target, [
        m.wAnim,
        m.hAnim
      ])
      m.node = m.pAnim.node

    end function

    public override function clone()
      return new animations.Size(m.target, m.duration, m.fromValue, m.toValue, m.delay)
    end function

    private override function createAnimationNode()
    end function

    override function setEaseFunction(easeFunction as dynamic)
      m.easeFunction = easeFunction
      m.wAnim.setEaseFunction(easeFunction)
      m.hAnim.setEaseFunction(easeFunction)
    end function

    override function setKeys(keys as types.array, keyValues as types.array)
      wKeys = []
      hKeys = []
      for each keyValue in keyValues
        wKeys.push(keyValue[0])
        hKeys.push(keyValue[1])
      end for
      m.wAnim.setKeys(keys, wKeys)
      m.hAnim.setKeys(keys, hKeys)

    end function

    override function setDuration(duration as float)
      m.wAnim.setDuration(duration)
      m.hAnim.setDuration(duration)
      m.duration = duration
    end function

    protected override function isValidValue(value as types.array) as boolean
      return isPoint(value)
    end function

    override function setDelay(delay as float)
      m.delay = delay
      if m.wAnim <> invalid
        m.wAnim.setDelay(delay)
        m.hAnim.setDelay(delay)
      end if
    end function

    override function animateTo(toValue as dynamic, duration = invalid as float)
      m.wAnim.animateTo(toValue[0], duration)
      m.hAnim.animateTo(toValue[1], duration)
    end function

    override function animateToWithSpeed(toValue as dynamic, stepSpeed as float, stepUnit = "pixel" as string)
      m.wAnim.animateToWithSpeed(toValue[0], stepSpeed, stepUnit)
      m.hAnim.animateToWithSpeed(toValue[1], stepSpeed, stepUnit)
    end function

    override function setFromToValue(fromValue as dynamic, toValue as dynamic)
      m.wAnim.setFromToValue(fromValue[0], toValue[0])
      m.hAnim.setFromToValue(fromValue[1], toValue[1])
    end function

    override function observeFraction(callback as function, scope = invalid as dynamic)
      m.wAnim.observeFraction(callback, scope)
    end function

    override function unobserveFraction()
      m.wAnim.unobserveFraction()
    end function
  end class

  class KenBurns extends animations.AbstractAnimation
    private maxScale = 0.0
    private mAnim as types.node
    private sAnim as types.node
    private pAnim as types.node

    function new(target as types.node, duration as float, maxScale as float, delay = 0 as float)
      super(target, "size", duration, invalid, invalid, "SizeAnimation", delay)
      m.maxScale = maxScale
      m.sAnim = animations.utils.scaleTo(target, duration, target.scale, false, delay)
      m.mAnim = animations.utils.moveTo(target, duration, target.translation, false, delay)
      m.pAnim = new animations.Parallel(target, [
        m.sAnim,
        m.mAnim
      ])
      m.node = m.pAnim.node
    end function

    public override function clone()
      return new animations.KenBurns(m.target, m.duration, m.maxScale, m.delay)
    end function

    private override function createAnimationNode()
    end function

    override function setEaseFunction(easeFunction as dynamic)
      m.easeFunction = easeFunction
      m.sAnim.setEaseFunction(easeFunction)
      m.mAnim.setEaseFunction(easeFunction)
    end function

    override function setKeys(keys as types.array, keyValues as types.array)
    end function

    override function setDuration(duration as float)
      m.sAnim.setDuration(duration)
      m.mAnim.setDuration(duration)
      m.duration = duration
    end function

    override function setDelay(delay as float)
      m.delay = delay
      if m.sAnim <> invalid
        m.sAnim.setDelay(delay)
        m.mAnim.setDelay(delay)
      end if
    end function

    override function animateTo(toValue as dynamic, duration = invalid as float)
      m.sAnim.animateTo(toValue[0], duration)
      m.mAnim.animateTo(toValue[1], duration)
    end function

    override function animateToWithSpeed(toValue as dynamic, stepSpeed as float, stepUnit = "pixel" as string)
      m.sAnim.animateToWithSpeed(toValue[0], stepSpeed, stepUnit)
      m.mAnim.animateToWithSpeed(toValue[1], stepSpeed, stepUnit)
    end function

    override function setFromToValue(fromValue as dynamic, toValue as dynamic)
    end function

    override function observeFraction(callback as function, scope = invalid as dynamic)
      m.sAnim.observeFraction(callback, scope)
    end function

    override function unobserveFraction()
      m.sAnim.unobserveFraction()
    end function

    override function jumpToEnd()
      for each animation in [m.sAnim, m.mAnim]
        animation.jumpToEnd()
      end for
    end function

    function ceil(number as float) as integer
      return - int(- number)
    end function

    function floor(number as float) as integer
      return int(number)
    end function

    override function start()
      super.start()
      endScale = clamp(rnd(0) + 1, 1.1, m.maxScale)
      startScale = clamp(rnd(0) + 1, 1.1, m.maxScale)
      fromScale = [
        startScale,
        startScale
      ]
      toScale = [
        endScale,
        endScale
      ]
      m.target.scale = fromScale
      m.sAnim.setFromToValue(fromScale, toScale)
      corners = [{ x: 0, y: 0 }, { x: 1, y: 0 }, { x: 0, y: 1 }, { x: 1, y: 1 }]

      if m.target.width <> invalid
        w = m.target.width
      else
        w = 1
      end if
      if m.target.height <> invalid
        h = m.target.height
      else
        h = 1
      end if

      sw = w - h * startScale
      sh = h - w * startScale
      xAmount = (rnd(sw) - sw / 2) * 0.25
      yAmount = (rnd(sh) - sh / 2) * 0.25
      'Pick the first corner. Remove it from the array
      choice = m.floor(rnd(3))
      sCorner = corners[choice]
      'Pick the second corner from the subset
      corners.delete(choice)
      eCorner = corners[m.floor(rnd(2))]
      fromPos = [
        sCorner.x * xAmount
        sCorner.y * yAmount
      ]
      sw = w - h * endScale
      sh = h - w * endScale
      xAmount = (rnd(sw) - sw / 2) * 0.25
      yAmount = (rnd(sh) - sh / 2) * 0.25

      toPos = [
        eCorner.x * xAmount
        eCorner.y * yAmount
      ]
      fromPos = [clamp(fromPos[0], -30, 0), clamp(fromPos[1], -30, 0)]
      m.target.translation = fromPos
      m.mAnim.setFromToValue(fromPos, toPos)
    end function
  end class


  class FloatValue extends animations.AbstractAnimation
    function new(target as types.node, field as string, duration as float, fromValue as float, toValue as float, delay = 0 as float)
      super(target, field, duration, fromValue, toValue, "FloatAnimation", delay)
    end function

    protected override function createInterpolator()
      m._createInterpolator("FloatFieldInterpolator")
    end function

    protected override function isValidValue(value as float) as boolean
      return isNumber(value)
    end function

    public override function clone()
      return new animations.FloatValue(m.target, m.duration, m.fromValue, m.toValue, m.delay)
    end function

  end class


  class VectorValue extends animations.AbstractAnimation
    function new(target as types.node, field as string, duration as float, fromValue as types.array, toValue as types.array, delay = 0 as float)
      super(target, field, duration, fromValue, toValue, "VectorValueAnimation", delay)
    end function

    protected override function createInterpolator()
      m._createInterpolator("Vector2DFieldInterpolator")
    end function

    protected override function isValidValue(value as types.array) as boolean
      return isPoint(value)
    end function

    public override function clone()
      return new animations.VectorValue(m.target, m.duration, m.fromValue, m.toValue, m.delay)
    end function

  end class

  class Sequence extends animations.AnimationBase
    public animations
    public delay = 0
    public animateFromCurrentValue = false 'if true, the animation will always take the current value, irrespective of from value

    function new(target as types.node, anims = invalid as types.array, repeat = false as boolean, delay = 0 as float)
      super("SequenceAnimation", target)
      m.node = createObject("roSGNode", "SequentialAnimation")
      animId = animations.getAnimationKeyId()
      'bs:disable-next-line
      m.node.id = `${m.target.id}_${m.sequence}_${animId}`
      m.setRepeat(repeat)
      if animations <> invalid
        m.addAnimations(animations)
      end if
      m.setDelay(delay)
      m.target.appendChild(m.node)
    end function

    function setAnimateFromCurrentValue(value as dynamic)
      m.animateFromCurrentValue = value
      for each animation in m.animations
        animation.setAnimateFromCurrentValue(value)
      end for
    end function

    override function syncStartKeys()
      for each animation in m.animations
        m.log.debug("setting animation start values for field ", animation.field)
        animation.syncStartKeys()
      end for
    end function

    override function start(resume = false as boolean)
      if m.animateFromCurrentValue
        m.syncStartKeys()
      end if

      super.start(resume)
    end function

    public override function clone()
      anims = []
      for each anim in m.animations
        anims.push(anim.clone())
      end for
      return new animations.Sequence(m.target, anims, m.repeat, m.delay)
    end function

    function setDelay(delay as float)
      m.delay = delay
      if m.animations.count() > 0
        m.animations[0].setDelay(delay)
      end if
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ public api
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function addAnimations(anims as types.array)
      m.animations = []
      for each animation in anims
        if animation <> invalid and type(animation.node) = "roSGNode"
          animation.parentAnimation = m.node
          if m.delay <> 0
            animation.setDelay(m.delay)
          end if
          m.node.appendChild(animation.node)
          m.animations.push(animation)
        end if
      end for
    end function

    public override function destroy()
      for each animation in m.animations
        animation.destroy()
      end for
    end function

    function observeState(callback as function, scope = invalid as dynamic)
      tasks.observeNodeField(m.node, "state", callback, "value", false, scope)
    end function

    function unobserveState()
      tasks.cleanNodeObserver(m.node, "state")
    end function

    function jumpToEnd()
      for each animation in m.animations
        animation.jumpToEnd()
      end for
    end function
  end class

  class SimpleKenBurns extends animations.AbstractAnimation
    private sAnim as types.node
    private mAnim as types.node
    private pAnim as types.node
    private scale = [1, 1]
    private movement = [0, 0]

    function new(target as types.node, duration as float, scale as types.array, movement as types.array, delay = 0 as float)
      super(target, "scale", duration, invalid, invalid, "SimpleKenBurnsAnimation", delay)
      m.scale = [scale, scale]
      m.movement = [target.width * movement[0], target.height * movement[1]]
      m.sAnim = animations.utils.scaleTo(target, duration, m.scale, false, delay)
      m.sAnim.easeFunction = "inQuad"
      m.mAnim = animations.utils.moveTo(target, duration, m.movement, false, delay)
      m.mAnim.easeFunction = "inQuad"
      m.pAnim = new animations.Parallel(target, [
        m.sAnim,
        m.mAnim
      ])
      m.node = m.pAnim.node
    end function

    public override function clone()
      return new animations.SimpleKenBurns(m.target, m.duration, m.scale, m.movement, m.delay)
    end function

    private override function createAnimationNode()
    end function

    override function setEaseFunction(easeFunction as dynamic)
      m.easeFunction = easeFunction
      m.sAnim.setEaseFunction(easeFunction)
      m.mAnim.setEaseFunction(easeFunction)
    end function

    override function setKeys(keys as types.array, keyValues as types.array)
    end function

    override function setDuration(duration as float)
      m.sAnim.setDuration(duration)
      m.mAnim.setDuration(duration)
      m.duration = duration
    end function

    override function setDelay(delay as float)
      m.delay = delay
      if m.sAnim <> invalid
        m.sAnim.setDelay(delay)
        m.mAnim.setDelay(delay)
      end if
    end function

    override function animateTo(toValue as dynamic, duration = invalid as float)
      m.log.error("not supported")
    end function

    override function animateToWithSpeed(toValue as dynamic, stepSpeed as float, stepUnit = "pixel" as string)
      m.log.error("not supported")
    end function

    override function setFromToValue(fromValue as dynamic, toValue as dynamic)
      m.log.error("not supported")
    end function

    override function observeFraction(callback as function, scope = invalid as dynamic)
      m.sAnim.observeFraction(callback, scope)
    end function

    override function unobserveFraction()
      m.sAnim.unobserveFraction()
    end function

    override function jumpToEnd()
      for each animation in [m.sAnim, m.mAnim]
        animation.jumpToEnd()
      end for
    end function

  end class
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ private utils
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


  function getAnimationKeyId()
    if m.global.__m_animKey = invalid
      m.global.addFields({ __m_animKey: 0 })
    end if
    m.global.__m_animKey++
    return m.global.__m_animKey
  end function
end namespace