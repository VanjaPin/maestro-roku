import "pkg:/source/tests/BaseTestSuite.spec.bs"
import "pkg:/source/core/Tasks.bs"

namespace tests
  @suite("Tasks tests")
  class TasksTests extends tests.BaseTestSuite

    protected override function beforeEach()
      super.beforeEach()
      'bs:disable-next-line
      tests.setNodeLogger()
      m.global.removeField("taskUsage")
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("createTask")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("does not fail on undefined field args")
    function _()
      'bs:disable-next-line
      t = mc.tasks.createTask("mc_RequestTask", fields, m.taskCallback, false, "none", m)
      m.assertSubType(t, "mc_RequestTask")
    end function

    @it("does not fail on illegal field args")
    @params(invalid)
    @params("illegal")
    @params([])
    function _(fields)
      t = mc.tasks.createTask("mc_RequestTask", fields, m.taskCallback, false, "none", m)
      m.assertSubType(t, "mc_RequestTask")
    end function

    @it("creates a task and passes it the args")
    function _()
      fields = {
        "fv1": "a"
        "fv2": "b"
      }

      t = mc.tasks.createTask("mc_RequestTask", fields, m.taskCallback, false, "none", m)
      m.assertSubType(t, "mc_RequestTask")
      m.assertEqual(t.args.fv1, "a")
      m.assertEqual(t.args.fv2, "b")
      m.assertEqual(t.control, "init")

    end function

    @it("creates a task with the passed args")
    function _()
      fields = {
        args: {
          "fv1": "d"
          "fv2": "e"
        }
      }

      t = mc.tasks.createTask("mc_RequestTask", fields, m.taskCallback, false, "none", m)
      m.assertSubType(t, "mc_RequestTask")
      m.assertEqual(t.args.fv1, "d")
      m.assertEqual(t.args.fv2, "e")
      m.assertEqual(t.control, "init")
    end function

    @it("starts a task")
    function _()
      fields = {
        "fv1": "a"
        "fv2": "b"
      }

      t = mc.tasks.createTask("mc_RequestTask", fields, m.taskCallback, true, "none", m)
      m.assertSubType(t, "mc_RequestTask")
      m.assertEqual(t.args.fv1, "a")
      m.assertEqual(t.args.fv2, "b")
      m.assertEqual(t.control, "run")
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("onTaskStateChange")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("sets track usage when state is run")
    function _()
      task = { "id": "task" }
      m.expectCalled(task.subType(), "mc_RequestTask")

      mc.tasks.onTaskStateChange("run", task)
      m.assertEqual(m.global.taskUsage["mc_RequestTask"], 1)
    end function

    @it("updates count when state is run and task is already tracked")
    function _()
      task = { "id": "task" }
      mc.setOrAddNodeField(m.global, "taskUsage", { "mc_RequestTask": 1 })
      m.expectCalled(task.subType(), "mc_RequestTask")

      mc.tasks.onTaskStateChange("run", task)
      m.assertEqual(m.global.taskUsage["mc_RequestTask"], 2)
    end function

    @it("update tracking usage count when state is done or stop")
    @params("done")
    @params("stop")
    function _(state)
      task = { "id": "task", _mIsRunning: true }
      mc.setOrAddNodeField(m.global, "taskUsage", { "mc_RequestTask": 2 })

      m.expectCalled(task.subType(), "mc_RequestTask")

      mc.tasks.onTaskStateChange(state, task)
      m.assertEqual(m.global.taskUsage["mc_RequestTask"], 1)
    end function

    @it("removes entries from taskUsage if there are no more entries and state is done or stop")
    @params("done")
    @params("stop")
    function _(state)
      task = { "id": "task", _mIsRunning: true }
      taskUsage = mc.createSGNode("Node")
      mc.setOrAddNodeField(taskUsage, "mc_RequestTask", 1)
      mc.setOrAddNodeField(m.global, "taskUsage", taskUsage)

      m.expectCalled(task.subType(), "mc_RequestTask")

      mc.tasks.onTaskStateChange(state, task)
      m.assertInvalid(m.global.taskUsage["mc_RequestTask"])
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("waitAFrame")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("creates a timer for waiting")
    @params(0.01)
    @params(0.02)
    @params(5)
    function _(duration)

      timer = mc.tasks.waitAFrame(m.taskCallback, duration)

      m.assertSubType(timer, "Timer")
      m.assertEqual(`${timer.duration}`, `${duration}`)
      m.assertEqual(timer.control, "start")
      m.assertTrue(timer.isFrameTimer)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ utils
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function taskCallback()
    end function

  end class

  function setNodeLogger()
    m.log = new log.Logger("TasksTests")
  end function
end namespace
