namespace tests
  @suite("Serialization tests")
  class SerializationTests extends tests.BaseTestSuite

    private Serialization

    protected override function setup()
      super.setup()
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("isSerializable")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("correctly identifies non serializable objects")
    @params(invalid)
    @params([])
    @params(1)
    @params("1")
    @params({})
    @params({ isSerializable: false })
    @params({ isSerializable: true })
    @params({ isSerializable: true, serialize: "thing" })
    @params({ isSerializable: true, deSerialize: "thing" })
    @params("#RBSNode")
    function _(value)
      m.assertFalse(utils.Serialization.isSerializable(value))

    end function

    @it("correctly identifies serializable aas")
    function _()
      value = new tests.TestSerializable("test")
      m.assertTrue(utils.Serialization.isSerializable(value))
    end function

    @it("correctly identifies serializable nodes")
    function _()
      node = createSGNode("ContentNode")
      setOrAddNodeField(node, "isSerializable", true)
      m.assertTrue(utils.Serialization.isSerializable(node))
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("serialize")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("returns invalid for non serializable types")
    @params(invalid)
    @params([])
    @params(1)
    @params("1")
    @params({})
    @params({ isSerializable: false })
    @params({ isSerializable: true })
    @params({ isSerializable: true, serialize: "thing" })
    @params({ isSerializable: true, deSerialize: "thing" })
    @params("#RBSNode")
    function _(value)
      m.assertInvalid(utils.Serialization.serialize(value))
    end function

    @it("serializes an aa")
    function _()
      value = new tests.TestSerializable("test")
      json = utils.Serialization.serialize(value)

      m.assertEqual(json, {
        "name": "test"
      })
    end function

    @it("serializes an a map")
    function _()
      value = createSGNode("Map")
      value.id = "parent"
      value@.set("one", "1")
      value@.set("two", "2")
      json = utils.Serialization.serialize(value)

      m.assertEqual(json, {
        _serializationType: "Map"
        "id": "parent"
        "data": {
          "one": "1"
          "two": "2"
        }
      })
    end function

    @it("serializes an array")
    function _()
      value = createSGNode("Array")
      value.id = "parent"
      value@.push("one")
      value@.push("two")
      json = utils.Serialization.serialize(value)

      m.assertEqual(json, {
        id: "parent"
        items: ["one", "two"]
        _serializationType: "Array"
      })
    end function

    @it("serializes a map containing nodes")
    function _()
      value = createSGNode("Map")
      value.id = "parent"
      childValue = createSGNode("Map")
      childValue.id = "child"
      childValue@.set("one", "1")
      childValue@.set("two", "2")
      value@.set("child", childValue)

      json = utils.Serialization.serialize(value)

      m.assertEqual(json, {
        _serializationtype: "Map"
        id: "parent"
        data: {
          child: {
            id: "child"
            _serializationtype: "Map"
            data: {
              one: "1"
              two: "2"
            }
          }
        }
      })
    end function

    @it("serializes an array contaning a node")
    function _()
      value = createSGNode("Array")
      value.id = "parent"
      childValue = createSGNode("Map")
      childValue@.push("one")
      childValue@.push("two")
      childValue.id = "child"
      value@.push(childValue)
      json = utils.Serialization.serialize(value)

      m.assertEqual(json, {
        _serializationtype: "Array"
        id: "parent"
        items: [
          {
            _serializationtype: "Map"
            id: "child"
            data: {
            }
          }
        ]
      })
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("deSerialize")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("returns invalid for deserializing into non serializable types")
    @params(invalid)
    @params([])
    @params(1)
    @params("1")
    @params({})
    @params({ isSerializable: false })
    @params({ isSerializable: true })
    @params({ isSerializable: true, serialize: "thing" })
    @params({ isSerializable: true, deSerialize: "thing" })
    @params("#RBSNode")
    function _(value)
      data = {}
      m.assertInvalid(utils.Serialization.deSerialize(data, value))
    end function

    @it("returns invalid for invalid data")
    @params(invalid)
    @params([])
    @params(1)
    @params("1")
    @params({})
    @params({ isSerializable: false })
    @params({ isSerializable: true })
    @params({ isSerializable: true, serialize: "thing" })
    @params({ isSerializable: true, deSerialize: "thing" })
    @params("#RBSNode")
    function _(data)
      m.assertInvalid(utils.Serialization.deSerialize(data))
    end function

    @it("deserializes INTO an existing Map")
    function _()
      value = createSGNode("Map")
      value.id = "parent"
      childValue = createSGNode("Map")
      childValue.id = "child"
      childValue@.set("one", "1")
      childValue@.set("two", "2")
      value@.set("child", childValue)

      newValue = createSGNode("Map")
      newValue.id = "parent"
      json = utils.Serialization.serialize(value)
      deserialized = utils.Serialization.deSerialize(json, newValue)
      m.assertSubType(deserialized, "Map")
      m.assertEqual(deserialized.id, "parent")
      m.assertEqual(deserialized, newValue)
      m.assertEqual(deserialized.length, 1)

      deserializedChild = deserialized@.get("child")
      m.assertSubType(deserializedChild, "Map")
      m.assertEqual(deserializedChild.id, "child")
      m.assertEqual(deserializedChild.length, 2)

      m.assertEqual(deserializedChild@.get("one"), "1")
      m.assertEqual(deserializedChild@.get("two"), "2")
      m.assertInvalid(deserializedChild@.get("_serializationType"))
    end function

    @it("deserializes creates a map, when required")
    function _()
      value = createSGNode("Map")
      value.id = "parent"
      childValue = createSGNode("Map")
      childValue.id = "child"
      childValue@.set("one", "1")
      childValue@.set("two", "2")
      value@.set("child", childValue)

      json = utils.Serialization.serialize(value)
      deserialized = utils.Serialization.deSerialize(json)
      m.assertSubType(deserialized, "Map")
      m.assertEqual(deserialized.id, "parent")
      m.assertEqual(deserialized.length, 1)

      deserializedChild = deserialized@.get("child")
      m.assertSubType(deserializedChild, "Map")
      m.assertEqual(deserializedChild.id, "child")
      m.assertEqual(deserializedChild.length, 2)

      m.assertEqual(deserializedChild@.get("one"), "1")
      m.assertEqual(deserializedChild@.get("two"), "2")
      m.assertInvalid(deserializedChild@.get("_serializationType"))
    end function

    @it("deserializes INTO an existing Array")
    function _()
      value = createSGNode("Array")
      value.id = "parent"
      childValue = createSGNode("Map")
      childValue.id = "child"
      childValue@.set("one", "1")
      childValue@.set("two", "2")
      value@.push(childValue)

      newValue = createSGNode("Array")
      newValue.id = "parent"
      json = utils.Serialization.serialize(value)
      deserialized = utils.Serialization.deSerialize(json, newValue)
      m.assertSubType(deserialized, "Array")
      m.assertEqual(deserialized.id, "parent")
      m.assertEqual(deserialized, newValue)
      m.assertEqual(deserialized.length, 1)

      deserializedChild = deserialized@.get(0)
      m.assertSubType(deserializedChild, "Map")
      m.assertEqual(deserializedChild.id, "child")
      m.assertEqual(deserializedChild.length, 2)

      m.assertEqual(deserializedChild@.get("one"), "1")
      m.assertEqual(deserializedChild@.get("two"), "2")
      m.assertInvalid(deserializedChild@.get("_serializationType"))
    end function

    @it("deserializes creates an Array, when required")
    function _()
      value = createSGNode("Array")
      value.id = "parent"
      childValue = createSGNode("Map")
      childValue.id = "child"
      childValue@.set("one", "1")
      childValue@.set("two", "2")
      value@.push(childValue)

      json = utils.Serialization.serialize(value)
      deserialized = utils.Serialization.deSerialize(json)
      m.assertSubType(deserialized, "Array")
      m.assertEqual(deserialized.id, "parent")
      m.assertEqual(deserialized.length, 1)

      deserializedChild = deserialized@.get(0)
      m.assertSubType(deserializedChild, "Map")
      m.assertEqual(deserializedChild.id, "child")
      m.assertEqual(deserializedChild.length, 2)

      m.assertEqual(deserializedChild@.get("one"), "1")
      m.assertEqual(deserializedChild@.get("two"), "2")
      m.assertInvalid(deserializedChild@.get("_serializationType"))
    end function

  end class
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ helper classes
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  class TestSerializable
    name = ""
    isSerializable = true

    function new(name)
      m.name = name
    end function

    public function serialize() as types.assocarray
      return {
        name: m.name
      }
    end function

    public function deserialize(data as types.assocarray)
      m.name = data.name
    end function

  end class
end namespace