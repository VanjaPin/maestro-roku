import "pkg:/source/roku_modules/log/LogMixin.brs"
import "pkg:/source/core/Collections.bs"
import "pkg:/source/core/Utils.bs"

namespace tasks

  function waitAFrame(callback as function, duration = 0.01 as float, sendMode = "none" as string, scope = invalid as object, parent = invalid as types.node) as types.node
    callbackName = getFunctionName(callback)
    if callbackName = invalid
      m.log.error("function ", callback, "does not exist, or is not in scope")
      return invalid
    end if

    if m.log <> invalid
      m.log.info("waiting", duration, "before invoking", callbackName)
    end if

    if parent = invalid
      parent = m.top.getScene()
    end if

    frameTimer = private.getMaestroPooledComponent("Timer")
    frameTimer.duration = duration
    frameTimer.repeat = false
    tasks.observeNodeField(frameTimer, "fire", callback, sendMode, true, scope)
    setOrAddNodeField(frameTimer, "isFrameTimer", true)
    frameTimer.control = "start"
    return frameTimer
  end function

  function cancelWaitTimer(timer as types.node)
    if timer <> invalid
      tasks.cleanNodeObserver(timer, "fire")
      timer.isWaitTimer = false
      timer.control = "stop"
      private.releaseMaestroPooledComponent(timer)
      if timer.getParent() <> invalid
        timer.getParent().removeChild(timer)
      end if
    end if
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ task support
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  ' /**
  '  * @member createTask
  '  * @memberof module:Tasks
  '  * @instance
  '  * @description description
  '  * @param {string} taskType
  '  * @param {assocarray} fields - fields to apply to task
  '  * @param {function} callback function to call when task has completed
  '  * @param {boolean} isRunning indicates if task should be started
  '  * @param {string} fieldName name of the field ot listen for on the task node
  '  * @param {string} sendMode ("value"|"node"|"both"|"none") - if both, then your function must have 2 params (result, node)
  '  * @param {object|invalid} scope - scope on which to execute the callback (default to node's m)
  '  * @returns {node|invalid} task, or invalid it could not be created
  '  */
  function createTask(taskType as string, fields as types.assocarray, callback = invalid as function, isRunning = true as boolean, sendMode = "value" as string, scope = invalid as object, fieldName = "output" as string)

    task = createSGNode(taskType)

    if task = invalid
      m.log.error("could not create task of type", taskType)
      return invalid
    end if

    if not isAACompatible(fields)
      fields = {}
    end if

    fields._observedField = fieldName

    setOrAddNodeFields(task, fields)
    if callback <> invalid
      tasks.observeNodeField(task, fieldName, callback, sendMode, true, scope)
    end if

    if isRunning
      task.control = "RUN"
    end if

    return task
  end function

  ' /**
  '  * @member observeNodeField
  '  * @memberof module:Tasks
  '  * @instance
  '  * @function
  '  * @description observes a node in a way that makes it clean and easy to get value back out
  '  * @param {node} node with field to observe
  '  * @param {string} fieldName field to observe
  '  * @param {function|string} callback pointer to function to call, or string of field to set, if sendmode is "field"
  '  * @param {string} sendMode ("value"|"node"|"both"|"field"|"none") - if both, then your function must have 2 params (result, node), if "field, then it will set the field named callback on instance"
  '  * @param {boolean} once if true observer is removed when first fired
  '  * @param {object|invalid} scope - scope on which to execute the callback (default to node's m)
  '  * @returns {boolean} true if set, false otherwise
  '  */
  function observeNodeField(node as types.node, fieldName as string, callback as function, sendMode = "value" as string, once = false as boolean, scope = invalid as object) as boolean
    targetField = invalid
    context = {}
    if isInvalid(callback)
      if isUndefined(callback)
        m.log.error("callback is not in scope for field", fieldName)
      else
        m.log.error("callback is not provided for field", fieldName)
      end if
    else if isString(callback)
      context.dottedSet = callback.instr(".") <> -1
      if scope = invalid
        m.log.error("can't use callback for member", callback, "as member, when no scope is provided for field", fieldName)
        return false
      else if not context.dottedSet and not scope.doesExist(callback)
        m.log.error("callback member", callback, "does not exist on target scope for field", fieldName)
        return false
      end if
      targetField = callback
      sendMode = "field"
      callback = invalid
    end if

    if isInvalid(node)
      m.log.error("no node provided to observe for field", fieldName)
      return false
    end if

    if scope <> invalid
      context.instance = scope
    else
      scope = m
    end if

    context.targetField = targetField
    context.callback = callback
    context.scope = scope
    context.field = fieldName
    context.sendMode = sendMode
    context.once = once = true
    context.node = node

    if node._oid = invalid
      node.addFields({ "_oid": rnd(2147483647).toStr() })
    end if
    if scope._oid = invalid
      setOrAddNodeField(scope, "_oid", rnd(2147483647).toStr())
    end if

    context.key = tasks._getContextKey(node, fieldName, callback, targetField, context.instance)

    contexts = tasks._getScopeContexts()[node._oid + "_" + fieldName]
    if contexts = invalid
      contexts = {}
      tasks._getScopeContexts()[node._oid + "_" + fieldName] = contexts
      'bs:disable-next-line
      node.observeFieldScoped(fieldName, getFunctionName(_nodeCallbackBridge))
    end if
    contexts[context.key] = context

    return true
  end function

  function _getContextKey(node as types.node, fieldName as string, callback as function, targetField as string, instance = invalid as object) as string
    if callback <> invalid
      cb = getFunctionName(callback)
    else
      cb = targetField
    end if

    if instance <> invalid
      return `${node.id}.${fieldName}->${instance._oid}.${cb}`
    else
      return `${node.id}.${fieldName}->m.${cb}`
    end if
  end function

  function _getScopeContexts()
    if m._nodeContexts = invalid
      m._nodeContexts = {}
    end if
    return m._nodeContexts
  end function

  function _nodeCallbackBridge(evt as object)
    node = evt.getRoSGNode()
    fieldName = evt.getField()
    contexts = getPath(m, "_nodeContexts." + node._oid + "_" + fieldName)

    if contexts = invalid
      m.log.error("contexts not found for node", node._oid)
      contexts = {}
    end if

    for each key in contexts
      context = contexts[key]
      if context.once
        ' ? "++ +removing CONTEXT "; key
        tasks.cleanNodeObserver(node, fieldName)
        if node.isFrameTimer = true
          private.releaseMaestroPooledComponent(node)
          node.getParent().removeChild(node)
        else if node.removeOnObserve = true and node.getParent() <> invalid
          node.getParent().removeChild(node)
        end if
      end if

      if context.sendMode = "field" and context.targetField <> invalid
        if context.dottedSet
          setPath(context.instance, context.targetField, node[fieldName])
        else
          context.instance[context.targetField] = node[fieldName]
        end if
      else if context.callback <> invalid
        if context.instance <> invalid
          context.instance.__cb = context.callback
          if context.sendMode = "both"
            'bs:disable-next-line
            context.instance.__cb(node[fieldName], context.node)
          else if context.sendMode = "node"
            'bs:disable-next-line
            context.instance.__cb(context.node)
          else if context.sendMode = "none"
            'bs:disable-next-line
            context.instance.__cb()
          else
            'bs:disable-next-line
            context.instance.__cb(node[fieldName])
          end if
          context.instance.delete("__cb")
        else
          executeInScope = function(this as object, callback as function, value as dynamic, sendMode as string, node = invalid as types.node)
            m = this
            if sendMode = "both"
              callback(value, node)
            else if sendMode = "node"
              callback(node)
            else if sendMode = "none"
              callback()
            else
              callback(value)
            end if
          end function

          executeInScope(context.scope, context.callback, node[fieldName], context.sendMode, node)
        end if
      else
        m.log.error("could not identify callback for context: ", context)
      end if
    end for
  end function

  function unobserveNodeField(node as types.node, fieldName as string, callback as float, scope = invalid as object)
    targetField = invalid
    if isInvalid(callback)
      if isUndefined(callback)
        m.log.error("callback is not in scope for field", fieldName)
      else
        m.log.error("callback is not provided for field", fieldName)
      end if
      return false
    else if isString(callback)
      targetField = callback
      callback = invalid
    end if

    if isInvalid(node)
      m.log.error("no node provided to unobserve for field", fieldName)
      return false
    end if

    if node._oid = invalid
      'node was never observed
      return false
    end if

    cKey = node._oid + "_" + fieldName
    contexts = tasks._getScopeContexts()[cKey]
    if contexts <> invalid
      key = tasks._getContextKey(node, fieldName, callback, targetField, scope)
      contexts.delete(key)
      if contexts.count() = 0
        tasks.cleanNodeObserver(node, fieldName)
      else
      end if
    end if

    return true
  end function

  function cleanNodeObserver(node as types.node, fieldName as string)
    if node <> invalid and fieldName <> invalid and m._nodeContexts <> invalid
      m._nodeContexts.delete(node._oid + "_" + fieldName)
      node.unobserveFieldScoped(fieldName)
    end if
  end function

  function cleanScope()
    contexts = tasks._getScopeContexts()
    for each contextKey in contexts
      context = contexts[contextKey]
      for each key in context
        c = context[key]
        tasks.cleanNodeObserver(c.node, c.fieldName)
      end for
    end for
    m._nodeContexts = {}
  end function

  function cancelTask(task as types.node)
    if task <> invalid
      tasks.cleanNodeObserver(task, task._observedField)
      task.control = "stop"
    end if
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ ValueObserver class
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  @strict
  class ValueObserver
    private node
    private field
    private target
    private pendingComparators = {}
    private comparators = {}

    function new(node as types.node, field as string, target as object)
      m.target = target
      m.node = node
      m.field = field
      tasks.observeNodeField(node, field, m.valueCallback, "both", false, m)
    end function

    function reset(hardReset = false as boolean)
      m.pendingComparators = {}
      if hardReset
        m.comparators = {}
      else
        m.pendingComparators.append(m.comparators)
      end if
    end function

    function destroy()
      m.reset(true)
      for each key in m.comparators
        comparator = m.comparators[key]
        tasks.unobserveNodeField(m.node, m.field, comparator.cb, m.target)
      end for
    end function

    function onValue(value as dynamic, func as function, comparator = "=" as string, mode = "value" as string)
      m.comparators[`${value}_${comparator}`] = { v: value, cb: func, c: comparator, mode: mode }
    end function

    function valueCallback(value as dynamic, node as types.node)
      if m.pendingComparators.count() > 0
        for each id in m.pendingComparators
          o = m.pendingComparators[id]
          if (o.c = "=" and value = o.v) or (o.c = ">" and value > o.v) or (o.c = ">=" and value >= o.v) or (o.c = "<" and value < o.v) or (o.c = "<=" and value <= o.v) or (o.c = "<>" and value <> o.v)
            m.pendingComparators.delete(id)
            if isAACompatible(m.target)
              m.target.__cb = o.cb
              if o.mode = "both"
                'bs:disable-next-line
                m.target.__cb(value, node)
              else if o.mode = "value"
                'bs:disable-next-line
                m.target.__cb(value)
              else
                'bs:disable-next-line
                m.target.__cb()
              end if
              m.target.delete("__cb")
            else
              executeInScope = function(this as object, callback as function, mode as string)
                m = this
                if mode = "both"
                  'bs:disable-next-line
                  callback(value, node)
                else if mode = "value"
                  'bs:disable-next-line
                  callback(value)
                else
                  'bs:disable-next-line
                  callback()
                end if
              end function
              'FIXME - not sure if this will work - it might be that m is aa compatible so this if will never fire. moot point for maestro in general; but might raise a problem from regular non-nodeClass/non-task non-vm usage (which I never do; but someone might)
              executeInScope(m.target, o.cb, o.mode)
            end if
          end if
        end for
      end if
    end function
  end class
end namespace
