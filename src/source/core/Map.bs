import "Serialization.bs"
import "pkg:/source/roku_modules/log/LogMixin.brs"

namespace collections
  ' /**
  '  * @module Map
  '  * @description simple map to prevent excess copies when accessing sets of data
  '  */
  @node("Map", "Node")
  class MapClass

    protected data = {}

    public length = 0

    public isSerializable = true

    @observer("onDebugChange")
    public _debug = false

    public __contents as types.AssocArray

    protected log

    function new()
      m.log = new log.Logger("Map")
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Public Methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    public function clear()
      m.data = {}
      m.top.length = 0
    end function

    public function remove(key as string) as void
      if key = invalid
        return
      end if
      m.data.delete(key)
      m.top.length = m.data.count()
    end function

    public function set(key as string, value as dynamic) as void
      if key = invalid
        return
      end if
      m.data[key] = value
      m.top.length = m.data.count()
    end function

    public function append(other as dynamic)
      if type(other) = "roSGNode" and other.subType = "Map"
        other = other@.getValues()
      end if
      m.data.append(other)
      m.top.length = m.data.count()
    end function

    public function get(key as string) as dynamic
      if key = invalid
        return invalid
      end if
      return m.data[key]
    end function

    public function hasKey(key as string) as boolean
      if key = invalid
        return false
      end if
      return m.data[key] <> invalid
    end function

    public function getAA() as types.assocarray
      return m.data
    end function

    ' @returns{array} - array of values
    function getValues() as types.array
      values = []
      for each key in m.data
        values.push(m.data[key])
      end for
      return values
    end function

    ' @returns{array} - array of values
    function getKeys() as types.array
      return m.data.keys()
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Serializable support
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    public function serialize() as types.assocarray
      data = {}
      for each key in m.data
        item = m.data[key]
        serializedItem = utils.Serialization.serialize(item)
        if serializedItem <> invalid
          data[key] = serializedItem
        else
          data[key] = item
        end if
      end for
      return {
        data: data
      }
    end function

    public function deserialize(data as types.assocarray)
      m.clear()
      data = getPath(data, "data", {})
      for each key in data
        if lcase(key) <> "_serializationtype"
          if utils.Serialization.isDeSerializableToNode(data[key])
            item = utils.Serialization.deSerialize(data[key])
            if item <> invalid
              m.data[key] = item
            end if
          else
            m.data[key] = data[key]
          end if
        end if
      end for
      m.top.length = m.data.count()
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Private Methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function onDebugChange(value as dynamic)
      ' ? "dumping contents"
      m.top.__contents = m.data
    end function
  end class
end namespace