namespace tests
  @suite("Request tests")
  class RequestTests extends tests.BaseTestSuite

    private request

    protected override function beforeEach()
      super.beforeEach()
      m.request = new net.Request()
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("helper methods")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("gets")
    function _()
      res = { "id": "result" }

      m.expectOnce(m.request, "get", ["url", "params", "headers", "otherArgs"], res)

      m.assertEqual(m.request.get("url", "params", "headers", "otherArgs"), res)
    end function

    @it("posts")
    function _()
      res = { "id": "result" }

      m.expectOnce(m.request, "post", ["url", "params", "headers", "otherArgs"], res)

      m.assertEqual(m.request.post("url", "params", "headers", "otherArgs"), res)
    end function

    @it("puts")
    function _()
      res = { "id": "result" }

      m.expectOnce(m.request, "put", ["url", "params", "headers", "otherArgs"], res)

      m.assertEqual(m.request.put("url", "params", "headers", "otherArgs"), res)
    end function

    @it("deletes")
    function _()
      res = { "id": "result" }

      m.expectOnce(m.request, "delete", ["url", "params", "headers", "otherArgs"], res)

      m.assertEqual(m.request.delete("url", "params", "headers", "otherArgs"), res)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("executeRequest")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("does not pass parmas or headers if not set")
    @params("get", "u1", invalid, invalid)
    @params("put", "u2", invalid, invalid)
    @params("get", "u1", "illegal", invalid)
    @params("put", "u2", invalid, "illegal")
    @params("put", "u2", "illegal", "illegal")
    function _(method, url, params, headers)

      expectedArgs = {
      }

      res = { "id": "result" }
      m.expectOnce(m.request, "runRequest", [method, url, expectedArgs], res)

      m.assertEqual(m.request.executeRequest(method, url, params, headers), res)
    end function


    @it("passes headers values to request, if set")
    @params("put", "u2", { "i": 1 }, { "i": 2 })
    function _(method, url, params, headers)

      expectedArgs = {
        params: params
        headers: headers
      }

      res = { "id": "result" }
      m.expectOnce(m.request, "runRequest", [method, url, expectedArgs], res)

      m.assertEqual(m.request.executeRequest(method, url, params, headers), res)
    end function

    @it("reformats args if receiving otherArgs")
    function _()
      otherArgs = { "id": "otherArgs" }

      expectedArgs = {
        id: "otherArgs"
      }

      res = { "id": "result" }
      m.expectOnce(m.request, "runRequest", ["method", "url", expectedArgs], res)

      m.assertEqual(m.request.executeRequest("method", "url", invalid, invalid, otherArgs), res)
    end function

    @it("reformats args if receiving otherArgs - with params and headers")
    function _()
      otherArgs = { "id": "otherArgs" }

      headers = { "id": "headers" }
      params = { "id": "params" }

      expectedArgs = {
        id: "otherArgs"
        params: params
        headers: headers
      }

      res = { "id": "result" }
      m.expectOnce(m.request, "runRequest", ["method", "url", expectedArgs], res)

      m.assertEqual(m.request.executeRequest("method", "url", params, headers, otherArgs), res)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("_execute")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("text response valid")
    @params("GET", "u", { id: "h" }, invalid, 100)
    @params("GET", "u", { id: "h" }, invalid, 200)
    @params("GET", "u", { id: "h" }, invalid, 299)
    function _(method, url, headers, data, repsonseCode)
      transfer = { "id": "transfer" }
      m.expectOnce(m.request, "createUrlTransfer", [true, true, "crt"], transfer)

      m.expectOnce(transfer, "setUrl", [url])
      m.expectOnce(transfer, "setHeaders", [headers])

      event = { "id": "event" }
      m.expectOnce(m.request, "sendTransfer", [transfer, 30, method, data], event)

      m.expectOnce(event, "getResponseCode", [], repsonseCode)

      netResult = { "id": "netResult" }

      m.expectOnce(m.request, "createNetResult", [event], netResult)

      res = m.request._execute(method, url, headers, data, 30, 3, "crt")

      m.assertEqual(res, netResult)
    end function

    @it("times out on first request")
    @params("GET", "u", { id: "h" }, invalid, 100)
    @params("GET", "u", { id: "h" }, invalid, 200)
    @params("POST", "u", { id: "h" }, invalid, 200)
    @params("POST", "u", { id: "h" }, "data", 200)
    @params("PUT", "u", { id: "h" }, invalid, 200)
    @params("PUT", "u", { id: "h" }, "data", 200)
    function _(method, url, headers, data, repsonseCode)
      transfer = { "id": "transfer" }
      m.expectOnce(m.request, "createUrlTransfer", [true, true, "crt"], transfer)

      m.expectOnce(transfer, "setUrl", [url])
      m.expectOnce(transfer, "setHeaders", [headers])

      m.expectOnce(m.request, "sendTransfer", [transfer, 30, method, data], invalid)
      m.expectOnce(transfer, "asyncCancel", [])

      'time out doubles each time
      event = { "id": "event" }
      m.expectOnce(m.request, "sendTransfer", [transfer, 60, method, data], event)
      m.expectOnce(event, "getResponseCode", [], repsonseCode)


      netResult = { "id": "netResult" }

      m.expectOnce(m.request, "createNetResult", [event], netResult)

      res = m.request._execute(method, url, headers, data, 30, 3, "crt")

      m.assertEqual(res, netResult)
    end function

    @it("Fails after maximum attempts - invalid responses")
    @params("GET", "u", { id: "h" }, invalid)
    @params("GET", "u", { id: "h" }, invalid)
    @params("GET", "u", { id: "h" }, invalid)
    function _(method, url, headers, data)
      transfer = { "id": "transfer" }
      m.expectOnce(m.request, "createUrlTransfer", [true, true, "crt"], transfer)

      m.expectOnce(transfer, "setUrl", [url])
      m.expectOnce(transfer, "setHeaders", [headers])

      m.expectOnce(m.request, "sendTransfer", [transfer, 30, method, data], invalid)
      m.expectOnce(transfer, "asyncCancel", [])

      m.expectOnce(m.request, "sendTransfer", [transfer, 60, method, data], invalid)
      m.expectOnce(transfer, "asyncCancel", [])

      m.expectOnce(m.request, "sendTransfer", [transfer, 120, method, data], invalid)
      m.expectOnce(transfer, "asyncCancel", [])

      netResult = { "id": "netResult" }

      m.expectOnce(m.request, "createNetResult", [invalid], netResult)

      res = m.request._execute(method, url, headers, data, 30, 3, "crt")

      m.assertEqual(res, netResult)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("createNetResult")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("creates response object")
    @params(200, "r", invalid, true, "r")
    @params(200, invalid, invalid, true, invalid)
    @params(205, "r", { "h1": "a" }, true, "r")
    @params(400, "r", invalid, false, "r")
    @params(503, "r", { "h1": "a" }, false, "r")
    @params(200, "r", invalid, true, "r")
    @params(200, "r", {}, true, "r")
    @params(205, "r", { "content-type": "application/json" }, true, invalid)
    @params(205, invalid, { "content-type": "application/json" }, true, invalid)
    @params(205, "[{},1]", { "content-type": "application/json; charset=UTF-8" }, true, [{}, 1])
    @params(205, "[{},1]", { "content-type": "charset=UTF-8; application/json" }, true, [{}, 1])
    @params(205, "[{},1]", { "content-type": "charset=UTF-8;application/json" }, true, [{}, 1])
    @params(205, "[{},1]", { "content-type": "application/json" }, true, [{}, 1])
    @params(205, "[{},1]", { "Content-Type": "application/json" }, true, [{}, 1])
    @params(205, "[{},1]", { "Content-Type": "application/JSON" }, true, [{}, 1])
    @params(205, "[{},1]", { "Content-Type": "application/JSON ; charset=UTF-8" }, true, [{}, 1])
    @params(205, "[{},1]", { "CONTENT-TYPE": "application/json" }, true, [{}, 1])
    @params(205, "[{},1]", { "c": "application/json" }, true, "[{},1]")
    function _(code, text, headers, ok, expectedData)
      event = { "id": "event" }
      m.expectOnce(event, "getResponseCode", [], code)
      m.expectOnce(event, "getResponseHeaders", [], headers)
      m.expectOnce(event, "getString", [], text)

      res = m.request.createNetResult(event)
      m.assertEqual(res.isOk, ok)
      m.assertEqual(res.statusCode, code)
      m.assertEqual(res.data, expectedData)

    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("sendTransfer")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("handles unsent POST")
    @params(30, invalid, "")
    @params(30, "", "")
    @params(30, "data", "data")
    function _(timeout, data, expectedData)
      transfer = { "id": "transfer" }
      m.expectOnce(transfer, "asyncPostFromString", [expectedData], false)

      m.assertInvalid(m.request.sendTransfer(transfer, timeout, "POST", data))
    end function

    @it("handles unsent default")
    @params(30, invalid, "")
    @params(30, "", "")
    @params(30, "data", "data")
    function _(timeout, data, expectedData)
      transfer = { "id": "transfer" }

      m.expectOnce(transfer, "setRequest", ["other"])
      m.expectOnce(transfer, "asyncPostFromString", [expectedData], false)

      m.assertInvalid(m.request.sendTransfer(transfer, timeout, "other", data))
    end function

    @it("handles sent default")
    @params(30, invalid, "")
    @params(30, "", "")
    @params(30, "data", "data")
    function _(timeout, data, expectedData)
      transfer = { "id": "transfer" }

      m.expectOnce(transfer, "setRequest", ["other"])
      m.expectOnce(transfer, "asyncPostFromString", [expectedData], true)
      m.expectOnce(transfer, "getPort", [], "port")

      responseEvent = { "id": "responseEvent" }
      m.expectOnce(m.request, "waitForResponseEvent", [timeout, "port"], responseEvent)

      m.assertEqual(m.request.sendTransfer(transfer, timeout, "other", data), responseEvent)
    end function

    @it("handles sent POST")
    @params(30, invalid, "")
    @params(30, "", "")
    @params(30, "data", "data")
    function _(timeout, data, expectedData)
      transfer = { "id": "transfer" }
      m.expectOnce(transfer, "asyncPostFromString", [expectedData], true)
      m.expectOnce(transfer, "getPort", [], "port")

      responseEvent = { "id": "responseEvent" }
      m.expectOnce(m.request, "waitForResponseEvent", [timeout, "port"], responseEvent)

      m.assertEqual(m.request.sendTransfer(transfer, timeout, "POST", data), responseEvent)

    end function

    @it("handles unsent GET")
    @params(30, invalid)
    @params(30, "")
    @params(30, "data")
    function _(timeout, data)
      transfer = { "id": "transfer" }
      m.expectOnce(transfer, "asyncGetToString", [], false)

      m.assertInvalid(m.request.sendTransfer(transfer, timeout, "GET", data))
    end function

    @it("handles sent GET")
    @params(30, invalid)
    @params(30, "")
    @params(30, "data")
    function _(timeout, data)
      transfer = { "id": "transfer" }
      m.expectOnce(transfer, "asyncGetToString", [], true)
      m.expectOnce(transfer, "getPort", [], "port")

      responseEvent = { "id": "responseEvent" }
      m.expectOnce(m.request, "waitForResponseEvent", [timeout, "port"], responseEvent)

      m.assertEqual(m.request.sendTransfer(transfer, timeout, "GET", data), responseEvent)

    end function

    @it("handles unsent HEAD")
    @params(30, invalid)
    @params(30, "")
    @params(30, "data")
    function _(timeout, data)
      transfer = { "id": "transfer" }
      m.expectOnce(transfer, "asyncHead", [], false)

      m.assertInvalid(m.request.sendTransfer(transfer, timeout, "HEAD", data))
    end function

    @it("handles sent HEAD")
    @params(30, invalid)
    @params(30, "")
    @params(30, "data")
    function _(timeout, data)
      transfer = { "id": "transfer" }
      m.expectOnce(transfer, "asyncHead", [], true)
      m.expectOnce(transfer, "getPort", [], "port")

      responseEvent = { "id": "responseEvent" }
      m.expectOnce(m.request, "waitForResponseEvent", [timeout, "port"], responseEvent)

      m.assertEqual(m.request.sendTransfer(transfer, timeout, "HEAD", data), responseEvent)

    end function


    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("runRequest")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("bundles up args for execute method, as expected")
    @params("GET", "u", "u", invalid, {}, invalid, 1, "common:/certs/ca-bundle.crt")
    @params("POST", "u", "u", invalid, {}, invalid, 1, "common:/certs/ca-bundle.crt")
    @params("POST", "u", "u", invalid, {}, invalid, 1, "common:/certs/ca-bundle.crt")
    @params("POST", "u", "u", {}, {}, invalid, 1, "common:/certs/ca-bundle.crt")
    @params("POST", "u", "u", { retryCount: 3 }, {}, invalid, 3, "common:/certs/ca-bundle.crt")
    @params("POST", "u", "u", { certificatePath: "cp" }, {}, invalid, 1, "cp")
    @params("GET", "u", "u?a=1", { params: { a: 1 } }, {}, invalid, 1, "common:/certs/ca-bundle.crt")
    @params("POST", "u", "u?a=1", { params: { a: 1 }, "data": "d" }, {}, "d", 1, "common:/certs/ca-bundle.crt")
    @params("POST", "u", "u?a=1", { params: { a: 1 }, "json": [{}, 1] }, { "Content-Type": "application/json" }, "[{},1]", 1, "common:/certs/ca-bundle.crt")
    @params("GET", "u", "u", { headers: { "ct": "b" } }, { ct: "b" }, invalid, 1, "common:/certs/ca-bundle.crt")
    function _(method, url, expectedUrl, args, headers, data, retryCount, certificatePath)
      executeResult = { "id": "executeResult" }

      m.expectOnce(m.request, "_execute", [method, expectedUrl, headers, data, 30000, retryCount, certificatePath], executeResult)

      res = m.request.runRequest(method, url, args)
      m.assertEqual(res, executeResult)
    end function

    @it("changes timeout")
    @params(0)
    @params(3000)
    @params(15000)
    function _(timeout)
      executeResult = { "id": "executeResult" }

      m.expectOnce(m.request, "_execute", ["GET", "u", {}, invalid, timeout, 1, "common:/certs/ca-bundle.crt"], executeResult)
      args = {
        timeout: timeout
      }

      res = m.request.runRequest("GET", "u", args)
      m.assertEqual(res, executeResult)
    end function


  end class
end namespace