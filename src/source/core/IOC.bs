import "pkg:/source/core/Utils.bs"
namespace ioc
  ' /**
  '  * @module ioc
  '  * @description Maestro IOC mixin methods. You can use this IOC container to allow for easy stubbing/mocking of data items in your app.
  '  */

  ' /**
  '  * @member nameOfFunction
  '  * @memberof module:ioc
  '  * @instance
  '  * @function createContainer
  '  * @description creates an IOC container on your app. Call this as early as you can.
  '  */
  function createContainer()
    ioc.reset()
    m.__ioc = createObject("roSGNode", "Node")
    setOrAddNodeField(getGlobal(), "__ioc", m.__ioc)
    setOrAddNodeField(getScene(), "__ioc", m.__ioc)

  end function

  ' /**
  '  * @member nameOfFunction
  '  * @memberof module:ioc
  '  * @instance
  '  * @function initialize
  '  * @description Called automatically to setup your scope with ioc
  '  */
  function initialize()
    m.__ioc = getGlobal().__ioc
    if m.__ioc = invalid
      'in some cases (like tests, the global reference can get screwed up - fall back to scene)
      m.__ioc = getScene().__ioc
    end if
    if m.__ioc = invalid
      m.log.error("call createContainer must be called before initializing any scopes")
    end if
  end function

  function reset()
    container = getGlobal().__ioc
    if container <> invalid
      'bs:disable-next-line
      fields = container.getFields()
      fieldNames = []
      for each key in fields
        fieldNames.push(key)
      end for
      container.removeFields(fieldNames)
    end if
    ioc.clearClassInstances()
  end function

  function getInstance(name as string, path = invalid as string) as dynamic
    if m.__ioc = invalid
      ioc.initialize()
    end if

    instance = m.__ioc[name]
    if instance = invalid
      m.log.warn("value", name, "was not found in IOC")
    end if

    if path = invalid
      return instance
    else
      return getPath(instance, path)
    end if

  end function

  function setInstances(instances as types.assocarray)
    for each key in instances
      ioc.setInstance(key, instances[key])
    end for
  end function
  ' /**
  '  * @member setInstance
  '  * @memberof module:ioc
  '  * @instance
  '  * @function
  '  * @description sets a node instance on the DI container
  '  * @param {field} name of the instance
  '  * @returns {boolean} true if added
  '  */
  function setInstance(field as string, instance as dynamic)
    if type(instance) = "<uninitialized>"
      m.log.error("tried to add uninitialized instance to IOC container for field ", field)
      return false
    end if

    if m.__ioc = invalid
      ioc.initialize()
    end if

    if m.__ioc.doesExist(field)
      m.__ioc[field] = instance
    else
      newFields = {}
      newFields[field] = instance
      m.__ioc.addfields(newFields)
    end if
    return true
  end function

  function setInstanceField(field as string, instanceField as string, value as dynamic)
    instance = ioc.getInstance(field)
    if instance <> invalid
      setOrAddNodeField(instanceField, value)
      ioc.setInstance(field, instance)
    end if
  end function
  ' /**
  '  * @member unsetInstance
  '  * @memberof module:ioc
  '  * @instance
  '  * @function
  '  * @description sets a node instance on the DI container
  '  * @param {field} name of the instance
  '  * @returns {boolean} true if added
  '  */
  function unsetInstance(field as string)
    if m.__ioc = invalid
      ioc.initialize()
    end if

    if m.__ioc.doesExist(field)
      m.__ioc.removeField(field)
    end if
    return true
  end function

  function setClassInstance(instance as dynamic)
    if instance.doesExist("__classname")

      if m._instancesByType = invalid
        m._instancesByType = {}
      end if

      if not m._instancesByType.doesExist(instance.__classname)
        m._instancesByType[instance.__classname] = instance
      else
        m.log.error("instance with type", instance.__classname, "already existed")
      end if
    else
      m.log.error("passed non class value")
    end if
  end function

  ' /**
  '  * @member getClassInstance
  '  * @memberof module:ioc
  '  * @instance
  '  * @function
  '  * @description wrapper for IOC purposes - getting the named item from the model Locator
  '  * @param {string|pointer} classname type to create, or a pointer to the constructor
  '  * @param {array} args - constructor args
  '  * @param {boolean} createTypeIfNotPresent
  '  * @param {boolean}  storeInstance - defaults to true
  '  * @returns {any|invalid} resource, or invalid if not found
  '  */
  function getClassInstance(clazz as dynamic, args = [] as types.assocarray, createTypeIfNotPresent = true as boolean, storeInstance = true as boolean) as dynamic
    if isFunction(clazz)
      instance = ioc.createClassInstance(clazz, args)
      if storeInstance and instance <> invalid
        ioc.setClassInstance(instance)
      end if
      return instance
    end if

    if m._instancesByType = invalid
      m._instancesByType = {}
    end if

    instance = invalid
    if m._instancesByType.doesExist(clazz)
      instance = m._instancesByType[clazz]
    else if createTypeIfNotPresent
      instance = ioc.createClassInstance(clazz, args)
      if storeInstance and instance <> invalid
        ioc.setClassInstance(instance)
      end if
    end if

    return instance
  end function

  ' @params {string|constructor} - name of class, or pointer to class constructor
  function createClassInstance(classType as dynamic, args = [] as types.array) as dynamic

    if isFunction(classType)
      return apply(classType, args)
    end if

    'bs:disable-next-line
    clazz = mr_getClass(classType)

    if isFunction(clazz)
      return apply(clazz, args)
    else
      if type(m.top) = "roSGNode"
        subType = m.top.subtype()
      else
        subType = "UNKNOWN SCOPE"
      end if
      m.log.error("class", classType, "is not in scope inside", subType)
    end if

    return invalid
  end function

  function clearClassInstances()
    ' m.log.warn("WARN clearing class instance store")
    m._instancesByType = {}
  end function
end namespace

namespace ioc.testing

  function setContainer(container as types.assocarray)
    ioc.testing.unset__ioc()
    m.__ioc = container
    setOrAddNodeField(getGlobal(), "__ioc", m.__ioc)
    setOrAddNodeField(getScene(), "__ioc", m.__ioc)
  end function

  function unset__ioc()
    m.__ioc = invalid
    getGlobal().delete("__ioc")
  end function

  function createMockClassInstance(classname as string, id as string, fields = {} as types.assocarray) as dynamic
    instance = { "id": id, "__classname": classname }
    instance.append(fields)
    ioc.setClassInstance(instance)
    return instance
  end function

end namespace