import "pkg:/source/core/BaseClass.bs"

namespace mc.internal.destroyUtils

  'called by a maestro class
  function destroy(target as dynamic)
    '1. -- prepare for efficient destruction --
    'first clean the target, to ensure any large json structures will not be
    'processed by accident
    'and give it the best opportunity to clean itself properly
    target.cleanUp()

    '1. -- destroy everything --
    'now destroy:
    'observers
    mc.tasks.cleanScope()
    'notifications
    target.unobserveAllNotifications()
    'children
    mc.internal.destroyUtils.processChildren(target.top)
    'fields
    mc.internal.destroyUtils.processFields(target)
    mc.internal.destroyUtils.processFields(target.top)
  end function

  function processFields(target as mc.types.assocarray)
    if type(target) = "roSGNode"
      fields = node.getFields()
    else
      fields = target
    end if

    'iterate over the aa-like object to find things to destroy
    for each key in fields
      value = target[key]

      if mc.isArray(value)
        'destroy each item in an array
        for each item in value
          mc.internal.destroyUtils.processValue(item)
        end for
        target[key] = []
      else
        mc.internal.destroyUtils.processValue(value)
        target[key] = invalid
      end if
    end for
  end function

  function processValue(value as dynamic)

    if type(value) = "roSGNode"
      'destroy node items
      if value.isDestroyable and not value.isDestroyed
        value@.destroy()
      end if

    else if mc.isAACompatible(value)
      'class or dictionary
      if value.isDestroyable = true
        'this means it's a destroyable class
        if not value.isDestroyed
          value.destroy()
        end if
      else
        'destroy all fields in turn
        mc.internal.destroyUtils.processFields(value)
      end if
    end if

  end function

  function processChildren(target as dynamic)
    children = target.getChildren(-1, 0)
    for each child in children
      if child.isDestroyable = true and not child.isDestroyed
        child@.destroy()
      end if
    end for

    target.removeChildren(children)
  end function

end namespace
