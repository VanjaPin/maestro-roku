namespace mc
  class Command
    name as string
    func as function
    ignoreFailure = false
    parentCommand as mc.Command
    childCommands = []
    isFinished = false
    commandCount = 0
    isOk = true

    function new(name as string, func as function, options = {} as mc.types.assocarray)
      m.name = name
      m.func = func
      m.ignoreFailure = asBoolean(options.ignoreFailure)
    end function

    function configureChildCommands(commands as mc.types.array)
      m.childCommands = []
      if mc.isArray(commands)
        for each command in commands
          if command <> invalid
            command.parentCommand = m
            m.childCommands.push(command)
          end if
        end for
        m.commandCount = m.childCommands.count()
      else
        ? "ERROR: CANNOT SET COMMAND CHILDREN: RECEIVED NON ARRAY" m.name
        m.isOk = false
      end if
    end function
  end class

  class TaskCommand extends mc.Command
    isTask = true
    taskArgs as mc.types.assocarray
    taskName as string
    onComplete as function
    parentCommant as mc.Command
    isWaitingResult = true

    function new(name as string, taskName as string, taskArgs as mc.types.assocarray, options = {} as mc.types.assocarray)
      super(name, invalid, options)
      m.isWaitingResult = asBoolean(options.isWaitingResult, true)
      m.isTask = true
      m.taskName = taskName
      m.taskArgs = taskArgs
      m.onComplete = options.onComplete
    end function
  end class

  class SequentialCommand extends mc.Command
    commandIndex = -1
    currentCommand as mc.Command
    isSequence = true

    function new(name as string, commands = [] as mc.types.array, options = {} as mc.types.assocarray)
      super(name, invalid, options)
      m.configureChildCommands(commands)
    end function

    function moveNext()
      nextCommand = invalid
      while nextCommand = invalid and m.commandIndex < m.commandCount
        m.commandIndex++
        nextCommand = m.childCommands[m.commandIndex]
      end while
      m.currentCommand = nextCommand
      m.isFinished = m.commandIndex = m.commandCount
    end function

  end class

  class ParallelCommand extends mc.Command
    completeCount = 0
    currentCommand as mc.Command
    isParallel = true

    function new(name as string, commands = [] as mc.types.array, options = {} as mc.types.assocarray)
      super(name, invalid, options)
      m.configureChildCommands(commands)
    end function

    function completeCommand(command as mc.Command)
      m.completeCount++
      m.isFinished = m.completeCount = m.commandCount
    end function
  end class
end namespace
