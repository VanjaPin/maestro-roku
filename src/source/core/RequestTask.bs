import "pkg:/source/roku_modules/log/LogMixin.brs"
import "pkg:/source/core/Utils.bs"
import "pkg:/source/core/Request.bs"

@task("RequestTask", "Task")
@strict
class RequestTask
  public url = ""
  private log = new log.Logger("RequestTask")

  public function nodeRun(args as types.assocarray)
    instance = new RequestTask()
    return instance.execute(args)
  end function

  function new()
  end function

  private function execute(args as types.assocarray) as dynamic
    request = m.makeRequest()
    method = lcase(getPath(args, "method", ""))

    if method = "get"
      m.log.info("executing get")
      res = request.get(args.url, args.params, args.headers, args.otherArgs)
    else if method = "post"
      m.log.info("executing post")
      res = request.post(args.url, args.params, args.headers, args.otherArgs)
    else if method = "put"
      m.log.info("executing put")
      res = request.put(args.url, args.params, args.headers, args.otherArgs)
    else if method = "delete"
      m.log.info("executing delete")
      res = request.delete(args.url, args.params, args.headers, args.otherArgs)
    else
      m.log.error("unknown method", method)
      res = invalid
    end if

    if result <> invalid
      if not getPath(args, "otherArgs.keepHeaders", false)
        result.delete("headers")
      end if
    end if
    return res
  end function

  private function makeRequest() as net.Request
    return new net.Request()
  end function
end class