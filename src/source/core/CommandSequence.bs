import "pkg:/source/core/Utils.bs"
import "pkg:/source/view/NodeClass.bs"
import "pkg:/source/core/Command.bs"

namespace mc
  @node("mc_CommandSequence", "Group")
  class CommandSequence extends mv.NodeClass

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Events
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    public output as mc.types.AssocArray

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Public Fields
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @observer("begin")
    public control as string = invalid

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Private Fields
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private completedCommands = {}
    private runningCommandsCount = 0
    private commands = {}
    private taskCommands = {}

    protected firstCommand = new mc.Command("start", m.runAll)

    function new()
      super(m.top.subType())
    end function

    private function begin()
      m.log.info("starting CommandSequence")

      m.createCommands()
      runCommand = new mc.Command("finish", m.runAll)
      m.startCommand(runCommand)
      m.startCommand(m.firstCommand)
      m.startNextCommands(m.firstCommand)
      m.finishCommand(runCommand)
    end function

    protected function createCommands()
      m.log.error("override createCommands to create your command structure")
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Marker functions
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    'these functions are used as markers to kick off the next block of commands that are waiting on these
    protected function runAll(command as mc.Command)
      'marker function implementation
    end function

    protected function finish(command as mc.Command)
      'marker function implementation
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Loading command Management
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected function startCommand(command as mc.Command) as void
      m.runningCommandsCount++
      funcName = command.name
      if m.completedCommands.doesExist(funcName)
        m.log.error("duplicate command name. Cannot proceed", command.name)
        m.failCommand(command, "Duplicate command function")
        return
      end if
      m.log.info("starting command", command.name)
      m.completedCommands[funcName] = false
      m.taskCommands[command.name] = command

      try
        if command.isTask = true
          task = m.createTask(command.taskName, command.taskArgs, m.onTaskCommandCallback, true, "both")
          mc.setOrAddNodeField(task, "__commandName", command.name)
        else
          'bs:disable-next-line
          m.__cb = command.func
          'bs:disable-next-line
          m.__cb(command)
        end if
      catch error
        'bs:disable-next-line
        message = `Error executing command ${command.name} error was: ${error}`
        m.log.error(message)
        m.failCommand(command, message)
      end try
    end function

    private function onTaskCommandCallback(value as mc.Result, task as mc.types.node)
      command = m.taskCommands[task.__commandName]
      if command <> invalid
        m.taskCommands.delete(task.__commandName)
        if asBoolean(value.isOk)
          m.finishCommand(command)
        else
          m.failCommand(command, `commandTask failed with error ${value.message}`)
        end if
      else
        m.log.error("Missing command on task completion call back", task.__commandName)
      end if
    end function

    protected function finishCommand(command as mc.Command)
      m.runningCommandsCount--
      funcName = command.name

      m.completedCommands[funcName] = true
      m.log.info("Finished command", command.name, ": remaining", m.runningCommandsCount)

      if command.nextCommands.count() > 0
        m.log.info(`command ${command.name} triggers more commands - starting now`)
        m.startNextCommands(command)
      end if

      if m.runningCommandsCount = 0
        m.log.info("finished sequence")
        m.output = { isOK: true }
      end if
    end function

    private function startNextCommands(command as mc.Command)
      m.log.info("starting next commands for ", command.name)
      for each c in command.nextCommands
        m.startCommand(c)
      end for
    end function

    protected function failCommand(command as mc.Command, message as string)
      m.log.error(`error executing loading command ${command.name}: `, message)
      m.output = { isOK: false }
    end function

  end class
end namespace
