import "pkg:/source/core/Tasks.bs"
import "pkg:/source/core/Utils.bs"
import "pkg:/source/core/BaseClass.bs"

namespace tasks

  ' /**
  '  * @module DelayedTaskManager
  '  * @description allows certain tasks to be scheduled at a certain time. Useful for things such as refreshing tokens, etc
  '  */
  @node("DelayedTaskManager", "Group")
  class DelayedTaskManager extends BaseClass

    private activeTimers = {}
    private delayedTasks = {}

    function new()
      super("DelayedTaskManager")
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Delayed task support
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function cancelDelayedTaskWithId(id as string)
      m.log.info("requesting cancel of delayed task with id:", id)

      timer = m.activeTimers[id]
      if timer <> invalid
        m.log.info("found timer - cancelling")
        tasks.cancelWaitTimer(timer)
        m.activeTimers.delete(id)
      end if

      task = m.delayedTasks[id]
      if task <> invalid
        m.log.info("a task for this timer was already in flight: cancelling it now")
        tasks.cancelTask(task)
        if task.getParent() <> invalid
          task.getParent().removeChild(task)
        end if
        m.delayedTasks.delete(id)
      end if
    end function

    function scheduleDelayedTask(nodeType as string, id as string, delay as float, fields as types.assocarray, resultField = "output" as string)
      m.log.info("creating delayed task of type", nodeType, "id", id, "delay", delay)

      if m.activeTimers[id] <> invalid or m.delayedTasks[id] <> invalid
        m.cancelDelayedTaskWithId(id)
      end if

      timer = tasks.waitAFrame(m.onDelayedTaskTimerFire, delay, "node", m, m.top)

      fields = fields ?? {}
      fields.id = id
      setOrAddNodeFields(timer, {
        id: id
        taskInfo: {
          fields: fields
          nodeType: nodeType
          resultField: resultField
        }
      })
    end function

    private function onDelayedTaskTimerFire(timer as types.node)
      taskInfo = timer.taskInfo
      m.activeTimers.delete(timer.id)
      m.delayedTasks[timer.id] = tasks.createTask(taskInfo.nodeType, taskInfo.fields)
    end function

  end class
end namespace