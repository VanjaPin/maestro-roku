import "pkg:/source/core/Types-Polyfill.bs"

function init() as void
  m.currentView = invalid
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ view management
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

function hideView(v as types.node)
  if v <> invalid
    if v.isSameNode(m.top.currentView)
      m.top.currentView = invalid
    end if
    v.visible = false
    m.top.removeChild(v)
  end if

end function

function transitionToView(v as types.node, animated = true as boolean)
  if m.top.transition = invalid
    m.top.transition = createObject("roSGNode", "SimpleTransition")
  end if
  m.top.transition@.execute(m.top, m.top.currentView, v, animated)
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ Lifecycle methods
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

function onShow()
  m.log.verbose("onShow", m.top.subType(), ".", m.top.id)
  if m.top.currentView <> invalid
    m.log.info("setting view visible: ",  m.top.currentView.subType(), ".", m.top.currentView.id)
    m.top.currentView.visible = true
  else
    m.log.warn("this aggregate view has no currentView")
  end if
end function

function onHide()
  m.log.verbose("onHide", m.top.subType(), ".", m.top.id)
  if m.top.currentView <> invalid
    m.log.info("setting view invisible: ",  m.top.currentView.subType(), ".", m.top.currentView.id)
    m.top.currentView.visible = false
  else
    m.log.warn("this aggregate view has no currentView")
  end if
end function

function onGainedFocus(isSelfFocused as boolean)
  ' m.log.verbose("onGainedFocus", isSelfFocused)

  if isSelfFocused
    if m.top.currentView <> invalid
      ' m.log.debug("setting focus to view ", m.top.currentView.id)
      view.setFocus(m.top.currentView)
    else
      m.log.debug("no current view when gaining focus")
    end if
  end if
end function

