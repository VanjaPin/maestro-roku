function init()
  m.log.info("init")
  m.viewStack = []
  m.currentView = invalid
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ public api
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

function push(v as types.node, animated = true as boolean) as void
  m.log.method("push")
  if v = invalid
    m.log.warn(" push invalid view passed in : ignoring")
    return
  end if

  m.log.info("pushing ", v.subType())
  m.viewStack.Push(v)
  v.navController = m.top
  updatePublicFields()

  transitionToView(v, animated)
end function

function reset(newFirstScreen = invalid as types.node, endIndex = -1 as integer, animated = false as boolean)
  m.log.info(" reset ", m.top.numberOfViews)
  if endIndex < -1
    endIndex = -1
  end if

  m.log.info("endIndex is", endIndex)
  index = m.top.numberOfViews - 1
  while index > endIndex
    m.log.info("resetting index ", index)
    v = m.viewStack.Pop()
    if v <> invalid
      hideView(v)
      v.navController = invalid
      v@.onRemovedFromAggregateView(m.top)
    else
      m.log.info(" reset found invalid child")
    end if
    index--
  end while

  updatePublicFields()

  if newFirstScreen <> invalid
    m.log.info("new first screen ", newFirstScreen.subType())
    push(newFirstScreen, animated)
  else if m.top.numberOfViews > 0
    m.log.info("there were views left on the stack after resetting ")
    transitionToView(m.viewStack[m.top.numberOfViews - 1], animated)
  end if


end function

function pop(animated = true as boolean)
  m.log.method("pop ", m.top.numberOfViews)
  previousView = m.top.currentView

  nextView = invalid

  if previousView <> invalid
    m.viewStack.pop()
    previousView.navController = invalid

    nextView = m.viewStack.Peek()
  end if

  updatePublicFields()


  transitionToView(nextView, animated)

  return previousView
end function

function replace(newView = invalid as types.node, animated = false as boolean) as object
  m.log.method("replace ", m.top.numberOfViews)
  previousView = m.top.currentView
  if previousView <> invalid
    m.viewStack.Pop()
    previousView.navController = invalid
  end if

  if newView <> invalid
    m.log.info("replacing with ", newView.subType())
    m.viewStack.Push(newView)
    newView.navController = m.top
  else
    m.log.warn("replace invalid view passed in : ignoring")
  end if

  updatePublicFields()

  transitionToView(newView, animated)

  return previousView
end function


'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ Private impl
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

function updatePublicFields()
  m.top.numberOfViews = m.viewStack.count()
  m.top.viewStack = m.viewStack

  if m.top.numberOfViews = 0
    m.top.isLastViewPopped = true
  else
    m.top.isLastViewPopped = false
  end if
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ Lifecycle methods
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

function initialize(args as types.assocarray)
  m.log.method("initialize(args)")
  m.log = new log.Logger("NC.(" + m.top.getParent().subType() + ")")
end function