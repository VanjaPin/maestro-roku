' /**
'  * @module TabController
'  * @description IOS style tab controller component for managing tabbed views
'  */

function init()
  m.log.method("init")
  m.top.currentItem = invalid
  m.top.isDestroyingChildViewsOnRemoval = false
  m.viewsByMenuItemId = {}
end function

function addChildViews()
  children = m.top.getChildren( - 1, 0)
  for each child in children
    addExistingView(child)
  end for
  m.top.removeChildren(children)
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ public api
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

function changeCurrentItem(item as types.node)
  m.log.info("changeCurrentItem", item)

  if m.top.currentItem = invalid or not m.top.currentItem.isSameNode(item)
    m.top.currentItem = item
    v = getViewForMenuItemContent(m.top.currentItem, item.screenType <> "DeepLinkingController")
    if v = invalid
      m.log.error("no view for item", m.top.currentItem)
    end if
    transitionToView(v)
  end if
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ View management
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

function getViewForMenuItemContent(menuItemContent as types.node, useCache = true as boolean)
  if menuItemContent = invalid
    return invalid
  end if

  v = m.viewsByMenuItemId[menuItemContent.id]

  if v = invalid or not useCache
    v = _createView(menuItemContent)
  end if

  return v
end function

function getViews()
  views = []
  for each id in m.viewsByMenuItemId
    views.push(m.viewsByMenuItemId[id])
  end for
  return views
end function

function addExistingView(existingView as boolean)
  m.viewsByMenuItemId[existingView.id] = existingView
  existingView.visible = false
end function

function _createView(menuItemContent as types.node)
  m.log.method("createView menuItemContent.screenType", menuItemContent.screenType)
  childView = createView(menuItemContent)

  if childView <> invalid
    containerView = createObject("roSGNode", "TabChildScreen")
    containerView.rootView = childView
    containerView.id = menuItemContent.id
    childView.navController = containerView.navController

    m.viewsByMenuItemId[menuItemContent.id] = containerView
    'won't trigger show callbacks prematurely
    childView.visible = false
    childView.isShown = false

    ' initializeView(v)
    initializeView(containerView)
    containerView.visible = false
    return containerView
  else
    m.log.error("menu item ", menuItemContent.id, " resulted in invalid view from createView. Was this view intended to be added via addExistingView?")
    return invalid
  end if
end function

' /**
'  * @member createView
'  * @memberof module:TabController
'  * @instance
'  * @description override point for providing your own view, based on a menuitem content
'  * @param {node} a selected menu item
'  * @returns {BaseScreen} a screen to display in a TabChildScreen
'  */
function createView(menuItemContent as types.node)
  v = invalid

  if menuItemContent.screenType <> "none"
    v = createObject("roSGNode", menuItemContent.screenType)
    if v <> invalid
      v.id = menuItemContent.id
    end if
  end if

  return v
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ Lifecycle
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

function initialize(args as types.assocarray)
  addChildViews()
end function
