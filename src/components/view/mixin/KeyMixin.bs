import "pkg:/source/core/Utils.bs"

' /**
'  * @module KeyMixin
'  * @description Mixin method for helping with managing keypresses. Intended to be included in a base class, so that the super class can override the methods. Supports standard presses and long press gestures too.
'  */

function keyPressMixinInit()
  m.isKeyPressLocked = false
  m.longPressTimer = invalid
  m.longPressKey = ""
  m.isLongPressStarted = false
  m.longPressInterval = 0
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ KEY HANDLING
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

function onKeyEvent(key as string, press as boolean) as boolean
  res = false
  if press
    'bs:disable-next-line
    if isFunction(isAnyKeyPressLocked) and isAnyKeyPressLocked(key)
      return true
    else if isFunction(m.isAnyKeyPressLocked) and m.isAnyKeyPressLocked(key)
      return true
    else if m.vm <> invalid and isFunction(m.vm.isAnyKeyPressLocked) and m.vm.isAnyKeyPressLocked(key)
      return true
    else if m.isKeyPressLocked
      m.log.warn("All key presses are locked, due to isKeyPressLocked flag on ", m.top.id)
      return true
    end if

    if key = "down"
      'bs:disable-next-line
      if isFunction(onKeyPressDown) then res = onKeyPressDown() else res = false
    else if key = "up"
      'bs:disable-next-line
      if isFunction(onKeyPressUp) then res = onKeyPressUp() else res = false
    else if key = "left"
      'bs:disable-next-line
      if isFunction(onKeyPressLeft) then res = onKeyPressLeft() else res = false
    else if key = "right"
      'bs:disable-next-line
      if isFunction(onKeyPressRight) then res = onKeyPressRight() else res = false
    else if key = "OK"
      'bs:disable-next-line
      if isFunction(onKeyPressOK) then res = onKeyPressOK() else res = false
    else if key = "back"
      'bs:disable-next-line
      if isFunction(onKeyPressBack) then res = onKeyPressBack() else res = false
    else if key = "options"
      'bs:disable-next-line
      if isFunction(onKeyPressOptions) then res = onKeyPressOptions() else res = false
    else if key = "play"
      'bs:disable-next-line
      if isFunction(onKeyPressPlay) then res = onKeyPressPlay() else res = false
    else if key = "replay"
      'bs:disable-next-line
      if isFunction(onKeyPressReplay) then res = onKeyPressReplay() else res = false
    end if
    ' else if m.longPressKey <> ""
    '   toggleLongPressTimer(0)
    '   res = true
  end if

  if res = invalid
    res = false
  end if

  if res and press

    'bs:disable-next-line
    if isFunction(getLongPressIntervalForKey) then longPressInterval = getLongPressIntervalForKey(key) else longPressInterval = 0
    if longPressInterval > 0
      m.log.info("entering long press for key ", key)
      m.longPressKey = key
      toggleLongPressTimer(longPressInterval)
    end if
  else
    'bs:disable-next-line
    res = isFunction(isCapturingAnyKeyPress) and isCapturingAnyKeyPress(key, press)
  end if

  if res = false and m.vm <> invalid
    res = m.vm.onKeyEvent(key, press)
  end if
  if res = false and m.onKeyEvent <> invalid
    res = m.onKeyEvent(key, press)
  end if

  return res
end function

function toggleLongPressTimer(interval as float)
  if interval > 0
    if m.longPressTimer = invalid
      m.longPressTimer = private.getMaestroPooledComponent("Timer")
    end if
    m.longPressTimer.duration = interval
    m.longPressTimer.repeat = true
    m.longPressTimer.observeFieldScoped("fire", "onLongPressTimerFire")
    m.longPressTimer.control = "start"
  else
    if m.longPressTimer <> invalid
      m.longPressTimer.unobserveFieldScoped("fire")
      m.longPressTimer.control = "stop"
      m.longPressTimer.repeat = false
      private.releaseMaestroPooledComponent(m.longPressTimer)
      m.longPressTimer = invalid
    end if

    if m.longPressKey <> ""
      m.log.info("finishing longPress on key ", m.longPressKey)
      'bs:disable-next-line
      if m.isLongPressStarted and isFunction(onLongPressFinish)
        'bs:disable-next-line
        onLongPressFinish(m.longPressKey)
      end if
      m.longPressKey = ""
      m.isLongPressStarted = false
    end if
  end if
end function

function onLongPressTimerFire()
  if m.isLongPressStarted
    'bs:disable-next-line
    if isFunction(onLongPressUpdate)
      'bs:disable-next-line
      if not onLongPressUpdate(m.longPressKey)
        m.log.info("long press was cancelled by the onLongPressUpdate call")
        if isFunction(toggleLongPressTimer)
          toggleLongPressTimer(0)
        end if
      else
        'long press timer will keep ticking
        ' toggleLongPressTimer(m.longPressInterval)
      end if
    end if
  else
    'bs:disable-next-line
    if isFunction(onLongPressStart) and not onLongPressStart(m.longPressKey)
      m.log.info("long press was rejected by onLongPressStart call")
      toggleLongPressTimer(0)
    else
      m.log.info("long press is accepted : starting for key ", m.longPressKey)
      m.isLongPressStarted = true
      'timer will keep ticking
      ' toggleLongPressTimer(m.longPressInterval)
    end if
  end if
end function


