import "pkg:/source/roku_modules/log/LogMixin.brs"
import "pkg:/source/core/Collections.bs"
import "pkg:/source/core/Utils.bs"

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ Public Fields
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

'indicates the last change that occurred
'will be of order:
'{type:"add",  child:child, index:index}
'{type:"remove" child:child, index:index}
'{type:"insert" child:child, index:index}
'{type:"replace" child:child, index:index, child:oldValue}
'{type:"append"}, children:[]]
'{type:"clear"}

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ Initialization
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

function init()
  m.log = new log.Logger("Map")
  m.notifyChanges = true
  m.pendingChanges = []
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ Public Methods
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

function sortByKey(keyName as string, ascending = true as boolean)
  children = m.top.getChildren(-1, 0)
  m.top.removeChildren(m.top.getChildren(-1, 0))
  sortedChildren = collections.getSortedArrayByKey(children, keyName, ascending)
  m.top.removeChildren(m.top.getChildren(-1, 0))
  m.top.appendChildren(sortedChildren)
  addChanges([{ type: "sort" }])
end function

function sortByCallFunc(functionName as string, ascending = true as boolean)
  children = m.top.getChildren(-1, 0)
  m.top.removeChildren(m.top.getChildren(-1, 0))
  sortedChildren = collections.getSortedArrayByCallFunc(children, functionName, ascending)
  m.top.removeChildren(m.top.getChildren(-1, 0))
  m.top.appendChildren(sortedChildren)
  addChanges([{ type: "sort" }])
end function

function clear(args = invalid as dynamic)
  m.top.removeChildren(m.top.getChildren(-1, 0))
  m.top.length = 0
  addChanges([{ type: "clear" }])
end function

function peek(args = invalid as dynamic) as dynamic
  return m.top.getChild(m.top.getChildCount() - 1)
end function

function appendChild(child as object)
  m.top.appendChild(child)
  m.top.length = m.top.getChildCount()
  addChanges([{ type: "add", child: child, index: m.top.getChildCount() - 1 }])
end function

function replaceChild(child as object, index as integer)
  oldValue = m.top.getChild(index)
  m.top.replaceChild(child, index)
  addChanges([{ type: "change", child: child, index: index, oldValue: oldValue }])
end function

function insertChild(child as object, index as integer)
  m.top.insertChild(child, index)
  m.top.length = m.top.getChildCount()
  addChanges([{ type: "change", child: child, index: index }])
end function

function insertChildren(children as types.array, index as integer)
  m.top.insertChildren(children, index)
  m.top.length = m.top.getChildCount()
  addChanges([{ type: "change", children: children, index: index }])
end function

function removeChildIndex(index as integer)
  if m.top.getChildCount() > 0
    child = m.top.getChild(index)
    m.top.removeChildIndex(index)
    m.top.length = m.top.getChildCount()
    addChanges([{ type: "remove", child: child, index: index }])
  end if
end function

function appendChildren(children as types.array)
  m.top.appendChildren(children)
  m.top.length = m.top.getChildCount()
  addChanges([{ type: "append", children: children, index: m.top.getChildCount() - 1 }])
end function

function removeChildrenIndex(numberOfItems as integer, index as integer)
  if index > -1 and index + numberOfItems <= m.top.getChildCount()
    changes = []
    for i = index + numberOfItems - 1 to index step -1
      child = m.top.getChild(i)
      childIndex = getIndex(child)
      changes.push({ type: "remove", child: child, index: childIndex })
    end for

    m.top.removeChildrenIndex(numberOfItems, index)
    m.top.length = m.top.getChildCount()
    addChanges(changes)
  end if
end function

function removeChildren(children as types.array)
  changes = []
  for each child in children
    childIndex = getIndex(child)
    changes.push({ type: "remove", child: child, index: childIndex })
  end for
  m.top.removeChildren(children)
  m.top.length = m.top.getChildCount()
  addChanges(changes)
end function

function removeChild(child as types.array)
  changes = []
  changes.push({ type: "remove", child: child, index: getIndex(child) })
  m.top.removeChild(child)
  m.top.length = m.top.getChildCount()
  addChanges(changes)
end function

function hasItem(child as object, key = invalid as string)
  return getIndex(child) <> -1
end function

function getIndex(child as object, key = invalid as string)
  return collections.getArrayIndex(m.top.getChildren(-1, 0), child, key)
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ Changes
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

function notifyUpdate(args = invalid as dynamic)
  setNotificationsEnabled(true, true)
end function

function addChanges(changes as types.array)
  if m.notifyChanges
    m.top.changes = changes
  else
    m.pendingChanges.append(changes)
  end if
end function

function setNotificationsEnabled(active as boolean, sendUpdatedChange = false as boolean)
  m.notifyChanges = active
  if active
    if sendUpdatedChange
      m.top.changes = [{ type: "updated" }]
    else
      m.top.changes = m.pendingChanges
    end if
    m.pendingChanges = []
  end if
end function

function resetPendingChanges(args = invalid as dynamic)
  m.pendingChanges = []
end function
